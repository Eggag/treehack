{
    "name": "Jeopardy of Dropped Balls",
    "code": [
        "1575",
        "J"
    ],
    "tags": [
        "binary search",
        "brute force",
        "dsu",
        "implementation"
    ],
    "difficulty": 1500,
    "statement": "Mr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid $$$a$$$ of size $$$n \\times m$$$Each cell $$$(x,y)$$$ contains an integer $$$a_{x,y}$$$ denoting the direction of how the ball will move.  $$$a_{x,y}=1$$$ \u2014 the ball will move to the right (the next cell is $$$(x, y + 1)$$$);  $$$a_{x,y}=2$$$ \u2014 the ball will move to the bottom (the next cell is $$$(x + 1, y)$$$);  $$$a_{x,y}=3$$$ \u2014 the ball will move to the left (the next cell is $$$(x, y - 1)$$$). Every time a ball leaves a cell $$$(x,y)$$$, the integer $$$a_{x,y}$$$ will change to $$$2$$$. Mr. Chanek will drop $$$k$$$ balls sequentially, each starting from the first row, and on the $$$c_1, c_2, \\dots, c_k$$$-th ($$$1 \\leq c_i \\leq m$$$) columns.Determine in which column each ball will end up in (position of the ball after leaving the grid).",
    "editorial": ""
}{
    "name": "Mod Mod Mod",
    "code": [
        "889",
        "E"
    ],
    "tags": [
        "binary search",
        "dp",
        "math"
    ],
    "difficulty": 3000,
    "statement": "You are given a sequence of integers a1, a2, ..., an. Let , and  for 1 \u2264 i < n. Here,  denotes the modulus operation. Find the maximum value of f(x, 1) over all nonnegative integers x. ",
    "editorial": "Hint 1: let . Can you define some interesting segments of value xi?Hint 2: think of some dp.Hint 3: once you get the dp in O(n2), to speed it up, note the following fact: if , then either c = a or .Explanation of hint 1: let's call ansi = f(x, 1) - f(xi, i + 1), in other words, it's the part of answer we gain from summands from 1 to i. For i = 1 the following is true: x1 can be any number from 0 to a1 - 1, and ansi = xi.Suppose for some i we have the following option: xi can be any number from 0 to r, and in this case ansi = xi * i + k. We can describe this situation by triple (i, r, k). We will show that this triple will produce at most two such triples for i + 1. Indeed, we can have many triples (i + 1, ai + 1 - 1, kj) with different kj and one triple . However, we can note that among triplets of the first type we can leave only one with maximum kj, because we're interested in maximum answer. This kj will equal . Thus, we have two transitions from each triple, that leads us to O(2n) bruteforce solution.Explanation of hint 2: when we have a bruteforce, we (almost) always can think of a dp. Indeed, we have triples, among those with equal i and r let's keep only one with the largest k. There are at most i such triples on step i: on each step half of the generated triples have r = ai + 1 - 1, so we can merge them. This leads us to dp in O(n2).Explanation of hint 3: Okay, what does the third hint say? It basically says that a number can only be taken by modulo  times until it becomes zero, where C is the bound of its initial value. What do we get from this? We can note that if r < ai + 1, we can just leave a triple (i, r, k) untouched except changing i to i + 1. Let's then keep pairs (r, k), assuming triples (i, r, k), where i changes in a cycle. On each step we should change all pairs such that r \u2265 ai + 1, possibly adding one more pair with r = ai + 1 - 1. But when we change a pair, r is get by modulo, so this won't happen with a pair more than O(log(C)) times! Overall, the total number of times we touch a pair is bounded by . Adding  for map in which we keeps the pairs, we obtain the final complexity . Also, map can be replaced with binary search, but the complexity remains the same."
}{
    "name": "Little Elephant and Problem",
    "code": [
        "220",
        "A"
    ],
    "tags": [
        "implementation",
        "sortings"
    ],
    "difficulty": 1300,
    "statement": "The Little Elephant has got a problem \u2014 somebody has been touching his sorted by non-decreasing array a of length n and possibly swapped some elements of the array.The Little Elephant doesn't want to call the police until he understands if he could have accidentally changed the array himself. He thinks that he could have accidentally changed array a, only if array a can be sorted in no more than one operation of swapping elements (not necessarily adjacent). That is, the Little Elephant could have accidentally swapped some two elements.Help the Little Elephant, determine if he could have accidentally changed the array a, sorted by non-decreasing, himself.",
    "editorial": ""
}{
    "name": "Handshakes",
    "code": [
        "534",
        "D"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "difficulty": 1900,
    "statement": "On February, 30th n students came in the Center for Training Olympiad Programmers (CTOP) of the Berland State University. They came one by one, one after another. Each of them went in, and before sitting down at his desk, greeted with those who were present in the room by shaking hands. Each of the students who came in stayed in CTOP until the end of the day and never left.At any time any three students could join together and start participating in a team contest, which lasted until the end of the day. The team did not distract from the contest for a minute, so when another student came in and greeted those who were present, he did not shake hands with the members of the contest writing team. Each team consisted of exactly three students, and each student could not become a member of more than one team. Different teams could start writing contest at different times.Given how many present people shook the hands of each student, get a possible order in which the students could have come to CTOP. If such an order does not exist, then print that this is impossible.Please note that some students could work independently until the end of the day, without participating in a team contest.",
    "editorial": ""
}{
    "name": "Number of Triplets",
    "code": [
        "181",
        "B"
    ],
    "tags": [
        "binary search",
        "brute force"
    ],
    "difficulty": 1300,
    "statement": "You are given n points on a plane. All points are different.Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.",
    "editorial": ""
}{
    "name": "The Three Little Pigs",
    "code": [
        "1548",
        "C"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "fft",
        "math"
    ],
    "difficulty": 2500,
    "statement": "Three little pigs from all over the world are meeting for a convention! Every minute, a triple of 3 new pigs arrives on the convention floor. After the $$$n$$$-th minute, the convention ends.The big bad wolf has learned about this convention, and he has an attack plan. At some minute in the convention, he will arrive and eat exactly $$$x$$$ pigs. Then he will get away.The wolf wants Gregor to help him figure out the number of possible attack plans that involve eating exactly $$$x$$$ pigs for various values of $$$x$$$ ($$$1 \\le x \\le 3n$$$). Two attack plans are considered different, if they occur at different times or if the sets of little pigs to eat are different.Note that all queries are independent, that is, the wolf does not eat the little pigs, he only makes plans!",
    "editorial": "For a given $$$x$$$, we want to compute $$$\\sum_{i=1}^{N}{\\binom{3i}{x}}$$$, which can be solved with a combinatorial dynamic programming.Define the array $$$dp[x][m]$$$ (dimensions: $$$N+1\\times 3$$$), which computes the sum $$$\\sum_{i=0}^{N-1}{\\binom{3i+m}{x}}$$$. Under this definition, $$$ans[x]=dp[x][0]+\\binom{3N}{x}$$$, where $$$ans$$$ is what we want to find.Under the definition of the dp, we can make the following mathematical observations.$$$dp[x][0]+dp[x][1]+dp[x][2]=\\sum_{i=0}^{3N-1}{\\binom{i}{x}}$$$, since term $$$i$$$ belongs to the array with $$$m=i\\mod{3}$$$. This summation can be condensed with the Hockey Stick Identity into $$$\\binom{3N}{x+1}$$$.By repeated uses of Pascal's Identity, we get equations (2) and (3), giving us a system of 3 equations with 3 new unknowns, which can easily be solved.  $$$\\sum_{m=0}^{2}{dp[x][m]}=\\binom{3N}{x+1}$$$.  $$$dp[x][1] = dp[x][0]+dp[x-1][0]$$$  $$$dp[x][2] = dp[x][1]+dp[x-1][1]$$$ The base case is that $$$dp[0][0]=dp[0][1]=dp[0][2]=N$$$. Each query can now be answered trivially.The time complexity is $$$\\mathcal{O}(N)$$$ with combinatorial precomputation.ALTERNATE SOLUTION WITH POLYNOMIAL LONG DIVISION:Define the polynomial $$$P(k)=(1+k)^3+(1+k)^6+\\cdot + (1+k)^{3N}$$$.The coefficient of $$$k^x$$$ in $$$P(k)$$$ is, by the Binomial theorem on each term of the polynomial, equal to $$$\\binom{3}{x}+\\binom{6}{x}+\\cdot + \\binom{3N}{x}$$$. This is equal to $$$ans[x]$$$ from the previous solution.The only thing left to do is quickly calculate $$$P(k)$$$. Due to the tight time limit, calculating the polynomial using FFT in $$$\\mathcal{O}{(N\\log{N})}$$$ is probably too slow.Instead, we notice that $$$P(k)$$$ is a geometric series. Using the geometric series formula, we get that $$$P(k)=\\frac{(1+k)^{3N+3}-(1+k)^3}{(1+k)^3-1}$$$.The numerator and denominator of this fraction can be expanded in linear time. Then all we have to do is a polynomial long division. Once we have $$$P(k)$$$, we can answer all the queries trivially.The time complexity is $$$\\mathcal{O}(N)$$$ with combinatorial precomputation."
}{
    "name": "Resort",
    "code": [
        "350",
        "B"
    ],
    "tags": [
        "graphs"
    ],
    "difficulty": 1500,
    "statement": "Valera's finally decided to go on holiday! He packed up and headed for a ski resort.Valera's fancied a ski trip but he soon realized that he could get lost in this new place. Somebody gave him a useful hint: the resort has n objects (we will consider the objects indexed in some way by integers from 1 to n), each object is either a hotel or a mountain.Valera has also found out that the ski resort had multiple ski tracks. Specifically, for each object v, the resort has at most one object u, such that there is a ski track built from object u to object v. We also know that no hotel has got a ski track leading from the hotel to some object.Valera is afraid of getting lost on the resort. So he wants you to come up with a path he would walk along. The path must consist of objects v1, v2, ..., vk (k \u2265 1) and meet the following conditions:  Objects with numbers v1, v2, ..., vk - 1 are mountains and the object with number vk is the hotel.  For any integer i (1 \u2264 i < k), there is exactly one ski track leading from object vi. This track goes to object vi + 1.  The path contains as many objects as possible (k is maximal). Help Valera. Find such path that meets all the criteria of our hero!",
    "editorial": ""
}{
    "name": "Spelling Check",
    "code": [
        "39",
        "J"
    ],
    "tags": [
        "hashing",
        "implementation",
        "strings"
    ],
    "difficulty": 1500,
    "statement": "Petya has noticed that when he types using a keyboard, he often presses extra buttons and adds extra letters to the words. Of course, the spell-checking system underlines the words for him and he has to click every word and choose the right variant. Petya got fed up with correcting his mistakes himself, that\u2019s why he decided to invent the function that will correct the words itself. Petya started from analyzing the case that happens to him most of the time, when all one needs is to delete one letter for the word to match a word from the dictionary. Thus, Petya faces one mini-task: he has a printed word and a word from the dictionary, and he should delete one letter from the first word to get the second one. And now the very non-trivial question that Petya faces is: which letter should he delete?",
    "editorial": ""
}{
    "name": "Valera and Number",
    "code": [
        "441",
        "E"
    ],
    "tags": [
        "bitmasks",
        "dp",
        "math",
        "probabilities"
    ],
    "difficulty": 2400,
    "statement": "Valera is a coder. Recently he wrote a funny program. The pseudo code for this program is given below://input: integers x, k, pa = x;for(step = 1; step <= k; step = step + 1){    rnd = [random integer from 1 to 100];    if(rnd <= p)        a = a * 2;    else        a = a + 1;}s = 0;while(remainder after dividing a by 2 equals 0){    a = a / 2;    s = s + 1;}Now Valera wonders: given the values x, k and p, what is the expected value of the resulting number s?",
    "editorial": ""
}{
    "name": "Array Stabilization",
    "code": [
        "1095",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 900,
    "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ integer numbers.Let instability of the array be the following value: $$$\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$$$.You have to remove exactly one element from this array to minimize instability of the resulting $$$(n-1)$$$-elements array. Your task is to calculate the minimum possible instability.",
    "editorial": "It is easy to see that we always have to remove either minimum or maximum of the array. So we can sort the array and the answer will be $$$min(a_{n - 1} - a_{1}, a_{n} - a_{2})$$$. We also can do it without sort because two minimal and two maximal elements of the array can be found in linear time."
}{
    "name": "Inconvenient Pairs",
    "code": [
        "1569",
        "D"
    ],
    "tags": [
        "binary search",
        "data structures",
        "implementation",
        "sortings",
        "two pointers"
    ],
    "difficulty": 1900,
    "statement": "There is a city that can be represented as a square grid with corner points in $$$(0, 0)$$$ and $$$(10^6, 10^6)$$$.The city has $$$n$$$ vertical and $$$m$$$ horizontal streets that goes across the whole city, i.\u00a0e. the $$$i$$$-th vertical streets goes from $$$(x_i, 0)$$$ to $$$(x_i, 10^6)$$$ and the $$$j$$$-th horizontal street goes from $$$(0, y_j)$$$ to $$$(10^6, y_j)$$$. All streets are bidirectional. Borders of the city are streets as well.There are $$$k$$$ persons staying on the streets: the $$$p$$$-th person at point $$$(x_p, y_p)$$$ (so either $$$x_p$$$ equal to some $$$x_i$$$ or $$$y_p$$$ equal to some $$$y_j$$$, or both).Let's say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them.Calculate the number of inconvenient pairs of persons (pairs $$$(x, y)$$$ and $$$(y, x)$$$ are the same pair).Let's recall that Manhattan distance between points $$$(x_1, y_1)$$$ and $$$(x_2, y_2)$$$ is $$$|x_1 - x_2| + |y_1 - y_2|$$$.",
    "editorial": "Firstly, let's look at some point $$$(x_i, y_i)$$$. Let's find closest to it vertical and horizontal lines. We will name the closest vertical lines from left and right as $$$lx$$$ and $$$rx$$$ (and $$$ly$$$ and $$$ry$$$ as closest horizontal lines). So, $$$lx \\le x \\le rx$$$ and $$$ly \\le y \\le ry$$$ (we can also note that either $$$lx = rx$$$ or $$$ly = ry$$$).Now, let's note that if for some other point $$$j$$$ $$$(x_j, y_j)$$$ either $$$lx < x_j < rx$$$ or $$$ly < y_j < ry$$$ then to reach $$$j$$$ from $$$i$$$ we must go reach either $$$lx$$$ or $$$rx$$$ (or, $$$ly$$$ or $$$ry$$$), so the shortest distance will be strictly greater than the Manhattan distance. If neither $$$lx < x_j < rx$$$ nor $$$ly < y_j < ry$$$, then we can show that it's always possible to find the shortest path equal to the Manhattan distance. As a result, for each point $$$(x_i, y_i)$$$ we should find the number of points $$$(x_j, y_j)$$$ such that $$$j < i$$$ and $$$lx < x_j < rx$$$ or $$$ly < y_j < ry$$$. The exception here is when $$$j$$$ lies on the same line as $$$i$$$, so we should not count such points.We can note that since either $$$lx = rx$$$ or $$$ly = ry$$$ there is no such point $$$j$$$ that $$$lx < x_j < rx$$$ and $$$ly < y_j < ry$$$ simultaneously, so we can calculate the pairs by $$$x$$$ and $$$y$$$ coordinates independently.Let's focus on $$$y$$$ coordinates (to calculate for $$$x$$$ coordinates, we can just swap all coordinates). Let's sort all points by $$$x$$$ coordinate. To get rid of the case when points $$$i$$$ and $$$j$$$ lies on the same vertical street, we can group them by $$$x$$$ coordinate and process by group (since we sorted by $$$x$$$, groups are just segments). There are no problems with the case when points lie on the same horizontal street, since then $$$ly = ry$$$ and there are no other $$$y_j$$$ with $$$ly < y_j < ry$$$.If we store for each horizontal line $$$y_j$$$ the number of point inside the interval $$$(y_i, y_{i + 1})$$$ then, when we need for point $$$i$$$ calculate the number of points $$$j$$$ with $$$j < i$$$ and $$$ly < y_j < ry$$$, we can just ask for value assigned to $$$ly$$$, because $$$ly$$$ and $$$ry$$$ are consecutive elements in the array $$$y$$$.So, we go through each group two times: first collecting answer, then updating values in appropriate $$$ly$$$-s. Note, that we can calculate $$$ly$$$ and $$$ry$$$ with binary search (using built-in functions).The resulting complexity is $$$O(n + m + k (\\log{k} + \\log{n} + \\log{m}))$$$."
}{
    "name": "Matrix",
    "code": [
        "243",
        "E"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 3000,
    "statement": "Let's consider an n \u00d7 n square matrix, consisting of digits one and zero.We'll consider a matrix good, if it meets the following condition: in each row of the matrix all ones go in one group. That is, each row of the matrix looks like that 00...0011...1100...00 (or simply consists of zeroes if it has no ones).You are given matrix a of size n \u00d7 n, consisting of zeroes and ones. Your task is to determine whether you can get a good matrix b from it by rearranging the columns or not.",
    "editorial": ""
}{
    "name": "Nauuo and Chess",
    "code": [
        "1173",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 1100,
    "statement": "Nauuo is a girl who loves playing chess.One day she invented a game by herself which needs $$$n$$$ chess pieces to play on a $$$m\\times m$$$ chessboard. The rows and columns are numbered from $$$1$$$ to $$$m$$$. We denote a cell on the intersection of the $$$r$$$-th row and $$$c$$$-th column as $$$(r,c)$$$.The game's goal is to place $$$n$$$ chess pieces numbered from $$$1$$$ to $$$n$$$ on the chessboard, the $$$i$$$-th piece lies on $$$(r_i,\\,c_i)$$$, while the following rule is satisfied: for all pairs of pieces $$$i$$$ and $$$j$$$, $$$|r_i-r_j|+|c_i-c_j|\\ge|i-j|$$$. Here $$$|x|$$$ means the absolute value of $$$x$$$.However, Nauuo discovered that sometimes she couldn't find a solution because the chessboard was too small.She wants to find the smallest chessboard on which she can put $$$n$$$ pieces according to the rules.She also wonders how to place the pieces on such a chessboard. Can you help her?",
    "editorial": "1. $$$m\\ge\\left\\lfloor\\frac n 2\\right\\rfloor+1$$$Consider the chess pieces $$$1$$$ and $$$n$$$.$$$\\because\\begin{cases}|r_1-r_n|+|c_1-c_n|\\ge n-1\\\\|r_1-r_n|\\le m-1\\\\|c_1-c_n|\\le m-1\\end{cases}$$$$$$\\therefore m-1+m-1\\ge n-1$$$$$$\\therefore m\\ge\\frac{n+1}2$$$$$$\\because m\\text{ is an integer}$$$$$$\\therefore m\\ge\\left\\lfloor\\frac n 2\\right\\rfloor+1$$$2. $$$m$$$ can be $$$\\left\\lfloor\\frac n 2\\right\\rfloor+1$$$If we put the $$$i$$$-th piece on $$$(r_i,c_i)$$$ satisfying $$$r_i+c_i=i+1$$$, it is a feasible plan, because $$$|r_i-r_j|+|c_i-c_j|\\ge|r_i+c_i-r_j-c_j|$$$."
}{
    "name": "CQXYM Count Permutations",
    "code": [
        "1581",
        "A"
    ],
    "tags": [
        "combinatorics",
        "math",
        "number theory"
    ],
    "difficulty": 800,
    "statement": "CQXYM is counting permutations length of $$$2n$$$.A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).A permutation $$$p$$$(length of $$$2n$$$) will be counted only if the number of $$$i$$$ satisfying $$$p_i<p_{i+1}$$$ is no less than $$$n$$$. For example:  Permutation $$$[1, 2, 3, 4]$$$ will count, because the number of such $$$i$$$ that $$$p_i<p_{i+1}$$$ equals $$$3$$$ ($$$i = 1$$$, $$$i = 2$$$, $$$i = 3$$$). Permutation $$$[3, 2, 1, 4]$$$ won't count, because the number of such $$$i$$$ that $$$p_i<p_{i+1}$$$ equals $$$1$$$ ($$$i = 3$$$). CQXYM wants you to help him to count the number of such permutations modulo $$$1000000007$$$ ($$$10^9+7$$$).In addition, modulo operation is to get the remainder. For example:  $$$7 \\mod 3=1$$$, because $$$7 = 3 \\cdot 2 + 1$$$,  $$$15 \\mod 4=3$$$, because $$$15 = 4 \\cdot 3 + 3$$$. ",
    "editorial": "Let's define $$$q$$$ as the number of $$$i$$$ satisfying the condition. Since the length of the permutation is an even number, the number of permutations which $$$q \\geq n$$$ is equal to the ones which $$$q < n$$$. So the answer is $$$\\frac{1}{2}(2n!)$$$ and the complexity is $$$O(n)$$$.to calculate it in with modulo - just calc $$$(2n-1)! \\cdot n$$$"
}{
    "name": "Quiz",
    "code": [
        "337",
        "C"
    ],
    "tags": [
        "binary search",
        "greedy",
        "math",
        "matrices",
        "number theory"
    ],
    "difficulty": 1600,
    "statement": "Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (109 + 9).",
    "editorial": ""
}{
    "name": "Mike and distribution",
    "code": [
        "798",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "sortings"
    ],
    "difficulty": 2400,
    "statement": "Mike has always been thinking about the harshness of social inequality. He's so obsessed with it that sometimes it even affects him while solving problems. At the moment, Mike has two sequences of positive integers A = [a1, a2, ..., an] and B = [b1, b2, ..., bn] of length n each which he uses to ask people some quite peculiar questions.To test you on how good are you at spotting inequality in life, he wants you to find an \"unfair\" subset of the original sequence. To be more precise, he wants you to select k numbers P = [p1, p2, ..., pk] such that 1 \u2264 pi \u2264 n for 1 \u2264 i \u2264 k and elements in P are distinct. Sequence P will represent indices of elements that you'll select from both sequences. He calls such a subset P \"unfair\" if and only if the following conditions are satisfied: 2\u00b7(ap1 + ... + apk) is greater than the sum of all elements from sequence A, and 2\u00b7(bp1 + ... + bpk) is greater than the sum of all elements from the sequence B. Also, k should be smaller or equal to  because it will be to easy to find sequence P if he allowed you to select too many elements!Mike guarantees you that a solution will always exist given the conditions described above, so please help him satisfy his curiosity!",
    "editorial": ""
}{
    "name": "Coffee and Coursework (Hard Version)",
    "code": [
        "1118",
        "D2"
    ],
    "tags": [
        "binary search",
        "greedy"
    ],
    "difficulty": 1700,
    "statement": "The only difference between easy and hard versions is the constraints.Polycarp has to write a coursework. The coursework consists of $$$m$$$ pages.Polycarp also has $$$n$$$ cups of coffee. The coffee in the $$$i$$$-th cup Polycarp has $$$a_i$$$ caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in any order. Polycarp drinks each cup instantly and completely (i.e. he cannot split any cup into several days).Surely, courseworks are not being written in a single day (in a perfect world of Berland, at least).Let's consider some day of Polycarp's work. Consider Polycarp drinks $$$k$$$ cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are $$$a_{i_1}, a_{i_2}, \\dots, a_{i_k}$$$. Then the first cup he drinks gives him energy to write $$$a_{i_1}$$$ pages of coursework, the second cup gives him energy to write $$$max(0, a_{i_2} - 1)$$$ pages, the third cup gives him energy to write $$$max(0, a_{i_3} - 2)$$$ pages, ..., the $$$k$$$-th cup gives him energy to write $$$max(0, a_{i_k} - k + 1)$$$ pages.If Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.Polycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.",
    "editorial": "Well, the main idea is described in the previous (D1) problem editorial. Read it firstly.So, now we have to improve our solution somehow. How can we do it? Wait... What is it? We iterate over all numbers of days... And the number of pages Polycarp can write when we consider $$$k+1$$$ days instead of $$$k$$$ is strictly increases... (because we always can drink any cup even with the minimum value of $$$a_i$$$ as a first during the new day, and the number of pages will increase). So, what is it? Oh, this is binary search!So all we need is to replace linear search to binary search, submit the written code and get AC."
}{
    "name": "Series of Crimes",
    "code": [
        "181",
        "A"
    ],
    "tags": [
        "brute force",
        "geometry",
        "implementation"
    ],
    "difficulty": 800,
    "statement": "The Berland capital is shaken with three bold crimes committed by the Pihsters, a notorious criminal gang.The Berland capital's map is represented by an n \u00d7 m rectangular table. Each cell of the table on the map represents some districts of the capital. The capital's main detective Polycarpus took a map and marked there the districts where the first three robberies had been committed as asterisks. Deduction tells Polycarpus that the fourth robbery will be committed in such district, that all four robbed districts will form the vertices of some rectangle, parallel to the sides of the map. Polycarpus is good at deduction but he's hopeless at math. So he asked you to find the district where the fourth robbery will be committed.",
    "editorial": ""
}{
    "name": "Sergey and Subway",
    "code": [
        "1060",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "dp",
        "trees"
    ],
    "difficulty": 2000,
    "statement": "Sergey Semyonovich is a mayor of a county city N and he used to spend his days and nights in thoughts of further improvements of Nkers' lives. Unfortunately for him, anything and everything has been done already, and there are no more possible improvements he can think of during the day (he now prefers to sleep at night). However, his assistants have found a solution and they now draw an imaginary city on a paper sheet and suggest the mayor can propose its improvements.Right now he has a map of some imaginary city with $$$n$$$ subway stations. Some stations are directly connected with tunnels in such a way that the whole map is a tree (assistants were short on time and enthusiasm). It means that there exists exactly one simple path between each pair of station. We call a path simple if it uses each tunnel no more than once.One of Sergey Semyonovich's favorite quality objectives is the sum of all pairwise distances between every pair of stations. The distance between two stations is the minimum possible number of tunnels on a path between them.Sergey Semyonovich decided to add new tunnels to the subway map. In particular, he connected any two stations $$$u$$$ and $$$v$$$ that were not connected with a direct tunnel but share a common neighbor, i.e. there exists such a station $$$w$$$ that the original map has a tunnel between $$$u$$$ and $$$w$$$ and a tunnel between $$$w$$$ and $$$v$$$. You are given a task to compute the sum of pairwise distances between all pairs of stations in the new map.",
    "editorial": ""
}{
    "name": "The Doctor Meets Vader (Hard)",
    "code": [
        "1184",
        "B3"
    ],
    "tags": [
        "flows",
        "shortest paths"
    ],
    "difficulty": 2700,
    "statement": "The rebels have saved enough gold to launch a full-scale attack. Now the situation is flipped, the rebels will send out the spaceships to attack the Empire bases!The galaxy can be represented as an undirected graph with $$$n$$$ planets (nodes) and $$$m$$$ wormholes (edges), each connecting two planets.A total of $$$s$$$ rebel spaceships and $$$b$$$ empire bases are located at different planets in the galaxy.Each spaceship is given a location $$$x$$$, denoting the index of the planet on which it is located, an attacking strength $$$a$$$, a certain amount of fuel $$$f$$$, and a price to operate $$$p$$$.Each base is given a location $$$x$$$, a defensive strength $$$d$$$, and a certain amount of gold $$$g$$$.A spaceship can attack a base if both of these conditions hold:   the spaceship's attacking strength is greater or equal than the defensive strength of the base  the spaceship's fuel is greater or equal to the shortest distance, computed as the number of wormholes, between the spaceship's node and the base's node The rebels are very proud fighters. So, if a spaceship cannot attack any base, no rebel pilot will accept to operate it.If a spaceship is operated, the profit generated by that spaceship is equal to the gold of the base it attacks minus the price to operate the spaceship. Note that this might be negative. A spaceship that is operated will attack the base that maximizes its profit.Darth Vader likes to appear rich at all times. Therefore, whenever a base is attacked and its gold stolen, he makes sure to immediately refill that base with gold.Therefore, for the purposes of the rebels, multiple spaceships can attack the same base, in which case each spaceship will still receive all the gold of that base.The rebels have tasked Heidi and the Doctor to decide which set of spaceships to operate in order to maximize the total profit.However, as the war has been going on for a long time, the pilots have formed unbreakable bonds, and some of them refuse to operate spaceships if their friends are not also operating spaceships.They have a list of $$$k$$$ dependencies of the form $$$s_1, s_2$$$, denoting that spaceship $$$s_1$$$ can be operated only if spaceship $$$s_2$$$ is also operated.",
    "editorial": ""
}{
    "name": "Lost Tree",
    "code": [
        "1534",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "interactive",
        "trees"
    ],
    "difficulty": 1800,
    "statement": "This is an interactive problem.Little Dormi was faced with an awkward problem at the carnival: he has to guess the edges of an unweighted tree of $$$n$$$ nodes! The nodes of the tree are numbered from $$$1$$$ to $$$n$$$.The game master only allows him to ask one type of question: Little Dormi picks a node $$$r$$$ ($$$1 \\le r \\le n$$$), and the game master will reply with an array $$$d_1, d_2, \\ldots, d_n$$$, where $$$d_i$$$ is the length of the shortest path from node $$$r$$$ to $$$i$$$, for all $$$1 \\le i \\le n$$$.Additionally, to make the game unfair challenge Little Dormi the game master will allow at most $$$\\lceil\\frac{n}{2}\\rceil$$$ questions, where $$$\\lceil x \\rceil$$$ denotes the smallest integer greater than or equal to $$$x$$$.Faced with the stomach-churning possibility of not being able to guess the tree, Little Dormi needs your help to devise a winning strategy!Note that the game master creates the tree before the game starts, and does not change it during the game.",
    "editorial": "If we had $$$n$$$ queries, solving this problem would be easy as we could just query every single node and add edges when $$$d_i=1$$$. However, notice that as long as we make a query for at least $$$1$$$ endpoint of every edge, we will be able to find all the edges using this method.Observe that a tree is bipartite, so we would be able to achieve a bound of $$$\\lceil \\frac{n}{2} \\rceil$$$ as long as we only query the smaller bipartite set. To figure out which set is smaller, we can just query any node and look at which nodes have odd depth and which ones have even depth.Lastly, be careful with your queries so that your worst-case bound is $$$\\lceil \\frac{n}{2} \\rceil$$$ rather than $$$\\lfloor \\frac{n}{2} \\rfloor + 1$$$. One way to do this is to not include the initial node you query in either bipartite set (so you are effectively working with $$$n-1$$$ nodes rather than $$$n$$$).Time complexity: $$$\\mathcal{O}(n^2)$$$"
}{
    "name": "Quantum Classification - Dataset 5",
    "code": [
        "1357",
        "D3"
    ],
    "tags": [],
    "difficulty": "",
    "statement": "This problem is identical to the problem D1 in every aspect except the training dataset. Please refer to that problem for the full problem statement.",
    "editorial": ""
}{
    "name": "Theatre Square",
    "code": [
        "1",
        "A"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1000,
    "statement": "Theatre Square in the capital city of Berland has a rectangular shape with the size n \u00d7 m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a \u00d7 a.What is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.",
    "editorial": ""
}{
    "name": "River Locks",
    "code": [
        "1700",
        "D"
    ],
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "math"
    ],
    "difficulty": 1900,
    "statement": "Recently in Divanovo, a huge river locks system was built. There are now $$$n$$$ locks, the $$$i$$$-th of them has the volume of $$$v_i$$$ liters, so that it can contain any amount of water between $$$0$$$ and $$$v_i$$$ liters. Each lock has a pipe attached to it. When the pipe is open, $$$1$$$ liter of water enters the lock every second.The locks system is built in a way to immediately transfer all water exceeding the volume of the lock $$$i$$$ to the lock $$$i + 1$$$. If the lock $$$i + 1$$$ is also full, water will be transferred further. Water exceeding the volume of the last lock pours out to the river.   The picture illustrates $$$5$$$ locks with two open pipes at locks $$$1$$$ and $$$3$$$. Because locks $$$1$$$, $$$3$$$, and $$$4$$$ are already filled, effectively the water goes to locks $$$2$$$ and $$$5$$$. Note that the volume of the $$$i$$$-th lock may be greater than the volume of the $$$i + 1$$$-th lock.To make all locks work, you need to completely fill each one of them. The mayor of Divanovo is interested in $$$q$$$ independent queries. For each query, suppose that initially all locks are empty and all pipes are closed. Then, some pipes are opened simultaneously. For the $$$j$$$-th query the mayor asks you to calculate the minimum number of pipes to open so that all locks are filled no later than after $$$t_j$$$ seconds.Please help the mayor to solve this tricky problem and answer his queries. ",
    "editorial": "To begin with, we note that it makes sense to open only some pipe prefix, because we need to fill all the locks, and more left pipes affect the total volume of the baths, which is obviously beneficial. Let's enumerate how many pipes we will open, namely which prefix of pipes we will open and calculate $$$dp_i$$$ - how long it will take to fill the first $$$i$$$ locks if the first $$$i$$$ pipes are open. Let's introduce an auxiliary array $$$pref_i$$$ - the sum of the capacities of the gateways on the prefix $$$i$$$. Then $$$dp_i = max(dp_{i - 1},\\ \\lceil pref_i / i \\rceil)$$$. Let's see why this is so. We need all gateways on prefix $$$i - 1$$$ to be filled, and also that the $$$i$$$-th gateway be filled. Note that if the $$$i$$$-th gateway does not have time to fill up in the time $$$dp_{i - 1}$$$, then it will fill up in the time $$$\\lceil pref_i / i \\rceil$$$ (filling will occur at the time $$$pref_i / i$$$, but since in the condition we are asked about integer times, we can round up and not use real arithmetic), it turns out when the required amount of water is poured into all the locks in total from all pipes. Now knowing $$$dp_i$$$ for all $$$i$$$ open we can similarly calculate when all n gateways are full. For $$$i$$$ this will be $$$max(dp_i,\\ \\lceil pref_n / i \\rceil)$$$. It is also obvious that when an additional pipe is opened, the time will not increase, therefore we can do a bin search by time and find out the answer for the desired request. If the request $$$t$$$ is less than the minimum filling time for the locks (when all pipes are open), then you need to print $$$-1$$$. Total running time O($$$n + q log(n)$$$)."
}{
    "name": "Credit Card",
    "code": [
        "893",
        "D"
    ],
    "tags": [
        "data structures",
        "dp",
        "greedy",
        "implementation"
    ],
    "difficulty": 1900,
    "statement": "Recenlty Luba got a credit card and started to use it. Let's consider n consecutive days Luba uses the card.She starts with 0 money on her account.In the evening of i-th day a transaction ai occurs. If ai > 0, then ai bourles are deposited to Luba's account. If ai < 0, then ai bourles are withdrawn. And if ai = 0, then the amount of money on Luba's account is checked.In the morning of any of n days Luba can go to the bank and deposit any positive integer amount of burles to her account. But there is a limitation: the amount of money on the account can never exceed d.It can happen that the amount of money goes greater than d by some transaction in the evening. In this case answer will be \u00ab-1\u00bb.Luba must not exceed this limit, and also she wants that every day her account is checked (the days when ai = 0) the amount of money on her account is non-negative. It takes a lot of time to go to the bank, so Luba wants to know the minimum number of days she needs to deposit some money to her account (if it is possible to meet all the requirements). Help her!",
    "editorial": "The following greedy solution works. Firstly, deposite money only on days with ai = 0. Secondly, every time the balance is negative to the day with ai = 0, refill it to maximal possible value such that it won't go over d later.   Days with ai \u2260 0 can only lead to invalid state by going over card limit. We can only add money to the balance. Adding zero money in those days won't make invalid states if all were valid previously. Finally, if it's possible to get valid state in every day then it's possible to get it by refilling the same day the check happens. For example, you can make max(0, currentBalance) balance in those days. Then you will never have negative balance there. Though it's not the most optimal way.  Let delta be some value you deposite in some day with ai = 0 to pass all conditions till the next day with aj = 0. I state that function of number of game's moves dependancy on delta is monotonious. Let's check it for some fixed x. Define minimum balance you will get on any suffix from now as minBal. Obviously, taking x - 1 will make it minBal - 1. If it goes negative then you will need an extra move to finish the game. Thus taking maximal delta will lead to the lowest score possible. And last but not least \u2014 realization part. What will be the maximum possible value to deposite? Actually, it's such a value that optimal game after this will lead to maximum balance of d in some day. Thus, you want to check what will be the maximum balance maxBal if you add zero money and take delta as d - maxBal. Obviously, if it's negative then output  - 1. Naively this still works on O(n) per day and lead to O(n2) overall. Notice that by depositing delta you increase maximums on each suffix for now by delta. So, you can calculate it as you will do nothing and add sum deltaSum of your delta's to get actual value. You store prefix sum of aj up to i in pri. Then take maximum on suffix for every i (sui is the maxumum prj for j from i to n). delta = d - (deltaSum + sui).I hope I made it clear enough. :DOverall comlpexity: O(n)."
}{
    "name": "Bertown roads",
    "code": [
        "118",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "difficulty": 2000,
    "statement": "Bertown has n junctions and m bidirectional roads. We know that one can get from any junction to any other one by the existing roads. As there were more and more cars in the city, traffic jams started to pose real problems. To deal with them the government decided to make the traffic one-directional on all the roads, thus easing down the traffic. Your task is to determine whether there is a way to make the traffic one-directional so that there still is the possibility to get from any junction to any other one. If the answer is positive, you should also find one of the possible ways to orient the roads.",
    "editorial": ""
}{
    "name": "Match Points",
    "code": [
        "1156",
        "C"
    ],
    "tags": [
        "binary search",
        "greedy",
        "sortings",
        "ternary search",
        "two pointers"
    ],
    "difficulty": 2000,
    "statement": "You are given a set of points $$$x_1$$$, $$$x_2$$$, ..., $$$x_n$$$ on the number line.Two points $$$i$$$ and $$$j$$$ can be matched with each other if the following conditions hold:  neither $$$i$$$ nor $$$j$$$ is matched with any other point;  $$$|x_i - x_j| \\ge z$$$. What is the maximum number of pairs of points you can match with each other?",
    "editorial": "Let's denote the points that have greater coordinates in their matched pairs as $$$R$$$-points, and the points that have smaller coordinates as $$$L$$$-points.Suppose we have an $$$R$$$-point that has smaller coordinate than some $$$L$$$-point. Then we can \"swap\" them, and the answer won't become worse. Also, if some $$$R$$$-point has smaller coordinate than some point that doesn't belong to any pair, or some $$$L$$$-point has greater coordinate than some point that doesn't belong to any pair, we can swap them too. So, if the answer is $$$k$$$, we choose $$$k$$$ leftmost points as $$$L$$$-points, and $$$k$$$ rightmost ones as $$$R$$$-points.For a fixed value of $$$k$$$, it's easy to see that we should match the leftmost $$$L$$$-point with the leftmost $$$R$$$-point, the second $$$L$$$-point with the second $$$R$$$-point, and so on, in order to maximize the minimum distance in a pair. This fact allows us to check whether it is possible to construct at least $$$k$$$ pairs, and we can use binary search to compute the answer to the problem."
}{
    "name": "K-Set Tree",
    "code": [
        "1691",
        "F"
    ],
    "tags": [
        "combinatorics",
        "dfs and similar",
        "dp",
        "math",
        "trees"
    ],
    "difficulty": 2500,
    "statement": "You are given a tree $$$G$$$ with $$$n$$$ vertices and an integer $$$k$$$. The vertices of the tree are numbered from $$$1$$$ to $$$n$$$.For a vertex $$$r$$$ and a subset $$$S$$$ of vertices of $$$G$$$, such that $$$|S| = k$$$, we define $$$f(r, S)$$$ as the size of the smallest rooted subtree containing all vertices in $$$S$$$ when the tree is rooted at $$$r$$$. A set of vertices $$$T$$$ is called a rooted subtree, if all the vertices in $$$T$$$ are connected, and for each vertex in $$$T$$$, all its descendants belong to $$$T$$$.You need to calculate the sum of $$$f(r, S)$$$ over all possible distinct combinations of vertices $$$r$$$ and subsets $$$S$$$, where $$$|S| = k$$$. Formally, compute the following: $$$$$$\\sum_{r \\in V} \\sum_{S \\subseteq V, |S| = k} f(r, S),$$$$$$ where $$$V$$$ is the set of vertices in $$$G$$$.Output the answer modulo $$$10^9 + 7$$$.",
    "editorial": "Our task is to calculate $$$$$$\\sum_{R \\in V} \\sum_{S \\subseteq V, |S| = k} f(R, S)$$$$$$ over all possible $$$R, S$$$. Let us first focus on all possible $$$S$$$ just for a particular root $$$R = r$$$ i.e. let us root our tree at $$$r$$$ and try to find the sum $$$\\sum_{S \\subseteq V, |S| = k} f(R,S)$$$ just for that root.We will calculate our answer using dynamic programming over the trees. In this technique, we will calculate some properties for each sub-tree and eventually get those properties for the entire tree.The first property that we want to calculate for each sub-tree with node $$$v$$$ as the sub-tree root is \u2014 $$$cnt(v)$$$ which is the number of subsets of size $$$k$$$ such that sub-tree of $$$v$$$ is the minimum-size sub-tree covering it entirely. This can be calculated using combinatorics \u2014 first we calculate the total number of subsets of size $$$k$$$ in this sub-tree and then from it we can subtract the number of subsets of size $$$k$$$ which don't have sub-tree of $$$v$$$ as the minimum size sub-tree. $$$$$$cnt(v) = {size(v) \\choose k} - \\sum \\limits_{u \\in \\text{children}} {size(u) \\choose k}$$$$$$ Here, $$$u$$$ are all the children of $$$v$$$ and $$$size(x)$$$ represents the size of the sub-tree of $$$x$$$.This first property that we calculated is very important for us:   If we take the sum of $$$cnt(v)$$$ over every node, we will get the total number of subsets of size $$$k$$$.  When the tree is rooted at $$$r$$$, $$$cnt(v)$$$ represents the number of subsets where sub-tree of $$$v$$$ is the smallest sub-tree containing a set $$$S$$$ with $$$k$$$ vertices.  Conclusively, $$$f(R = r, S) = \\sum \\limits_{v = 1}^{n} cnt(v) \\times size(v)$$$. The second property that we want to find for each sub-tree is the $$$size(v)$$$ \u2014 the size of the sub-tree of $$$v$$$.The third property that we want to find for each sub-tree is $$$cntsz(v) = cnt(v) \\times size(v)$$$.Now, we have $$$f(R = r, S)$$$ (as explained above) i.e. the contribution to the final answer when the root of the entire tree is fixed at $$$r$$$. We can calculate the final answer by fixing other nodes as roots and then summing these value up.Notice what happens when we try to change the root from $$$r$$$ to one of it's children. The properties that we calculated for each sub-tree remain the same except for the old root and the new root. We can recalculate the properties for these two nodes using some clever arithmetic and get the new answer with a new root. This is known as re-rooting technique. The method to calculate the new properties are:Note: We use $$$OR$$$ to represent Old Root. and $$$NR$$$ to represent New Root.  $$$size_{new}(OR) = size_{old}(OR) - size_{old}(NR)$$$. (Subtracting the size of this branch.)  $$$size_{new}(NR) = n$$$. (This is the main root.)  $$$cnt_{new}(OR) = cnt_{old}(OR) - {size_{old}(OR) \\choose k} + {size_{new}(OR) \\choose k} + {size_{old}(NR) \\choose k}$$$. (Removing contribution of old size and putting contribution of new size. Removing contribution of the branch.)  $$$cnt_{new}(NR) = cnt_{old}(NR) - {size_{old}(NR) \\choose k} + {size_{new}(NR) \\choose k} - {size_{new}(OR) \\choose k}$$$. (Removing contribution of old size and putting contribution of new size. Putting contribution of new brach.)  $$$cntsz_{new}(OR) = cnt_{new}(OR) \\times size_{new}(OR)$$$ (By definition.)  $$$cntsz_{new}(NR) = cnt_{new}(NR) \\times size_{new}(NR)$$$ (By definition.)  $$$ans_{new} = ans_{old} - cntsz_{old}(OR) - cntsz_{old}(NR) + cntsz_{new}(OR) + cntsz_{new}(NR)$$$ (Subtracting old contribution and adding new contribution.) The final answer is given by: $$$$$$finalans = \\sum \\limits_{v=1}^n ans_v$$$$$$"
}{
    "name": "Perfect Security",
    "code": [
        "923",
        "C"
    ],
    "tags": [
        "data structures",
        "greedy",
        "strings",
        "trees"
    ],
    "difficulty": 1800,
    "statement": "Alice has a very important message M consisting of some non-negative integers that she wants to keep secret from Eve. Alice knows that the only theoretically secure cipher is one-time pad. Alice generates a random key K of the length equal to the message's length. Alice computes the bitwise xor of each element of the message and the key (, where  denotes the bitwise XOR operation) and stores this encrypted message A. Alice is smart. Be like Alice.For example, Alice may have wanted to store a message M = (0, 15, 9, 18). She generated a key K = (16, 7, 6, 3). The encrypted message is thus A = (16, 8, 15, 17).Alice realised that she cannot store the key with the encrypted message. Alice sent her key K to Bob and deleted her own copy. Alice is smart. Really, be like Alice.Bob realised that the encrypted message is only secure as long as the key is secret. Bob thus randomly permuted the key before storing it. Bob thinks that this way, even if Eve gets both the encrypted message and the key, she will not be able to read the message. Bob is not smart. Don't be like Bob.In the above example, Bob may have, for instance, selected a permutation (3, 4, 1, 2) and stored the permuted key P = (6, 3, 16, 7).One year has passed and Alice wants to decrypt her message. Only now Bob has realised that this is impossible. As he has permuted the key randomly, the message is lost forever. Did we mention that Bob isn't smart?Bob wants to salvage at least some information from the message. Since he is not so smart, he asks for your help. You know the encrypted message A and the permuted key P. What is the lexicographically smallest message that could have resulted in the given encrypted text?More precisely, for given A and P, find the lexicographically smallest message O, for which there exists a permutation \u03c0 such that  for every i.Note that the sequence S is lexicographically smaller than the sequence T, if there is an index i such that Si < Ti and for all j < i the condition Sj = Tj holds. ",
    "editorial": "We decrypt the message greedily, one number at a time. Note that  is a bijection on non-negative integers. For that reason, there is always a unique number from the key that lexicographically minimises the string. We can always pick and remove that number, output its xor with the current number from the encrypted text. It remains to show how to do the above faster than . We build a trie on the numbers from the key, more precisely on their binary representation, starting from the most significant bit. To find the number Kj that minimises , one can simply search for Ai, bit by bit. That is, if the k-th most significant bit of Ai is 1, we try to follow the edge labelled 1, and 0 otherwise. If we always succeed in that, we have found Ai in the key multiset, and hence , which is clearly minimal. If at some bit, we do not succeed, we select the other branch (that is, if k-th bit of Ai is 1, but there is no such number in the key set, we pick 0 instead and continue. This solution uses  time, where W is the number of bits (here it is 30).The same approach can be also implemented using multiset, which is probably faster to write, but has an extra  multiplicative factor, which may or may not fit into TL."
}{
    "name": "Chess Championship",
    "code": [
        "736",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "flows",
        "greedy",
        "math"
    ],
    "difficulty": 2900,
    "statement": "Ostap is preparing to play chess again and this time he is about to prepare. Thus, he was closely monitoring one recent chess tournament. There were m players participating and each pair of players played exactly one game. The victory gives 2 points, draw\u00a0\u2014 1 points, lose\u00a0\u2014 0 points.Ostap is lazy, so he never tries to remember the outcome of each game. Instead, he computes the total number of points earned by each of the players (the sum of his points in all games which he took part in), sort these value in non-ascending order and then remembers first n integers in this list.Now the Great Strategist Ostap wonders whether he remembers everything correct. He considers that he is correct if there exists at least one tournament results table such that it will produce the given integers. That means, if we count the sum of points for each player, sort them and take first n elements, the result will coincide with what Ostap remembers. Can you check if such table exists?",
    "editorial": ""
}{
    "name": "Hydra",
    "code": [
        "243",
        "B"
    ],
    "tags": [
        "graphs",
        "sortings"
    ],
    "difficulty": 2000,
    "statement": "One day Petya got a birthday present from his mom: a book called \"The Legends and Myths of Graph Theory\". From this book Petya learned about a hydra graph.A non-oriented graph is a hydra, if it has a structure, shown on the figure below. Namely, there are two nodes u and v connected by an edge, they are the hydra's chest and stomach, correspondingly. The chest is connected with h nodes, which are the hydra's heads. The stomach is connected with t nodes, which are the hydra's tails. Note that the hydra is a tree, consisting of h + t + 2 nodes.  Also, Petya's got a non-directed graph G, consisting of n nodes and m edges. Petya got this graph as a last year birthday present from his mom. Graph G contains no self-loops or multiple edges.Now Petya wants to find a hydra in graph G. Or else, to make sure that the graph doesn't have a hydra.",
    "editorial": ""
}{
    "name": "Edge coloring of bipartite graph",
    "code": [
        "600",
        "F"
    ],
    "tags": [
        "graphs"
    ],
    "difficulty": 2800,
    "statement": "You are given an undirected bipartite graph without multiple edges. You should paint the edges of graph to minimal number of colours, so that no two adjacent edges have the same colour.",
    "editorial": ""
}{
    "name": "Pawns",
    "code": [
        "1373",
        "G"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "greedy"
    ],
    "difficulty": 2600,
    "statement": "You are given a chessboard consisting of $$$n$$$ rows and $$$n$$$ columns. Rows are numbered from bottom to top from $$$1$$$ to $$$n$$$. Columns are numbered from left to right from $$$1$$$ to $$$n$$$. The cell at the intersection of the $$$x$$$-th column and the $$$y$$$-th row is denoted as $$$(x, y)$$$. Furthermore, the $$$k$$$-th column is a special column. Initially, the board is empty. There are $$$m$$$ changes to the board. During the $$$i$$$-th change one pawn is added or removed from the board. The current board is good if we can move all pawns to the special column by the followings rules:  Pawn in the cell $$$(x, y)$$$ can be moved to the cell $$$(x, y + 1)$$$, $$$(x - 1, y + 1)$$$ or $$$(x + 1, y + 1)$$$;  You can make as many such moves as you like;  Pawns can not be moved outside the chessboard;  Each cell can not contain more than one pawn. The current board may not always be good. To fix it, you can add new rows to the board. New rows are added at the top, i. e. they will have numbers $$$n+1, n+2, n+3, \\dots$$$.After each of $$$m$$$ changes, print one integer \u2014 the minimum number of rows which you have to add to make the board good.",
    "editorial": "For each pawn with initial position $$$(x, y)$$$ there exists a minimum index of row $$$i$$$ such that the pawn can reach the cell $$$(k, i)$$$, but cannot reach the cell $$$(k, i - 1)$$$. It's easy to see that $$$i = |k - x| + y$$$. In the resulting configuration, this pawn can occupy the cell $$$(k, i)$$$, $$$(k, i + 1)$$$, $$$(k, i + 2)$$$ or any other cell $$$(k, j)$$$ having $$$j \\ge i$$$.Suppose the board consists of $$$r$$$ rows. For each row, the number of rows above it should be not less than the number of pawns that occupy the cells above it (that is, having $$$i$$$ greater than the index of that row) \u2014 because, if this condition is not fulfilled, we can't assign each pawn a unique cell. If we denote the number of pawns that should go strictly above the $$$j$$$-th row as $$$f(j)$$$, then for every row, the condition $$$f(j) \\le r - j$$$ must be met.To prove that this condition is sufficient, we may, for example, use Hall's theorem. Okay, now what about finding the minimum $$$r$$$ satisfying it? Let's initially set $$$r$$$ to $$$n$$$, and for each row maintain the value of $$$j + f(j) - n$$$ \u2014 the minimum number of rows we have to add to our board so that the condition for the row $$$j$$$ is met (we also have to maintain this value for $$$n - 1$$$ auxiliary rows from $$$n + 1$$$ to $$$2n - 1$$$, since some pawns cannot fit in the initial board at all). Finding the minimum value we have to add to $$$r$$$ equals finding the maximum of all these values on some prefix (we don't need to look at the values on some rows with large indices, if there are no pawns after them, so we need a maximum query on the segment $$$[1, \\max_i]$$$, where $$$\\max_i$$$ is the maximum index $$$i$$$ among all pawns); and when a pawn is added or removed, we should add $$$+1$$$ or $$$-1$$$ to all values on some suffix. A segment tree with lazy propagation will do the trick, solving the problem for us in $$$O(m \\log n)$$$."
}{
    "name": "Block unitary",
    "code": [
        "1115",
        "U3"
    ],
    "tags": [
        "*special"
    ],
    "difficulty": 1700,
    "statement": "Implement a unitary operation on $$$N$$$ qubits which is represented by the following square matrix of size $$$2^N$$$: top right and bottom left quarters are filled with zero elements,  top left quarter is an anti-diagonal matrix of size $$$2^{N-1}$$$, bottom right quarter is filled with non-zero elements.For example, for $$$N = 2$$$ the matrix of the operation should have the following shape:.X..X.....XX..XXHere X denotes a \"non-zero\" element of the matrix (a complex number which has the square of the absolute value greater than or equal to $$$10^{-5}$$$), and . denotes a \"zero\" element of the matrix (a complex number which has the square of the absolute value less than $$$10^{-5}$$$).The row and column indices of the matrix follow little endian format: the least significant bit of the index is stored first in the qubit array. Thus, the first column of the matrix gives you the coefficients of the basis states you'll get if you apply the unitary to the $$$|00..0\\rangle$$$ basis state, the second column - to the $$$|10..0\\rangle$$$ basis state etc. You can use the DumpUnitary tool to get the coefficients of the matrix your unitary implements (up to relative phases between columns) and the corresponding pattern of Xs and .s.You have to implement an operation which takes an array of $$$N$$$ ($$$2 \\le N \\le 5$$$) qubits as an input and applies the unitary transformation with the matrix of the described shape to it. If there are multiple unitaries which satisfy the requirements, you can implement any of them. The \"output\" of your operation is the pattern of the matrix coefficients implemented by it; you can see the testing harness in the UnitaryPatterns kata.Your code should have the following signature:namespace Solution {    open Microsoft.Quantum.Primitive;    open Microsoft.Quantum.Canon;    operation Solve (qs : Qubit[]) : Unit {        // your code here    }}",
    "editorial": ""
}{
    "name": "Driving Test",
    "code": [
        "845",
        "D"
    ],
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "difficulty": 1800,
    "statement": "Polycarp has just attempted to pass the driving test. He ran over the straight road with the signs of four types.  speed limit: this sign comes with a positive integer number \u2014 maximal speed of the car after the sign (cancel the action of the previous sign of this type);  overtake is allowed: this sign means that after some car meets it, it can overtake any other car;  no speed limit: this sign cancels speed limit if any (car can move with arbitrary speed after this sign);  no overtake allowed: some car can't overtake any other car after this sign. Polycarp goes past the signs consequentially, each new sign cancels the action of all the previous signs of it's kind (speed limit/overtake). It is possible that two or more \"no overtake allowed\" signs go one after another with zero \"overtake is allowed\" signs between them. It works with \"no speed limit\" and \"overtake is allowed\" signs as well.In the beginning of the ride overtake is allowed and there is no speed limit.You are given the sequence of events in chronological order \u2014 events which happened to Polycarp during the ride. There are events of following types:  Polycarp changes the speed of his car to specified (this event comes with a positive integer number);  Polycarp's car overtakes the other car;  Polycarp's car goes past the \"speed limit\" sign (this sign comes with a positive integer);  Polycarp's car goes past the \"overtake is allowed\" sign;  Polycarp's car goes past the \"no speed limit\";  Polycarp's car goes past the \"no overtake allowed\"; It is guaranteed that the first event in chronological order is the event of type 1 (Polycarp changed the speed of his car to specified).After the exam Polycarp can justify his rule violations by telling the driving instructor that he just didn't notice some of the signs. What is the minimal number of signs Polycarp should say he didn't notice, so that he would make no rule violations from his point of view?",
    "editorial": "Let's notice that you should never say that you didn't notice signs \"no speed limit\" and \"overtake is allowed\". Also if you drive with speed sp, you don't want to remove signs \"speed limit\" with number greater or equal to sp.Thus, greedy solution will work. Process all the events in chronological order. We should maintain stack of signs \"speed limit\" and amount of signs \"no overtake allowed\". If we meet sign \"speed limit\", we push its limit to stack, sign \"no overtake allowed\" \u2014 increase cnt, \"no speed limit\" \u2014 clear stack, \"overtake is allowed\" \u2014 assign cnt to zero. After every event we should check if our speed is fine. While value of sign on the top of the stack is less than current speed, pop it and increase answer. If we overtake someone, we add cnt to answer and assign cnt to zero.Overall complexity: O(n)."
}{
    "name": "Numbers on Whiteboard",
    "code": [
        "1430",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "Numbers $$$1, 2, 3, \\dots n$$$ (each integer from $$$1$$$ to $$$n$$$ once) are written on a board. In one operation you can erase any two numbers $$$a$$$ and $$$b$$$ from the board and write one integer $$$\\frac{a + b}{2}$$$ rounded up instead.You should perform the given operation $$$n - 1$$$ times and make the resulting number that will be left on the board as small as possible. For example, if $$$n = 4$$$, the following course of action is optimal:  choose $$$a = 4$$$ and $$$b = 2$$$, so the new number is $$$3$$$, and the whiteboard contains $$$[1, 3, 3]$$$;  choose $$$a = 3$$$ and $$$b = 3$$$, so the new number is $$$3$$$, and the whiteboard contains $$$[1, 3]$$$;  choose $$$a = 1$$$ and $$$b = 3$$$, so the new number is $$$2$$$, and the whiteboard contains $$$[2]$$$. It's easy to see that after $$$n - 1$$$ operations, there will be left only one number. Your goal is to minimize it.",
    "editorial": "It's easy to see that we can't get the result less than $$$2$$$, because, if we merge two positive numbers, and at least one of them is $$$2$$$ or greater, the new number is always greater than $$$1$$$. So we can't get rid of all numbers greater than $$$1$$$.To always achieve $$$2$$$, we can use a greedy algorithm: always merge two maximum numbers. During the first step, we merge $$$n$$$ and $$$n - 1$$$, get $$$n$$$; then we merge $$$n$$$ and $$$n - 2$$$, get $$$n - 1$$$; then we merge $$$n - 1$$$ and $$$n - 3$$$, get $$$n - 2$$$; and it's easy to see that the last operation is merging $$$3$$$ and $$$1$$$, so the result is $$$2$$$."
}{
    "name": "Who needs suffix structures?",
    "code": [
        "1302",
        "H"
    ],
    "tags": [],
    "difficulty": "",
    "statement": "This is an unusual problem in an unusual contest, here is the announcement: http://codeforces.com/blog/entry/73543You run a string shop. During a day your customers want to buy strings of certain lengths and sometimes satisfying other properties.You have a string of length $$$n$$$ and can cut a string of any length starting at any position out of it. Today your first customer asks you some questions of type \"Is there any difference between substrings of length $$$k$$$ if one of them starts at position $$$i$$$ and another one starts from the $$$j$$$-th position?\" You are to answer all these questions.Please note that in your shop strings are over an alphabet of size $$$987\\,898\\,789$$$.",
    "editorial": "The problem name and the folder with open tests hint that the intended solution uses hashes. We already have the modulo from the statement. The rest is to obtain the base.There is a bunch of tests where all queries compare the first segment of length $$$k$$$ with all other subsegments of length $$$k$$$ which end at a position divisible by $$$k$$$. One can manually (using an $$$O(nq)$$$ algorithm or a suffix structure) get all such pairs of substrings with a collision. Each of them gives us a constraint of form $$$P(base)\\equiv 0\\pmod{987\\,898\\,789}$$$ where $$$P$$$ is a polynomial. One can get a GCD of all such polynomials to obtain a polynomial having $$$base$$$ as its root.GCD'ing such polynomials from the whole pack of open tests, one can obtain that $$$base$$$ is the root of the polynomial $$$x - 456\\,545\\,664$$$."
}{
    "name": "Dreamoon and Strings",
    "code": [
        "476",
        "E"
    ],
    "tags": [
        "dp",
        "strings"
    ],
    "difficulty": 2200,
    "statement": "Dreamoon has a string s and a pattern string p. He first removes exactly x characters from s obtaining string s' as a result. Then he calculates  that is defined as the maximal number of non-overlapping substrings equal to p that can be found in s'. He wants to make this number as big as possible.More formally, let's define  as maximum value of  over all s' that can be obtained by removing exactly x characters from s. Dreamoon wants to know  for all x from 0 to |s| where |s| denotes the length of string s.",
    "editorial": ""
}{
    "name": "Tablecity",
    "code": [
        "575",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "There was a big bank robbery in Tablecity. In order to catch the thief, the President called none other than Albert \u2013 Tablecity\u2019s Chief of Police. Albert does not know where the thief is located, but he does know how he moves.Tablecity can be represented as 1000 \u00d7 2 grid, where every cell represents one district. Each district has its own unique name \u201c(X, Y)\u201d, where X and Y are the coordinates of the district in the grid. The thief\u2019s movement is as Every hour the thief will leave the district (X, Y) he is currently hiding in, and move to one of the districts: (X - 1, Y), (X + 1, Y), (X - 1, Y - 1), (X - 1, Y + 1), (X + 1, Y - 1), (X + 1, Y + 1) as long as it exists in Tablecity. Below is an example of thief\u2019s possible movements if he is located in district (7,1):Albert has enough people so that every hour he can pick any two districts in Tablecity and fully investigate them, making sure that if the thief is located in one of them, he will get caught. Albert promised the President that the thief will be caught in no more than 2015 hours and needs your help in order to achieve that.",
    "editorial": ""
}{
    "name": "Compress String",
    "code": [
        "1120",
        "C"
    ],
    "tags": [
        "dp",
        "strings"
    ],
    "difficulty": 2100,
    "statement": "Suppose you are given a string $$$s$$$ of length $$$n$$$ consisting of lowercase English letters. You need to compress it using the smallest possible number of coins.To compress the string, you have to represent $$$s$$$ as a concatenation of several non-empty strings: $$$s = t_{1} t_{2} \\ldots t_{k}$$$. The $$$i$$$-th of these strings should be encoded with one of the two ways:  if $$$|t_{i}| = 1$$$, meaning that the current string consists of a single character, you can encode it paying $$$a$$$ coins;  if $$$t_{i}$$$ is a substring of $$$t_{1} t_{2} \\ldots t_{i - 1}$$$, then you can encode it paying $$$b$$$ coins. A string $$$x$$$ is a substring of a string $$$y$$$ if $$$x$$$ can be obtained from $$$y$$$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.So your task is to calculate the minimum possible number of coins you need to spend in order to compress the given string $$$s$$$.",
    "editorial": "Let's say that $$$dp[p]$$$ is the minimal cost to encode the prefix of $$$s$$$ with length $$$p$$$, the answer is $$$dp[n]$$$. If we want to encode the prefix with length $$$p$$$ then the last symbol in our encoded string either equals $$$s_p$$$, or represents some substring $$$s_{[l,p]}$$$ so that it occurs in the prefix of length $$$l - 1$$$. Therefore one can see that$$$$$$dp[0] = 0,$$$$$$ $$$$$$dp[p] = \\min\\left(a + dp[p - 1], \\min\\left(b + dp[l - 1]\\,\\mid\\,s_{[l, p]}\\text{ is a substring of }s_{[1, l - 1]}\\right)\\right).$$$$$$One way to implement this is to calculate this $$$dp$$$ forward and use hashes, but it may require some efforts to avoid collisions and fit into the time limit. Another way is to find for each $$$p$$$ all appropriate $$$l$$$'s by calculating z-function on the reverse of $$$s_{[1, p]}$$$. The total complexity in this case is $$$O\\left(n^2\\right)$$$."
}{
    "name": "Find The Bone",
    "code": [
        "796",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1300,
    "statement": "Zane the wizard is going to perform a magic show shuffling the cups.There are n cups, numbered from 1 to n, placed along the x-axis on a table that has m holes on it. More precisely, cup i is on the table at the position x = i.The problematic bone is initially at the position x = 1. Zane will confuse the audience by swapping the cups k times, the i-th time of which involves the cups at the positions x = ui and x = vi. If the bone happens to be at the position where there is a hole at any time, it will fall into the hole onto the ground and will not be affected by future swapping operations.Do not forget that Zane is a wizard. When he swaps the cups, he does not move them ordinarily. Instead, he teleports the cups (along with the bone, if it is inside) to the intended positions. Therefore, for example, when he swaps the cup at x = 4 and the one at x = 6, they will not be at the position x = 5 at any moment during the operation.  Zane\u2019s puppy, Inzane, is in trouble. Zane is away on his vacation, and Inzane cannot find his beloved bone, as it would be too exhausting to try opening all the cups. Inzane knows that the Codeforces community has successfully helped Zane, so he wants to see if it could help him solve his problem too. Help Inzane determine the final position of the bone.",
    "editorial": "This is another implementation problem.Let\u2019s create an array a of length n (with initial values set to 0), and set ai = 1 only for the positions x = i where there is a hole.If there is a hole at x  =  1, obviously, the answer is 1, because the ball must fall onto the ground before any operation is applied. Otherwise, consider each swapping operation chronologically (from the first to the last).While doing so, we will also maintain a variable pos, the position where the ball is.Let the involving cup positions be u and v. There are three cases to consider:1) If pos is equal to u, set pos  =  v.2) If pos is equal to v, set pos  =  u.3) Otherwise, skip the operation.Make sure to stop considering any more operations if apos equals 1.After this procedure, pos will be the final answer.This solution runs in O(k)."
}{
    "name": "Mashtali and Hagh Trees",
    "code": [
        "1528",
        "E"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "trees"
    ],
    "difficulty": 2900,
    "statement": "Today is Mashtali's birthday! He received a Hagh tree from Haj Davood as his birthday present!A directed tree is called a Hagh tree iff:   The length of the longest directed path in it is exactly $$$n$$$.  Every vertex has at most three edges attached to it independent of their orientation.  Let's call vertices $$$u$$$ and $$$v$$$ friends if one of them has a directed path to the other. For every pair of vertices $$$u$$$ and $$$v$$$ that are not friends, there should exist a vertex $$$w$$$ that is friends with both $$$u$$$ and $$$v$$$ (a mutual friend). After opening his gift, Mashtali found out that the labels on the vertices were gone.Immediately, he asked himself: how many different unlabeled Hagh trees are there? That is, how many possible trees could he have received as his birthday present?At the first glance, the number of such trees seemed to be infinite since there was no limit on the number of vertices; but then he solved the problem and proved that there's a finite number of unlabeled Hagh trees!Amazed by this fact, he shared the task with you so that you could enjoy solving it as well. Since the answer can be rather large he asked you to find the number of different unlabeled Hagh trees modulo $$$998244353$$$.Here two trees are considered different, if they are not isomorphic: if there is no way to map nodes of one tree to the second tree, so that edges are mapped to edges preserving the orientation.Some examples for $$$n = 2$$$:   Directed trees $$$D$$$ and $$$E$$$ are Hagh. $$$C$$$ is not Hagh because it has a vertex with $$$4$$$ edges attached to it. $$$A$$$ and $$$B$$$ are not Hagh because their longest directed paths are not equal to $$$n$$$. Also in $$$B$$$ the leftmost and rightmost vertices are not friends neither do they have a mutual friend.",
    "editorial": "Let $$$dp_i$$$ be the answer for all trees such that there exists a root and all edges are directed in the same direction from root and the root has at most $$$2$$$ children. We transition:$$$dp_i = dp_{i\u22121}+dp_{i\u22121} \\cdot pdp_{i\u22122}+\\frac{dp_{i\u22121} \\cdot (dp_{i\u22121}+1)}{2}$$$ where $$$pdp_i = \\sum_{j = 0}^{i}{dp_j}$$$.Then let $$$dp2_i$$$ be the same as $$$dp_i$$$ except the root must have exactly $$$2$$$ children. So $$$dp2_i = dp_i\u2212dp_{i\u22121}$$$.The answer for these cases is:$$$2 \\cdot (dp_n+\\frac{ dp_{n\u22121} \\cdot pdp_{n\u22122} \\cdot (pdp_{n\u22122}+1)}{2}+\\frac{pdp_{n\u22122} \\cdot dp_{n\u22121} \\cdot (dp_{n\u22121}+1)}{2}+ \\frac{dp_{n\u22121} \\cdot (dp_{n\u22121}+1) \\cdot (dp_{n\u22121}+2)}{6})\u22121$$$.This is because $$$dp_n$$$ holds the answer for at most $$$2$$$ children and the other section accounts for the rest. We multiply by $$$2$$$ to account for both edges directions, and subtract $$$1$$$ because a single path is isomorphic.This obviously doesn't handle all cases, but all other cases can be found in the following form. Let $$$t_{up,k}$$$ be a tree where the root has $$$2$$$ children and the edges are directed up and the longest path is $$$k$$$, and let $$$t_{down,k}$$$ be a tree where the root has $$$2$$$ children and the edges are directed down and the longest path is $$$k$$$. Then all other cases are $$$t_{up,k}$$$ which exists on some path of length $$$l$$$ to and connects to $$$t_{down,n\u2212k\u2212l}$$$.We can count every other case as $$$\\sum_{i=0}^{n-1}{(dp_{i}-1) \\cdot dp2_{n\u22121\u2212i}}$$$This works because we pretend the path is always length $$$1$$$, then if we do $$$dp_i \\cdot dp2_{n\u22121\u2212i}$$$ we handle all cases except for when the $$$t_{up,k}$$$ is empty, and that only happens once."
}{
    "name": "Boboniu Chats with Du",
    "code": [
        "1394",
        "A"
    ],
    "tags": [
        "dp",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "difficulty": 1800,
    "statement": "Have you ever used the chat application QQ? Well, in a chat group of QQ, administrators can muzzle a user for days.In Boboniu's chat group, there's a person called Du Yi who likes to make fun of Boboniu every day.Du will chat in the group for $$$n$$$ days. On the $$$i$$$-th day:  If Du can speak, he'll make fun of Boboniu with fun factor $$$a_i$$$. But after that, he may be muzzled depending on Boboniu's mood.  Otherwise, Du won't do anything. Boboniu's mood is a constant $$$m$$$. On the $$$i$$$-th day:  If Du can speak and $$$a_i>m$$$, then Boboniu will be angry and muzzle him for $$$d$$$ days, which means that Du won't be able to speak on the $$$i+1, i+2, \\cdots, \\min(i+d,n)$$$-th days.  Otherwise, Boboniu won't do anything. The total fun factor is the sum of the fun factors on the days when Du can speak.Du asked you to find the maximum total fun factor among all possible permutations of $$$a$$$.",
    "editorial": "If $$$a_i>m$$$, we consider it as a big item with value $$$a_i$$$, else a small item with value $$$a_i$$$. We are asked to choose some items and maximize the total value. If an item is not chosen, it means we put it on a muzzled day.Enumerate the number of chosen big item, which is denoted by $$$x$$$. Thus they take $$$(x-1)(d+1)+1$$$ days. The remaining days are used to place small item on it. Choose items greedily. i. e. We sort items by value from largest to smallest, choose previous $$$x$$$ big items and previous $$$n-(x-1)(d+1)-1$$$ small items and update the answer.The total time complexity is $$$O(n\\log n)$$$."
}{
    "name": "String Searching",
    "code": [
        "1533",
        "D"
    ],
    "tags": [
        "*special",
        "hashing"
    ],
    "difficulty": "",
    "statement": "You are given an array $$$s$$$ consisting of $$$n$$$ different strings. Each string consists of $$$m$$$ lowercase Latin letters.You have to respond to $$$q$$$ queries. Each query contains a string $$$t$$$ of length $$$m+1$$$. Count the number of indices $$$i$$$, such that the string $$$t$$$ can be obtained from the string $$$s_i$$$, if it is allowed to insert one letter in an arbitrary position.",
    "editorial": "To answer a query, it is enough to iterate over a character we delete from the string given in the query, and then check whether the resulting string is in the given set of strings (which should be stored in some associative data structure, for example, in a Set). Note that if deleting different positions can lead to identical strings, you have to count these strings once (i. e., if the query is aaa, then the string aa should be counted $$$1$$$ time, not $$$3$$$); it can be done by storing all strings we can obtain by deleting one character in another Set, since it removes duplicate elements."
}{
    "name": "Identify the Operations",
    "code": [
        "1442",
        "B"
    ],
    "tags": [
        "combinatorics",
        "data structures",
        "dsu",
        "greedy",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "We start with a permutation $$$a_1, a_2, \\ldots, a_n$$$ and with an empty array $$$b$$$. We apply the following operation $$$k$$$ times.On the $$$i$$$-th iteration, we select an index $$$t_i$$$ ($$$1 \\le t_i \\le n-i+1$$$), remove $$$a_{t_i}$$$ from the array, and append one of the numbers $$$a_{t_i-1}$$$ or $$$a_{t_i+1}$$$ (if $$$t_i-1$$$ or $$$t_i+1$$$ are within the array bounds) to the right end of the array $$$b$$$. Then we move elements $$$a_{t_i+1}, \\ldots, a_n$$$ to the left in order to fill in the empty space.You are given the initial permutation $$$a_1, a_2, \\ldots, a_n$$$ and the resulting array $$$b_1, b_2, \\ldots, b_k$$$. All elements of an array $$$b$$$ are distinct. Calculate the number of possible sequences of indices $$$t_1, t_2, \\ldots, t_k$$$ modulo $$$998\\,244\\,353$$$.",
    "editorial": "Consider element with index $$$i$$$ that has value $$$b_1$$$ in the array $$$a$$$\u00a0\u2014 $$$a_i$$$. There are three options: Both $$$a_{i-1}$$$ and $$$a_{i+1}$$$ are present in the array $$$b$$$. Then both of them should stay in the array $$$a$$$ after the first operation \u00a0\u2014 we will write them down later on. However, $$$a_i$$$ can only be added to the array b while removing one of the neighbors. We have reached a contradiction, so the answer is 0. One of the numbers $$$a_{i-1}$$$, $$$a_{i+1}$$$ is present in the array $$$b$$$, another is not. Then we have to remove the one that is not present in $$$b$$$ and continue solving the problem. Neither $$$a_{i-1}$$$ nor $$$a_{i+1}$$$ is present in $$$b$$$. $$$a_i$$$ is not present in any other place in $$$b$$$ (because all number in $$$b$$$ are unique), and $$$a_{i-1}$$$, $$$a_i$$$ and $$$a_{i+1}$$$ are indistinguishable by the following operations. Let us then remove any one of them (say, left) and \"remove\" all remaining tags. In this case, we can multiply answer by 2 and continue solving the problem.Now we know that the answer is either 0 or a power of 2. To calculate the answer we only need to implement the above-mentioned algorithm. Let us store a set of available numbers in the array $$$a$$$, and a set of numbers that are yet to appear in the array $$$b$$$ to implement necessary checks. The solution will have $$$\\mathcal{O}(n \\log n)$$$ complexity (that can be optimized to $$$\\mathcal{O}(n)$$$ with help of arrays and double-linked lists, but it was not necessary for this particular problem)."
}{
    "name": "Upgrading Cities",
    "code": [
        "1062",
        "F"
    ],
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "difficulty": 2900,
    "statement": "There are $$$n$$$ cities in the kingdom $$$X$$$, numbered from $$$1$$$ through $$$n$$$. People travel between cities by some one-way roads. As a passenger, JATC finds it weird that from any city $$$u$$$, he can't start a trip in it and then return back to it using the roads of the kingdom. That is, the kingdom can be viewed as an acyclic graph.Being annoyed by the traveling system, JATC decides to meet the king and ask him to do something. In response, the king says that he will upgrade some cities to make it easier to travel. Because of the budget, the king will only upgrade those cities that are important or semi-important. A city $$$u$$$ is called important if for every city $$$v \\neq u$$$, there is either a path from $$$u$$$ to $$$v$$$ or a path from $$$v$$$ to $$$u$$$. A city $$$u$$$ is called semi-important if it is not important and we can destroy exactly one city $$$v \\neq u$$$ so that $$$u$$$ becomes important.The king will start to act as soon as he finds out all those cities. Please help him to speed up the process.",
    "editorial": "The main idea of this problem is to calculate $$$in_u$$$ and $$$out_u$$$ for every node $$$u$$$, where $$$in_u$$$ denotes the number of nodes that can reach $$$u$$$ and $$$out_u$$$ denotes the number of nodes that can be reached by $$$u$$$. If $$$in_u+out_u=N+1$$$ then $$$u$$$ is important or $$$N$$$ if $$$u$$$ is semi-important.However, it may not possible to calculate $$$in_u$$$ and $$$out_u$$$ for every node $$$u$$$ in given time (please tell me if it's possible) so we have to do some tricks.First of all, we need to find an arbitrary longest path ($$$P$$$)$$$=s_1 \\rightarrow s_2 \\rightarrow... \\rightarrow s_k$$$ on the graph ($$$k$$$ is the number of nodes on this path). If a node is important then it must lie on this path ($$$1$$$). Proof: Assume there is a node $$$u$$$ that is important and doesn't lie on ($$$P$$$). Let $$$s_i$$$ be the rightmost node on ($$$P$$$) and can reach $$$u$$$. It's true that $$$i < k$$$, because if $$$i=k$$$ then we have a longer path than the one we found so it's not possible. By definition of $$$i$$$, $$$s_{i+1}$$$ cannot reach $$$u$$$. Therefore $$$u$$$ must be able to reach $$$s_{i+1}$$$ (because $$$u$$$ is important). This leads to a conflict: We have a path that is longer than the one we found: $$$s_1 \\rightarrow s_2 \\rightarrow \\dots \\rightarrow s_i \\rightarrow u \\rightarrow s_{i+1} \\rightarrow \\dots \\rightarrow s_k$$$. Therefore statement ($$$1$$$) is proved. It takes $$$O(N+M)$$$ to find ($$$P$$$).Let's deal with important nodes first. Because all important nodes lie on the path ($$$P$$$) so it makes no sense to calculate $$$in$$$ and $$$out$$$ for those nodes that don't belong to ($$$P$$$). We can calculate $$$out$$$ by iterate through $$$P$$$ from $$$s_k$$$ to $$$s_1$$$. At each node $$$s_i$$$, we just need to use bfs or dfs to search for the nodes that can be reached by $$$s_i$$$. Because we visit each node $$$1$$$ time then it takes $$$O(N+M)$$$ to do this. To calculate $$$in$$$ we just need to reverse the direction of the edges and do similarly.Now we need to find the semi nodes. There are two types of semi nodes: those belong to ($$$P$$$) and those don't. For the ones belong to ($$$P$$$), we just need to check if $$$in_u+out_u=N$$$. For the ones don't belong to ($$$P$$$), suppose we are dealing with node $$$u$$$. Let $$$s_i$$$ be the rightmost node on ($$$P$$$) that can reach $$$u$$$ and $$$s_j$$$ be the leftmost node on ($$$P$$$) that can be reached by $$$u$$$. It's obvious that $$$i<j-1$$$. Let $$$L_u=i$$$ and $$$R_u=j$$$, let $$$leng$$$ equal $$$j-i-1$$$. If $$$leng>1$$$ then u is not a semi node (because we have to delete all nodes between i and j not inclusive), or else we must erase $$$s_{i+1}$$$ to make $$$u$$$ a semi important node. We can see that the path from $$$s_i$$$ to $$$u$$$ contains only $$$s_i$$$ and $$$u$$$, and the path from $$$u$$$ to $$$s_j$$$ contains only $$$u$$$ and $$$s_j$$$, because otherwise there exists a longer path than ($$$P$$$), which is false. So we consider $$$u$$$ as a candidate. Moreover, if exists a node $$$v$$$ that is a candidate and $$$L_u=L_v$$$ (also leads to $$$R_u=R_v$$$) then both $$$u$$$ and $$$v$$$ are not semi important nodes. Proof: After we delete $$$s_{i+1}$$$, for $$$u$$$, exists a path that is as long as ($$$P$$$) and does not go through $$$u$$$ (it goes through $$$v$$$) so $$$u$$$ is not a important node, based on statement ($$$1$$$). Same for $$$v$$$. Briefly, at this point we have the path ($$$P$$$) and a list of nodes $$$u_1, u_2, ..., u_t$$$. For every $$$i$$$, $$$u_i$$$ is a candidate and $$$L_{ui}+1=R_{ui}-1$$$. For every $$$i$$$, $$$j$$$, $$$L_{ui}!=L_{uj}$$$.So now we are going to calculate $$$in$$$ and $$$out$$$ for those candidate nodes. We can do this similarly as when we find the important nodes. To calculate $$$out$$$, iterate through $$$s_k$$$ to $$$s_1$$$. At each node $$$s_i$$$, bfs or dfs to search for nodes that can be reached by $$$s_i$$$. Additionally, if there is a candidate node $$$v$$$ that $$$R_v=i-1$$$, we start a search from $$$v$$$ to find those nodes that can be reached by $$$v$$$, we have $$$out_v=out_{si}+$$$ the number of nodes we just found. After that we pop those nodes from the stack (or whatever), mark them as not visited and continue to iterate to $$$s_{i-1}$$$. To calculate $$$in$$$ we reverse the directs of the edges and do the same. Because each node is visited $$$1$$$ time by nodes on ($$$P$$$) and at most $$$2$$$ times by candidate nodes so it takes $$$O(3(N+M))$$$.The total complexity is $$$O(N+M)$$$."
}{
    "name": "Balls Game",
    "code": [
        "430",
        "B"
    ],
    "tags": [
        "brute force",
        "two pointers"
    ],
    "difficulty": 1400,
    "statement": "Iahub is training for the IOI. What is a better way to train than playing a Zuma-like game? There are n balls put in a row. Each ball is colored in one of k colors. Initially the row doesn't contain three or more contiguous balls with the same color. Iahub has a single ball of color x. He can insert his ball at any position in the row (probably, between two other balls). If at any moment there are three or more contiguous balls of the same color in the row, they are destroyed immediately. This rule is applied multiple times, until there are no more sets of 3 or more contiguous balls of the same color. For example, if Iahub has the row of balls [black, black, white, white, black, black] and a white ball, he can insert the ball between two white balls. Thus three white balls are destroyed, and then four black balls become contiguous, so all four balls are destroyed. The row will not contain any ball in the end, so Iahub can destroy all 6 balls.Iahub wants to destroy as many balls as possible. You are given the description of the row of balls, and the color of Iahub's ball. Help Iahub train for the IOI by telling him the maximum number of balls from the row he can destroy.",
    "editorial": ""
}{
    "name": "Road Widening",
    "code": [
        "883",
        "K"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "Mayor of city S just hates trees and lawns. They take so much space and there could be a road on the place they occupy!The Mayor thinks that one of the main city streets could be considerably widened on account of lawn nobody needs anyway. Moreover, that might help reduce the car jams which happen from time to time on the street.The street is split into n equal length parts from left to right, the i-th part is characterized by two integers: width of road si and width of lawn gi.  For each of n parts the Mayor should decide the size of lawn to demolish. For the i-th part he can reduce lawn width by integer xi (0 \u2264 xi \u2264 gi). After it new road width of the i-th part will be equal to s'i = si + xi and new lawn width will be equal to g'i = gi - xi.On the one hand, the Mayor wants to demolish as much lawn as possible (and replace it with road). On the other hand, he does not want to create a rapid widening or narrowing of the road, which would lead to car accidents. To avoid that, the Mayor decided that width of the road for consecutive parts should differ by at most 1, i.e. for each i (1 \u2264 i < n) the inequation |s'i + 1 - s'i| \u2264 1 should hold. Initially this condition might not be true.You need to find the the total width of lawns the Mayor will destroy according to his plan.",
    "editorial": ""
}{
    "name": "Distinguish zero state and W state",
    "code": [
        "1002",
        "B1"
    ],
    "tags": [],
    "difficulty": 1300,
    "statement": "You are given N qubits (2 \u2264 N \u2264 8) which are guaranteed to be in one of the two states:   state, or  state. Your task is to perform necessary operations and measurements to figure out which state it was and to return 0 if it was  state or 1 if it was W state. The state of the qubits after the operations does not matter.You have to implement an operation which takes an array of N qubits as an input and returns an integer. Your code should have the following signature:namespace Solution {    open Microsoft.Quantum.Primitive;    open Microsoft.Quantum.Canon;    operation Solve (qs : Qubit[]) : Int    {        body        {            // your code here        }    }}",
    "editorial": ""
}{
    "name": "The Beaver's Problem - 3",
    "code": [
        "207",
        "D1"
    ],
    "tags": [],
    "difficulty": 1800,
    "statement": "The Smart Beaver from ABBYY came up with another splendid problem for the ABBYY Cup participants! This time the Beaver invites the contest participants to check out a problem on sorting documents by their subjects. Let's describe the problem:You've got some training set of documents. For each document you know its subject. The subject in this problem is an integer from 1 to 3. Each of these numbers has a physical meaning. For instance, all documents with subject 3 are about trade.You can download the training set of documents at the following link: http://download4.abbyy.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train.zip. The archive contains three directories with names \"1\", \"2\", \"3\". Directory named \"1\" contains documents on the 1-st subject, directory \"2\" contains documents on the 2-nd subject, and directory \"3\" contains documents on the 3-rd subject. Each document corresponds to exactly one file from some directory.All documents have the following format: the first line contains the document identifier, the second line contains the name of the document, all subsequent lines contain the text of the document. The document identifier is used to make installing the problem more convenient and has no useful information for the participants.You need to write a program that should indicate the subject for a given document. It is guaranteed that all documents given as input to your program correspond to one of the three subjects of the training set.",
    "editorial": ""
}{
    "name": "Subtract Operation",
    "code": [
        "1656",
        "B"
    ],
    "tags": [
        "data structures",
        "greedy",
        "math",
        "two pointers"
    ],
    "difficulty": 1100,
    "statement": "You are given a list of $$$n$$$ integers. You can perform the following operation: you choose an element $$$x$$$ from the list, erase $$$x$$$ from the list, and subtract the value of $$$x$$$ from all the remaining elements. Thus, in one operation, the length of the list is decreased by exactly $$$1$$$.Given an integer $$$k$$$ ($$$k>0$$$), find if there is some sequence of $$$n-1$$$ operations such that, after applying the operations, the only remaining element of the list is equal to $$$k$$$.",
    "editorial": "Note that, after deleting element $$$a_j$$$, all numbers in the set are of the form $$$a_i - a_j$$$, since the previous substractions are cancelled. Therefore, the final element will be the difference between the last element and the previous element which was erased. So we just need to check if $$$k$$$ is the difference of two elements in the set, which can be done by sorting and using the double pointer technique in $$$O(n \\log n)$$$ time."
}{
    "name": "Right Triangles",
    "code": [
        "52",
        "B"
    ],
    "tags": [
        "combinatorics"
    ],
    "difficulty": 1600,
    "statement": "You are given a n \u00d7 m field consisting only of periods ('.') and asterisks ('*'). Your task is to count all right triangles with two sides parallel to the square sides, whose vertices are in the centers of '*'-cells. A right triangle is a triangle in which one angle is a right angle (that is, a 90 degree angle).",
    "editorial": ""
}{
    "name": "Transmitting Levels",
    "code": [
        "526",
        "E"
    ],
    "tags": [
        "dp",
        "implementation"
    ],
    "difficulty": 2400,
    "statement": "Optimizing the amount of data transmitted via a network is an important and interesting part of developing any network application.  In one secret game developed deep in the ZeptoLab company, the game universe consists of n levels, located in a circle. You can get from level i to levels i - 1 and i + 1, also you can get from level 1 to level n and vice versa. The map of the i-th level description size is ai bytes.In order to reduce the transmitted traffic, the game gets levels as follows. All the levels on the server are divided into m groups and each time a player finds himself on one of the levels of a certain group for the first time, the server sends all levels of the group to the game client as a single packet. Thus, when a player travels inside the levels of a single group, the application doesn't need any new information. Due to the technical limitations the packet can contain an arbitrary number of levels but their total size mustn't exceed b bytes, where b is some positive integer constant.Usual situation is that players finish levels one by one, that's why a decision was made to split n levels into m groups so that each group was a continuous segment containing multiple neighboring levels (also, the group can have two adjacent levels, n and 1). Specifically, if the descriptions of all levels have the total weight of at most b bytes, then they can all be united into one group to be sent in a single packet.Determine, what minimum number of groups do you need to make in order to organize the levels of the game observing the conditions above?As developing a game is a long process and technology never stagnates, it is yet impossible to predict exactly what value will take constant value b limiting the packet size when the game is out. That's why the developers ask you to find the answer for multiple values of b.",
    "editorial": ""
}{
    "name": "Segments",
    "code": [
        "926",
        "J"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 2100,
    "statement": "There is a straight line colored in white. n black segments are added on it one by one.After each segment is added, determine the number of connected components of black segments (i.\u00a0e. the number of black segments in the union of the black segments). In particular, if one segment ends in a point x, and another segment starts in the point x, these two segments belong to the same connected component.",
    "editorial": "\u0417\u0430\u0432\u0435\u0434\u0435\u043c set \u043f\u0430\u0440 comp, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u044b\u043c \u043b\u0435\u0432\u044b\u043c \u043a\u043e\u043d\u0446\u043e\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u043d\u0435\u0435 \u0432\u0445\u043e\u0434\u0438\u0442, \u0438 \u0441\u0430\u043c\u044b\u043c \u043f\u0440\u0430\u0432\u044b\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u043d\u0435\u0435 \u0432\u0445\u043e\u0434\u0438\u0442.\u0422\u0435\u043f\u0435\u0440\u044c \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442\u0440\u0435\u0437\u043a\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u041f\u0443\u0441\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u043e\u0439 (l, r). \u0422\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 set \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0439\u0434\u0435\u043c \u0432 comp \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e lower_bound(make_pair(l,  - 1)) \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 it, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0442\u044c\u0441\u044f \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u043c. \u0415\u0441\u043b\u0438 it \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043d\u0430\u0447\u0430\u043b\u0443 comp \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0435\u0433\u043e \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0433\u043b\u0430 \u0431\u044b\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u043b\u0435\u0432\u0435\u0435 l, \u043d\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u043c. \u0422\u0435\u043f\u0435\u0440\u044c \u0431\u0443\u0434\u0435\u043c \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c it \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043e\u043d \u043d\u0435 \u0441\u0442\u0430\u043b \u0440\u0430\u0432\u0435\u043d comp.end() \u0438\u043b\u0438 \u043f\u043e\u043a\u0430 \u043c\u044b \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u0432\u0435 \u043d\u0435\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b. \u0411\u0443\u0434\u0435\u043c \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 inter. \u041f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u0447\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u043e comp \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 comp \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 inter (\u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b \u0438\u0445 \u0432\u0441\u0435 \u0432 \u043e\u0434\u043d\u0443), \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 comp \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443, \u0447\u044c\u044f \u043b\u0435\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u2014 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0437 \u0432\u0441\u0435\u0445 \u043b\u0435\u0432\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 inter \u0438 \u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 l, \u0430 \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u0437 \u0432\u0441\u0435\u0445 \u043f\u0440\u0430\u0432\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440 inter \u0438 \u043f\u0440\u0430\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 r.\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 comp, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0438 \u0435\u0441\u0442\u044c \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438\u0437 \u0447\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432. "
}{
    "name": "Sum",
    "code": [
        "257",
        "D"
    ],
    "tags": [
        "greedy",
        "math"
    ],
    "difficulty": 1900,
    "statement": "Vasya has found a piece of paper with an array written on it. The array consists of n integers a1, a2, ..., an. Vasya noticed that the following condition holds for the array ai \u2264 ai + 1 \u2264 2\u00b7ai for any positive integer i (i < n).Vasya wants to add either a \"+\" or a \"-\" before each number of array. Thus, Vasya will get an expression consisting of n summands. The value of the resulting expression is the sum of all its elements. The task is to add signs \"+\" and \"-\" before each number so that the value of expression s meets the limits 0 \u2264 s \u2264 a1. Print a sequence of signs \"+\" and \"-\", satisfying the given limits. It is guaranteed that the solution for the problem exists.",
    "editorial": ""
}{
    "name": "Yet Another String Game",
    "code": [
        "1480",
        "A"
    ],
    "tags": [
        "games",
        "greedy",
        "strings"
    ],
    "difficulty": 800,
    "statement": "Homer has two friends Alice and Bob. Both of them are string fans. One day, Alice and Bob decide to play a game on a string $$$s = s_1 s_2 \\dots s_n$$$ of length $$$n$$$ consisting of lowercase English letters. They move in turns alternatively and Alice makes the first move.In a move, a player must choose an index $$$i$$$ ($$$1 \\leq i \\leq n$$$) that has not been chosen before, and change $$$s_i$$$ to any other lowercase English letter $$$c$$$ that $$$c \\neq s_i$$$.When all indices have been chosen, the game ends. The goal of Alice is to make the final string lexicographically as small as possible, while the goal of Bob is to make the final string lexicographically as large as possible. Both of them are game experts, so they always play games optimally. Homer is not a game expert, so he wonders what the final string will be.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. ",
    "editorial": "After some observations, we can see that the players should always choose the most significant letter to change, because it coordinates the lexicographical order of the final string most. Therefore, Alice will choose all odd indices while Bob will choose all even indices, and then Alice will change all letters she choose to the smallest possible letters while Bob will change all letters he choose to the largest possible letters. That is, Alice will change letters to \"a\" if the original letter is not \"a\" and to \"b\" otherwise; Bob will change letters to \"z\" if the original letter is not \"z\" and to \"y\" otherwise.The time complexity is $$$O(n)$$$."
}{
    "name": "Timofey and our friends animals",
    "code": [
        "763",
        "E"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "dsu"
    ],
    "difficulty": 2900,
    "statement": "After his birthday party, Timofey went to his favorite tree alley in a park. He wants to feed there his favorite birds\u00a0\u2014 crows.It's widely known that each tree is occupied by a single crow family. The trees in the alley form a row and are numbered from 1 to n. Some families are friends to each other. For some reasons, two families can be friends only if they live not too far from each other, more precisely, there is no more than k - 1 trees between any pair of friend families. Formally, the family on the u-th tree and the family on the v-th tree can be friends only if |u - v| \u2264 k holds.One of the friendship features is that if some family learns that Timofey is feeding crows somewhere, it notifies about this all friend families. Thus, after Timofey starts to feed crows under some tree, all the families that are friends to the family living on this tree, as well as their friends and so on, fly to the feeding place. Of course, the family living on the tree also comes to the feeding place.Today Timofey came to the alley and noticed that all the families that live on trees with numbers strictly less than l or strictly greater than r have flown away. Thus, it is not possible to pass the information about feeding through them. Moreover, there is no need to feed them. Help Timofey to learn what is the minimum number of trees under which he has to feed crows so that all the families that have remained will get the information about feeding. You are given several situations, described by integers l and r, you need to calculate the answer for all of them.",
    "editorial": "Let's build a segment tree on crow families. Let's save DSU in each vertex, having information about number of components of connectivity on it. In one vertex will be DSU with size n. In two vertices will be DSU with size n / 2. In four vertices will be DSU with size n / 4. It's easy to show that we will store only O(nlogn) values. Let's understand how we can unite segments. Knowing answer (number of components) for [a; b) and [b; c) we can obtain answer for [a; c) in the following way: We can sum answers for for [a; b) and [b; c) and substract number of components, which united during the \"gluing\". If components become united, there is edge between vertex in one and vertex in another. We have constraint on edge legth: vertex u and vertex v can be connected only if abs(u - v) \u2264 k Then we can easily unite two segments of the segment tree in O(k2) time: we just unite some of the k components of families represented in the end of each segment when they are connected by edge. Segment tree can split query in  already calculated segments. So we can answer the query in  time. Precalc will take nearly .Author's solution: http://pastebin.com/1CwUVyMEBonus: Solve the problem in  time for the precalculation and  time for the query."
}{
    "name": "Chamber of Secrets",
    "code": [
        "173",
        "B"
    ],
    "tags": [
        "dfs and similar",
        "shortest paths"
    ],
    "difficulty": 1800,
    "statement": "\"The Chamber of Secrets has been opened again\" \u2014 this news has spread all around Hogwarts and some of the students have been petrified due to seeing the basilisk. Dumbledore got fired and now Harry is trying to enter the Chamber of Secrets. These aren't good news for Lord Voldemort. The problem is, he doesn't want anybody to be able to enter the chamber. The Dark Lord is going to be busy sucking life out of Ginny.The Chamber of Secrets is an n \u00d7 m rectangular grid in which some of the cells are columns. A light ray (and a basilisk's gaze) passes through the columns without changing its direction. But with some spell we can make a column magic to reflect the light ray (or the gaze) in all four directions when it receives the ray. This is shown in the figure below.   The left light ray passes through a regular column, and the right ray \u2014 through the magic column.  The basilisk is located at the right side of the lower right cell of the grid and is looking to the left (in the direction of the lower left cell). According to the legend, anyone who meets a basilisk's gaze directly dies immediately. But if someone meets a basilisk's gaze through a column, this person will get petrified. We know that the door to the Chamber is located on the left side of the upper left corner of the grid and anyone who wants to enter will look in the direction of its movement (in the direction of the upper right cell) from that position.   This figure illustrates the first sample test.  Given the dimensions of the chamber and the location of regular columns, Lord Voldemort has asked you to find the minimum number of columns that we need to make magic so that anyone who wants to enter the chamber would be petrified or just declare that it's impossible to secure the chamber.",
    "editorial": ""
}{
    "name": "Vasya and Types",
    "code": [
        "87",
        "B"
    ],
    "tags": [
        "implementation",
        "strings"
    ],
    "difficulty": 1800,
    "statement": "Programmer Vasya is studying a new programming language &K*. The &K* language resembles the languages of the C family in its syntax. However, it is more powerful, which is why the rules of the actual C-like languages are unapplicable to it. To fully understand the statement, please read the language's description below carefully and follow it and not the similar rules in real programming languages.There is a very powerful system of pointers on &K* \u2014 you can add an asterisk to the right of the existing type X \u2014 that will result in new type X * . That is called pointer-definition operation. Also, there is the operation that does the opposite \u2014 to any type of X, which is a pointer, you can add an ampersand \u2014 that will result in a type &X, to which refers X. That is called a dereference operation.The &K* language has only two basic data types \u2014 void and errtype. Also, the language has operators typedef and typeof. The operator \"typedef A B\" defines a new data type B, which is equivalent to A. A can have asterisks and ampersands, and B cannot have them. For example, the operator typedef void** ptptvoid will create a new type ptptvoid, that can be used as void**. The operator \"typeof A\" returns type of A, brought to void, that is, returns the type void**...*, equivalent to it with the necessary number of asterisks (the number can possibly be zero). That is, having defined the ptptvoid type, as shown above, the typeof ptptvoid operator will return void**.An attempt of dereferencing of the void type will lead to an error: to a special data type errtype. For errtype the following equation holds true: errtype* = &errtype = errtype. An attempt to use the data type that hasn't been defined before that will also lead to the errtype.Using typedef, we can define one type several times. Of all the definitions only the last one is valid. However, all the types that have been defined earlier using this type do not change.Let us also note that the dereference operation has the lower priority that the pointer operation, in other words &T *  is always equal to T.Note, that the operators are executed consecutively one by one. If we have two operators \"typedef &void a\" and \"typedef a* b\", then at first a becomes errtype, and after that b becomes errtype* = errtype, but not &void* = void (see sample 2).Vasya does not yet fully understand this powerful technology, that's why he asked you to help him. Write a program that analyzes these operators. ",
    "editorial": ""
}{
    "name": "Fixed Prefix Permutations",
    "code": [
        "1792",
        "D"
    ],
    "tags": [
        "binary search",
        "bitmasks",
        "data structures",
        "hashing",
        "math",
        "sortings"
    ],
    "difficulty": 1700,
    "statement": "You are given $$$n$$$ permutations $$$a_1, a_2, \\dots, a_n$$$, each of length $$$m$$$. Recall that a permutation of length $$$m$$$ is a sequence of $$$m$$$ distinct integers from $$$1$$$ to $$$m$$$.Let the beauty of a permutation $$$p_1, p_2, \\dots, p_m$$$ be the largest $$$k$$$ such that $$$p_1 = 1, p_2 = 2, \\dots, p_k = k$$$. If $$$p_1 \\neq 1$$$, then the beauty is $$$0$$$.The product of two permutations $$$p \\cdot q$$$ is a permutation $$$r$$$ such that $$$r_j = q_{p_j}$$$.For each $$$i$$$ from $$$1$$$ to $$$n$$$, print the largest beauty of a permutation $$$a_i \\cdot a_j$$$ over all $$$j$$$ from $$$1$$$ to $$$n$$$ (possibly, $$$i = j$$$).",
    "editorial": "Let's try to solve for one of the given permutations. Let it be some $$$p$$$. How to make the answer for it at least $$$1$$$? Well, we have to find another permutation $$$q$$$ such that $$$p \\cdot q = (1, r_2, r_3, \\dots, r_m)$$$. How about at least $$$k$$$? Well, the same: $$$p \\cdot q = (1 2 \\dots, k, r_{k+1}, \\dots, r_m)$$$.Push $$$q$$$ to the right side of the equation. $$$p = (1 2 \\dots, k, r_{k+1}, \\dots, r_m) \\cdot q^{-1}$$$. Now think. What does it actually mean for some permutation to be multiplied by $$$(1, 2, \\dots, k)$$$? It stays the same. So the first $$$k$$$ elements of $$$p$$$ will be equal to the first $$$k$$$ elements of $$$q^{-1}$$$.Thus, you have to find a permumtation such that its inverse has the longest common prefix with $$$p$$$. This can be done in multiple ways. For example, you can store all inverses in a trie and traverse it with $$$p$$$ until you reach a dead end. Or simply push all prefixes of each inverse into a set and iterate over $$$k$$$. Alternatively, you can just sort inverses and do lower_bound for $$$p$$$ in this list\u00a0\u2014 the permutation with longest common prefix will be either the result or the one before it.Overall complexity: $$$O(nm)/O(nm \\log n)/O(nm^2 \\log n)$$$ per testcase."
}{
    "name": "Into Blocks (hard version)",
    "code": [
        "1209",
        "G2"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 3200,
    "statement": "This is a harder version of the problem. In this version $$$q \\le 200\\,000$$$.A sequence of integers is called nice if its elements are arranged in blocks like in $$$[3, 3, 3, 4, 1, 1]$$$. Formally, if two elements are equal, everything in between must also be equal.Let's define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value $$$x$$$ to value $$$y$$$, you must also change all other elements of value $$$x$$$ into $$$y$$$ as well. For example, for $$$[3, 3, 1, 3, 2, 1, 2]$$$ it isn't allowed to change first $$$1$$$ to $$$3$$$ and second $$$1$$$ to $$$2$$$. You need to leave $$$1$$$'s untouched or change them to the same value.You are given a sequence of integers $$$a_1, a_2, \\ldots, a_n$$$ and $$$q$$$ updates.Each update is of form \"$$$i$$$ $$$x$$$\"\u00a0\u2014 change $$$a_i$$$ to $$$x$$$. Updates are not independent (the change stays for the future).Print the difficulty of the initial sequence and of the sequence after every update.",
    "editorial": "To adjust the solution for many queries we need to create some sophisticated data structure.E.g. we all know that mentioned above \"+= 1 on a segment\" is easily done with a segtree. If we maintain for every value $$$a_i$$$ the corresponding set of occurrences, it's easy to update mentioned above \"number of occurrences in the first position\".So what we need to do now? We need to dynamically recalculate the sum of minimums (and the set segments to calculate minimum can change quite much due to updates).You probably also now that we can design a segtree which supports range increments and query (minimum, number of minimums) on the segment. In a similar way we can build a structure which returns (minimum, number of minimums, the sum of largest stored counts between minimums). Just maintain a few values in each node and do lazy propagation.Complexity $$$\\mathcal{O}(q \\log n)$$$."
}{
    "name": "Disjoint Triangles",
    "code": [
        "1025",
        "F"
    ],
    "tags": [
        "geometry"
    ],
    "difficulty": 2700,
    "statement": "A point belongs to a triangle if it lies inside the triangle or on one of its sides. Two triangles are disjoint if there is no point on the plane that belongs to both triangles.You are given $$$n$$$ points on the plane. No two points coincide and no three points are collinear.Find the number of different ways to choose two disjoint triangles with vertices in the given points. Two ways which differ only in order of triangles or in order of vertices inside triangles are considered equal.",
    "editorial": "The most challenging part of the problem is to think of the way how to count each pair of triangles exactly once.It turns out, that this can be done in a nice and geometrical way.Each pair of triangles has exactly two inner tangents between them. Moreover, exactly one of them (if we direct tangent from point of the first polygon to the point of the second polygon) leaves the first rectangle on the right side and the other tangent leaves it on the left side.So let's brute-force the inner tangent. If we continue the tangent to draw the line and count the number of points on the left and on the right of it, say $$$k_1$$$ and $$$k_2$$$ respectively, then we simply need to add $$$\\frac{k_1 (k_1 - 1)}{2} \\frac{k_2 (k_2 - 1)}{2}$$$ to our answer, since if we select arbitrary pair of vertices on each halfplanes, together with tangent points we will form a pair of triangles with such a tangent.The question is how to count $$$k_1$$$ and $$$k_2$$$ for each tangent efficiently. If the points would be sorted by direction, perpendicular to the tangent, we could have answered this query with binary search (since points of one halfplane form a prefix of the sorted array and the other\u00a0\u2014 suffix).However, if we wrote down all the interesting directions, sort them by angle, and make a scanline on it, we could maintain the points in sorted order.Basically, points $$$a_i$$$ and $$$a_j$$$ change their order in the sorted array at the direction $$$rotate_{90}(a_i - a_j)$$$, and, since there are no three points on one line, these points are neighbours in the sorted array at the moment of the swap.The complexity is $$$\\mathcal{O}(n^2 \\log(n))$$$ since we need to sort all $$$n^2$$$ directions and for each direction make a binary search on the sorted array."
}{
    "name": "Ray in the tube",
    "code": [
        "1041",
        "F"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "math"
    ],
    "difficulty": 2500,
    "statement": "You are given a tube which is reflective inside represented as two non-coinciding, but parallel to $$$Ox$$$ lines. Each line has some special integer points\u00a0\u2014 positions of sensors on sides of the tube.You are going to emit a laser ray in the tube. To do so, you have to choose two integer points $$$A$$$ and $$$B$$$ on the first and the second line respectively (coordinates can be negative): the point $$$A$$$ is responsible for the position of the laser, and the point $$$B$$$\u00a0\u2014 for the direction of the laser ray. The laser ray is a ray starting at $$$A$$$ and directed at $$$B$$$ which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.  Examples of laser rays. Note that image contains two examples. The $$$3$$$ sensors (denoted by black bold points on the tube sides) will register the blue ray but only $$$2$$$ will register the red. Calculate the maximum number of sensors which can register your ray if you choose points $$$A$$$ and $$$B$$$ on the first and the second lines respectively.",
    "editorial": "At first, $$$y$$$ coordinates don't matter. Let $$$dx$$$ be signed difference between $$$x$$$ coordinates of $$$B$$$ and $$$A$$$, then on the first line all points with coordinates $$$x_A + dx \\cdot (2k)$$$ will be chosen, and on the second line all points with coordinates $$$x_A + dx \\cdot (2k + 1)$$$ will be chosen.Let's prove that it is always optimal to take $$$dx = 2^l$$$ where $$$l \\ge 0$$$. Let $$$dx$$$ is not a power of two, then $$$dx = m \\cdot 2^l$$$, where $$$m$$$ is odd. Note that $$$dx / m$$$ hits all points which is hitted by $$$dx$$$ that why answer will not decrease. So, we need to check only $$$dx = 2^l$$$, number of such $$$dx$$$ is equal to $$$O(\\log(10^9))$$$.For the fixed $$$dx$$$ note that ray hits both points on the same line iff $$$x_1 \\equiv x_2 \\mod{(2 \\cdot dx)}$$$. Analogically, the ray hits both points on the different lines iff $$$x_1 + dx \\equiv x_2 \\mod{(2 \\cdot dx)}$$$.That's why we can split all point on the equivalent classes modulo $$$2 \\cdot dx$$$ and take the size of the biggest class. We can do it by sort and two pointers or by $$$map$$$.Result complexity is $$$O(n \\log{(10^9)} \\log n)$$$ time and $$$O(n)$$$ memory."
}{
    "name": "\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430",
    "code": [
        "1275",
        "E1"
    ],
    "tags": [
        "*special"
    ],
    "difficulty": "",
    "statement": "\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430 \u0434\u0435\u0441\u044f\u0442\u043a\u0430\u0445 \u0442\u044b\u0441\u044f\u0447 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0434\u0438\u0441\u043a, \u043d\u0430 \u0434\u0438\u0441\u043a \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b CRC32 (Wiki, IEEE 802-3). \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u044d\u0442\u043e\u043c\u0443, \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043d\u043e\u0432\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e. \u0420\u0430\u0437\u0443\u043c\u0435\u0435\u0442\u0441\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u041d\u043e \u043a\u0430\u043a-\u0442\u043e \u0440\u0430\u0437 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0431\u0430\u0439\u0442 \u043d\u0430 \u043d\u043e\u0432\u043e\u0435\u00a0\u2014 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 $$$a_i, a_{i+1}, a_{i+2}, a_{i+3}$$$ \u043d\u0430 $$$x_0, x_1, x_2, x_3$$$. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b CRC32 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u0435\u0436\u043d\u0438\u043c. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0435\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043a\u0440\u043e\u043c\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0431\u0430\u0439\u0442 \u043d\u0430 \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0431\u044b\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0431\u0430\u0439\u0442\u0430 $$$a_{j}, a_{j+1}, a_{j+2}, a_{j+3}$$$, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b CRC32 \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f, \u0438\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\u00a0\u2014 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f, \u043f\u0435\u0440\u0435\u0434 \u0441\u0430\u043c\u0438\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f $$$q$$$ \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0441 $$$n=16, q=8$$$, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435. \u0412\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u0430\u0445 \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u0435\u0433\u043e \u0432 \u0437\u0430\u0434\u0430\u0447\u0443 E3, \u0433\u0434\u0435 \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0430 \u0442\u0435\u0441\u0442\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f.",
    "editorial": "\u0412 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u043b\u044e\u0431\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c $$$2^{32}$$$ \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0443\u0442\u0438\u043b\u0438\u0442\u0443 crc32 (\u0438\u043b\u0438 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0433\u0434\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0435\u0451 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e) \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0435\u043a-\u0441\u0443\u043c\u043c\u0430."
}{
    "name": "Sonya and Bitwise OR",
    "code": [
        "1004",
        "F"
    ],
    "tags": [
        "bitmasks",
        "data structures",
        "divide and conquer"
    ],
    "difficulty": 2600,
    "statement": "Sonya has an array $$$a_1, a_2, \\ldots, a_n$$$ consisting of $$$n$$$ integers and also one non-negative integer $$$x$$$. She has to perform $$$m$$$ queries of two types:  $$$1$$$ $$$i$$$ $$$y$$$: replace $$$i$$$-th element by value $$$y$$$, i.e. to perform an operation $$$a_{i}$$$ := $$$y$$$;  $$$2$$$ $$$l$$$ $$$r$$$: find the number of pairs ($$$L$$$, $$$R$$$) that $$$l\\leq L\\leq R\\leq r$$$ and bitwise OR of all integers in the range $$$[L, R]$$$ is at least $$$x$$$ (note that $$$x$$$ is a constant for all queries). Can you help Sonya perform all her queries?Bitwise OR is a binary operation on a pair of non-negative integers. To calculate the bitwise OR of two numbers, you need to write both numbers in binary notation. The result is a number, in binary, which contains a one in each digit if there is a one in the binary notation of at least one of the two numbers. For example, $$$10$$$ OR $$$19$$$ = $$$1010_2$$$ OR $$$10011_2$$$ = $$$11011_2$$$ = $$$27$$$.",
    "editorial": "Will be added soon."
}{
    "name": "Interestring graph and Apples",
    "code": [
        "9",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "difficulty": 2300,
    "statement": "Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life \u00abinteresting graph and apples\u00bb. An undirected graph is called interesting, if each of its vertices belongs to one cycle only \u2014 a funny ring \u2014 and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi \u2264 yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui \u2264 vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.",
    "editorial": ""
}{
    "name": "Chocolates",
    "code": [
        "1139",
        "B"
    ],
    "tags": [
        "greedy",
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "You went to the store, selling $$$n$$$ types of chocolates. There are $$$a_i$$$ chocolates of type $$$i$$$ in stock.You have unlimited amount of cash (so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy $$$x_i$$$ chocolates of type $$$i$$$ (clearly, $$$0 \\le x_i \\le a_i$$$), then for all $$$1 \\le j < i$$$ at least one of the following must hold:  $$$x_j = 0$$$ (you bought zero chocolates of type $$$j$$$) $$$x_j < x_i$$$ (you bought less chocolates of type $$$j$$$ than of type $$$i$$$) For example, the array $$$x = [0, 0, 1, 2, 10]$$$ satisfies the requirement above (assuming that all $$$a_i \\ge x_i$$$), while arrays $$$x = [0, 1, 0]$$$, $$$x = [5, 5]$$$ and $$$x = [3, 2]$$$ don't.Calculate the maximum number of chocolates you can buy.",
    "editorial": "It is optimal to proceed greedily from the back of the array. If we have taken $$$x$$$ candies of the $$$i+1$$$ type, then we can only take $$$\\min(x - 1, A_i)$$$ candies for type $$$i$$$. If this value is less than zero, we take $$$0$$$ from here.Overall Complexity: $$$O(n)$$$"
}{
    "name": "Madoka and the Best School in Russia",
    "code": [
        "1647",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "dp",
        "math",
        "number theory"
    ],
    "difficulty": 1900,
    "statement": "Madoka is going to enroll in \"TSUNS PTU\". But she stumbled upon a difficult task during the entrance computer science exam:  A number is called good if it is a multiple of $$$d$$$.  A number is called beatiful if it is good and it cannot be represented as a product of two good numbers. Notice that a beautiful number must be good.Given a good number $$$x$$$, determine whether it can be represented in at least two different ways as a product of several (possibly, one) beautiful numbers. Two ways are different if the sets of numbers used are different.Solve this problem for Madoka and help her to enroll in the best school in Russia!",
    "editorial": "Solution 1:Let $$$x = d^a\\cdot b$$$. Where $$$b$$$ is not a multiple of $$$d$$$.Then consider a few cases:  $$$a = 1$$$. Then $$$a$$$\u00a0\u2014 is an deprived number, since any number multiple of $$$d^2$$$ can be decomposed into $$$d\\cdot(a/d)$$$, each of which is suspicious, and a number multiple of only $$$d$$$, obviously, cannot be decomposed. So the answer in this case is \"YES\".  $$$b$$$\u00a0\u2014 composite, then obviously we can decompose in several ways if $$$a\\neq 1$$$, so the answer is \"NO\".  $$$d$$$\u00a0\u2014 prime number. If $$$b$$$ is prime, then the statement \u00a0\u2014 we have only one option to decompose the number. Since every deprived multiplier is \u00a0\u2014 of the form $$$d\\cdot k$$$. But since $$$d$$$ is prime, there are no other ways to decompose it, except to add a multiplier from $$$b$$$, and since $$$b$$$ is simple, then all these options will be equal before the permutation.  $$$d$$$\u00a0\u2014 composite. If $$$a\\leq 2$$$, then this case is no different from the past, since we still have to get two dysfunctional multipliers and they will all simply be equal to $$$d$$$. Otherwise, let $$$d = p\\cdot q$$$ (the case where $$$d$$$\u00a0\u2014 is a power of prime will be considered later), where $$$gcd(p, q) = 1$$$. Then we can make the number $$$p\\cdot q^{b - 1}$$$ and $$$p^{b - 1}\\cdot q$$$. And also $$$q\\cdot p$$$, $$$q\\cdot p$$$, ..., $$$q\\cdot p$$$. And even if $$$a$$$\u00a0\u2014 is $$$p$$$ or $$$q$$$, then it will not spoil anything, since a number of the form $$$p\\cdot q^b$$$ is still deprived.  $$$d$$$\u00a0\u2014 the power of a prime number. Then $$$d = p^k$$$. The statement, if $$$d = p^2$$$, and $$$x = p^7$$$, then it cannot be decomposed in several ways, otherwise, if $$$a >2$$$ and $$$k >1$$$, then let's look at the partition of $$$p^{2k - 1}, p^{k+1}, p^k, \\ldots p^k$$$, it is clear that if $$$k> 2$$$, then even if $$$b =p$$$, then the multiplier of $$$p^{k+2}$$$ will still be not working, so it does not differ from the composite $$$d $$$ in the last case. Otherwise, if $$$k = 2$$$, then if $$$a = 3$$$ and $$$b = p$$$, then nothing can be added, otherwise we will have the opportunity to choose $$$3$$$ of the multiplier $$$p^k$$$, and somehow decompose the rest (since in this case $$$a > 3$$$, then at least one more multiplier will be) and add $$$b$$$ there. And we can decompose these 3 multipliers into $$$2$$$ or $$$3$$$ multipliers, as written above. Therefore, the only unique case when $$$d$$$ is the degree of a prime is $$$d=p^2, x = p^7$$$. Solution 2:Let's write $$$dp_{mask, lst}$$$, where $$$mask$$$\u00a0\u2014 is the number that remains to be decomposed, and $$$lst$$$\u00a0\u2014 is the last multiplier that we used. And $$$dp$$$ store the number of options decompose into multipliers. Then we recalculate the dynamics from $$$dp_{mask, lst}$$$ to $$$dp_{mask / i, i}$$$, where $$$i \\geq lst$$$ and is a divisor of $$$mask$$$, and also deprived. After that, it remains only to check that the sum of all $$$dp$$$, where $$$mask = 1$$$ is equal to one."
}{
    "name": "Alice and Bob",
    "code": [
        "346",
        "A"
    ],
    "tags": [
        "games",
        "math",
        "number theory"
    ],
    "difficulty": 1600,
    "statement": "It is so boring in the summer holiday, isn't it? So Alice and Bob have invented a new game to play. The rules are as follows. First, they get a set of n distinct integers. And then they take turns to make the following moves. During each move, either Alice or Bob (the player whose turn is the current) can choose two distinct integers x and y from the set, such that the set doesn't contain their absolute difference |x - y|. Then this player adds integer |x - y| to the set (so, the size of the set increases by one).If the current player has no valid move, he (or she) loses the game. The question is who will finally win the game if both players play optimally. Remember that Alice always moves first.",
    "editorial": ""
}{
    "name": "Carrot Cakes",
    "code": [
        "799",
        "A"
    ],
    "tags": [
        "brute force",
        "implementation"
    ],
    "difficulty": 1100,
    "statement": "In some game by Playrix it takes t minutes for an oven to bake k carrot cakes, all cakes are ready at the same moment t minutes after they started baking. Arkady needs at least n cakes to complete a task, but he currently don't have any. However, he has infinitely many ingredients and one oven. Moreover, Arkady can build one more similar oven to make the process faster, it would take d minutes to build the oven. While the new oven is being built, only old one can bake cakes, after the new oven is built, both ovens bake simultaneously. Arkady can't build more than one oven.Determine if it is reasonable to build the second oven, i.e. will it decrease the minimum time needed to get n cakes or not. If the time needed with the second oven is the same as with one oven, then it is unreasonable.",
    "editorial": "One of possible solutions \u2014 to simply simulate described process. To make it we need two variables \u2014 t1 and t2. In them we will store the time when each of the ovens will become free. In the beginning t1 equals to 0 and t2 equals to d. After simulating the process we will get a time for which possible to make n cakes with 2 ovens (this time equals to maximum from t1 and t2). It is only left to compare this time with value (n + k - 1) / k\u00b7t \u2014 a time for which possible to make n cakes using only one oven."
}{
    "name": "The Tower is Going Home",
    "code": [
        "1044",
        "A"
    ],
    "tags": [
        "binary search",
        "two pointers"
    ],
    "difficulty": 1700,
    "statement": "On a chessboard with a width of $$$10^9$$$ and a height of $$$10^9$$$, the rows are numbered from bottom to top from $$$1$$$ to $$$10^9$$$, and the columns are numbered from left to right from $$$1$$$ to $$$10^9$$$. Therefore, for each cell of the chessboard you can assign the coordinates $$$(x,y)$$$, where $$$x$$$ is the column number and $$$y$$$ is the row number.Every day there are fights between black and white pieces on this board. Today, the black ones won, but at what price? Only the rook survived, and it was driven into the lower left corner\u00a0\u2014 a cell with coordinates $$$(1,1)$$$. But it is still happy, because the victory has been won and it's time to celebrate it! In order to do this, the rook needs to go home, namely\u00a0\u2014 on the upper side of the field (that is, in any cell that is in the row with number $$$10^9$$$).Everything would have been fine, but the treacherous white figures put spells on some places of the field before the end of the game. There are two types of spells:   Vertical. Each of these is defined by one number $$$x$$$. Such spells create an infinite blocking line between the columns $$$x$$$ and $$$x+1$$$.  Horizontal. Each of these is defined by three numbers $$$x_1$$$, $$$x_2$$$, $$$y$$$. Such spells create a blocking segment that passes through the top side of the cells, which are in the row $$$y$$$ and in columns from $$$x_1$$$ to $$$x_2$$$ inclusive. The peculiarity of these spells is that it is impossible for a certain pair of such spells to have a common point. Note that horizontal spells can have common points with vertical spells.    An example of a chessboard. Let's recall that the rook is a chess piece that in one move can move to any point that is in the same row or column with its initial position. In our task, the rook can move from the cell $$$(r_0,c_0)$$$ into the cell $$$(r_1,c_1)$$$ only under the condition that $$$r_1 = r_0$$$ or $$$c_1 = c_0$$$ and there is no blocking lines or blocking segments between these cells (For better understanding, look at the samples).Fortunately, the rook can remove spells, but for this it has to put tremendous efforts, therefore, it wants to remove the minimum possible number of spells in such way, that after this it can return home. Find this number!",
    "editorial": "Observation 1. If we remove all the horizontal spells, than the rook can move straightforward up to the upper side of the field. So the only purpose of removing the vertical spells is to reduce the number of horizontal spells to be removed.Observation 2. If we want to remove the $$$i$$$-th vertical spell, then we should also remove all such vertical spells $$$j$$$, that $$$x_j<x_i$$$. It is obvious, because when we delete a vertical spell, we suppose that the rook would be able to outflank some horizontal spells by getting at rows that have greater number than $$$x_i$$$. If there remains at least one vertical spell $$$j$$$, such that $$$x_j<x_i$$$, than we will never be able to move to the rows with number greater than $$$x_j$$$, including $$$x_i$$$.Let's find some observations about the horizontal spells:Let's assume that we deleted $$$i$$$ vertical spells. It means, that the rook can move freely left and right at columns between $$$1$$$ and $$$x_{i+1}$$$ inclusive. Let's say that our rook is on the row $$$y$$$. If there is at least one cell which is located at row $$$y$$$ at any column between $$$1$$$ and $$$x_{i+1}$$$, that there is no blocking segment on the top of it, then the rook can move to this cell and move upwards into the row $$$y+1$$$. It means that if there is at least one gap in the blocking segments in row $$$y$$$ and in columns between $$$1$$$ and $$$x_{i+1}$$$ incluse, then there is no need to remove any of horizontal spells in the row.Observation 3. We care only about such horizontal spells, in which $$$x_1=1$$$. We have already proved, that we only care about such rows, that there are no gaps in blocking segments in them. If there is no such horizontal spell with $$$x_1 = 1$$$, it means that there is a gap in the row at column $$$1$$$. If there is such horizontal spell, then if there are more spells in that row, there would be a gap between any pair of neighbouring segments. Since we only care only about segments with $$$x_1 = 1$$$ and it is guaranteed that no horizontal segments share a common point, it means that we might not care about the $$$y$$$ of any horizontal spell, because there is no such pair of segments that both $$$x_1$$$ and $$$y$$$ of these are equal. So now while reading the descriptions of the horizontal spells, if the $$$x_1$$$ of $$$i$$$-th horizontal spell is not equal to $$$1$$$, we can ignore it. Otherwise, we add $$$x_2$$$ to some array.Now we can sort the array of $$$x_2$$$-s, and solve the task using the two-pointer technique. Here is the final algorithm: Add fake vertical spell with $$$x=10^9$$$.Sort all the vertical spells in ascending order.While reading the descriptions of the horizontal spells, we ignore ones with $$$x_1$$$ not equal to $$$1$$$. In other case, we add $$$x_2$$$ to the array.Sort the array of $$$x_2$$$-s in ascending order. Now we use the two pointer technique in the following way: we iterate $$$i$$$ from 0 to n\u00a0\u2014 the number of vertical spells to be deleted and on each step we advance the pointer while the $$$x_2$$$ at which the pointer points is less then $$$x$$$ of the $$$(i+1)$$$-th vertical spell. Let's denote the position of the pointer as $$$p$$$. The number of horizontal spells, that we need to remove with $$$i$$$ vertical spells removed is $$$m-p+1$$$. Let's define the position of the pointer at $$$i$$$-th step as $$$p_i$$$.The answer to the problem in minival value of $$$i + m - p_i + 1$$$ among all $$$i$$$ from $$$0$$$ to $$$n$$$.Overall complexity $$$O(n \\log n + m \\log m)$$$"
}{
    "name": "Kingdom of Islands",
    "code": [
        "1578",
        "K"
    ],
    "tags": [
        "brute force",
        "graphs",
        "implementation"
    ],
    "difficulty": 2800,
    "statement": "The Kingdom of Islands consists of $$$p$$$ islands. As the king, you rule over the whole kingdom, while each island is ruled over by one or several jarls under your rule. In total, there are $$$n$$$ jarls under your jurisdiction.Each island of the kingdom has its own strong traditions, so jarls that rule over the same island support each other and never have conflicts. The downsides of such strength are cultural conflicts between people inhabiting different islands. Thus, two jarls that rule over different islands are in conflict.However, recent years brought a few changes to traditional relations between the jarls. To your knowledge, there are exactly $$$k$$$ pairs of jarls such that relationships between two jarls in the pair are different from the traditional. That is, if two jarls of the pair you know rule over the same island, these jarls are in conflict. If they rule over different islands, then they overcome cultural disagreement and there is no conflict between them anymore.As a true responsible king, you are worried about whether the kingdom is close to a major conflict. In order to estimate the current situation, you would like to find the largest possible group of jarls such that every two jarls in the group are in conflict.",
    "editorial": ""
}{
    "name": "Doremy's Perfect DS Class (Easy Version)",
    "code": [
        "1764",
        "G1"
    ],
    "tags": [
        "binary search",
        "interactive"
    ],
    "difficulty": 2900,
    "statement": "The only difference between this problem and the other two versions is the maximum number of queries. In this version, you are allowed to ask at most $$$\\mathbf{30}$$$ queries. You can make hacks only if all versions of the problem are solved.This is an interactive problem.\"Everybody! Doremy's Perfect Data Structure Class is about to start! Come and do your best if you want to have as much IQ as me!\" In today's Data Structure class, Doremy is teaching everyone a powerful data structure\u00a0\u2014 Doremy tree! Now she gives you a quiz to prove that you are paying attention in class.Given an array $$$a$$$ of length $$$m$$$, Doremy tree supports the query $$$Q(l,r,k)$$$, where $$$1 \\leq l \\leq r \\leq m$$$ and $$$1 \\leq k \\leq m$$$, which returns the number of distinct integers in the array $$$\\left[\\lfloor\\frac{a_l}{k} \\rfloor, \\lfloor\\frac{a_{l+1}}{k} \\rfloor, \\ldots, \\lfloor\\frac{a_r}{k} \\rfloor\\right]$$$.Doremy has a secret permutation $$$p$$$ of integers from $$$1$$$ to $$$n$$$. You can make queries, in one query, you give $$$3$$$ integers $$$l,r,k$$$ ($$$1 \\leq l \\leq r \\leq n$$$, $$$1 \\leq k \\leq n$$$) and receive the value of $$$Q(l,r,k)$$$ for the array $$$p$$$. Can you find the index $$$y$$$ ($$$1 \\leq y \\leq n$$$) such that $$$p_y=1$$$ in at most $$$\\mathbf{30}$$$ queries?Note that the permutation $$$p$$$ is fixed before any queries are made.",
    "editorial": ""
}{
    "name": "Erase and Extend (Hard Version)",
    "code": [
        "1537",
        "E2"
    ],
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "hashing",
        "string suffix structures",
        "strings",
        "two pointers"
    ],
    "difficulty": 2200,
    "statement": "This is the hard version of the problem. The only difference is the constraints on $$$n$$$ and $$$k$$$. You can make hacks only if all versions of the problem are solved.You have a string $$$s$$$, and you can do two types of operations on it:   Delete the last character of the string.  Duplicate the string: $$$s:=s+s$$$, where $$$+$$$ denotes concatenation. You can use each operation any number of times (possibly none).Your task is to find the lexicographically smallest string of length exactly $$$k$$$ that can be obtained by doing these operations on string $$$s$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:  $$$a$$$ is a prefix of $$$b$$$, but $$$a\\ne b$$$;  In the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. ",
    "editorial": "We know that the final string is some prefix repeated a bunch of times. Incrementally for i from 1 to n we will keep the longest among the first i prefixes that gives the best answer we've seen so far.So assume the m-th prefix is currently the best and we're considering position p. If the p-th character is greater than the corresponding character in s[1..m] * (a lot) then the p-th prefix and any further prefixes can't possibly give a smaller answer, so we just print the current one and finish. Otherwise all the characters before the p-th are all less than or equal to the corresponding characters in s[1..m] * (lots), so if the p-th is smaller than the corresponding we set the p-th prefix as the best.Now the interesting case is if the current character is the same as the corresponding one. Say then that p = m + k, by the logic of the previous paragraph we must have s[(m + 1)..(m + k)] = s[1..k]. If k = m then the new prefix is just the old one twice, so set p as the best prefix now. This ensures that otherwise k < m.Denote A = s[1..k] and B = s[(k + 1)..m], so the string formed by the current best prefix is ABABABABA... and the new one is ABAABAABA... Now if AB = BA then these strings are in fact the same, so set m + k as the new best prefix. Otherwise we can find the first position where AB and BA differ, and use that to determine whether the new prefix is better. This can be done in O(1) with Z function, thus giving a linear solution for the full problem."
}{
    "name": "Painting the Fence",
    "code": [
        "1132",
        "C"
    ],
    "tags": [
        "brute force"
    ],
    "difficulty": 1700,
    "statement": "You have a long fence which consists of $$$n$$$ sections. Unfortunately, it is not painted, so you decided to hire $$$q$$$ painters to paint it. $$$i$$$-th painter will paint all sections $$$x$$$ such that $$$l_i \\le x \\le r_i$$$.Unfortunately, you are on a tight budget, so you may hire only $$$q - 2$$$ painters. Obviously, only painters you hire will do their work.You want to maximize the number of painted sections if you choose $$$q - 2$$$ painters optimally. A section is considered painted if at least one painter paints it.",
    "editorial": "Let $$$c_i$$$ be the number of painters that are painting the $$$i$$$-th section.Let's fix the first painter (denote his index as $$$x$$$) we won't take and decrease the numbers of array $$$c$$$ in the range which he paints.Then we may new array $$$d$$$, such that $$$d_i$$$ is equal to $$$1$$$ if and only if $$$c_i = 1$$$, and $$$0$$$ otherwise. This array corresponds to segments that are painted by only one painter After that we build prefix sum array $$$p$$$ on array $$$d$$$: $$$p_i = \\sum\\limits_{j=1}^{i} d_j$$$. This should be done in $$$O(n)$$$.Now, for each remaining painter we can count the number of sections that are painted only by him. For painter $$$i$$$ it will be equal to $$$p_{r_i} - p_{l_i - 1}$$$. Let's denote it as $$$res_i$$$.Finally, find an painter with the minimum value of $$$res_i$$$, denote it as $$$MinRes$$$. The answer (if we choose painter $$$x$$$ as one of two that won't be hired) will be equal to $$$cnt - MinRes$$$, where $$$cnt$$$ is the number of elements greater than $$$0$$$ in the array $$$c$$$ after removing the painter $$$x$$$. And, of course, we should do the same for all painters."
}{
    "name": "XOR Tree",
    "code": [
        "1709",
        "E"
    ],
    "tags": [
        "bitmasks",
        "data structures",
        "dfs and similar",
        "dsu",
        "greedy",
        "trees"
    ],
    "difficulty": 2400,
    "statement": "You are given a tree consisting of $$$n$$$ vertices. A number is written on each vertex; the number on vertex $$$i$$$ is equal to $$$a_i$$$.Recall that a simple path is a path that visits each vertex at most once. Let the weight of the path be the bitwise XOR of the values written on vertices it consists of. Let's say that a tree is good if no simple path has weight $$$0$$$.You can apply the following operation any number of times (possibly, zero): select a vertex of the tree and replace the value written on it with an arbitrary positive integer. What is the minimum number of times you have to apply this operation in order to make the tree good?",
    "editorial": "To begin with, we note that there are no restrictions on the values that can be written on the vertices, so we can use numbers of the form $$$2^{30+x}$$$ for the $$$x$$$-th replacement. Then, if we replaced the value of a vertex, then no path passing through this vertex has weight $$$0$$$.Let's root the tree at the vertex number $$$1$$$. We can use a greedy approach: consider some vertex $$$v$$$ such that it is the LCA for two vertices $$$x$$$ and $$$y$$$, the path between which has XOR equal to $$$0$$$. Among such vertices $$$v$$$, pick one with the maximum distance from the root. We need to change at least one vertex on the path $$$(x, y)$$$. It turns out that changing the vertex $$$v$$$ is always no worse than changing any other vertex $$$u$$$ on this path, because all the remaining bad paths that pass through the vertex $$$u$$$ also pass through the vertex $$$v$$$ (that's why we have chosen the deepest LCA). This means that in order to solve the problem, it is necessary to quickly find the deepest LCA of some bad path.For the convenience of solving the problem, let's denote the XOR on the path $$$(x,y)$$$ as $$$b_x \\oplus b_y \\oplus a_{LCA(x,y)}$$$, where $$$b_v$$$ is XOR on the path from the root to the vertex $$$v$$$. For all vertices $$$v$$$, let's maintain a set of values $$$b_x$$$, such that $$$x$$$ belongs to the subtree of $$$v$$$. Let's use the small-to-large method to obtain such sets. Also, during the union of sets, we can check if there is a bad path in this subtree, i. e. if two values in the sets we merge have the same XOR as the value written on the current vertex (because that's when the XOR on path is $$$0$$$). If such a path exists, then we have to change the value of the vertex $$$v$$$ and mark that the vertices of this subtree cannot be the ends of a bad path anymore \u2014 that means we just clear the set instead of pulling it up the tree.This solution works in $$$O(n \\log^2 n)$$$."
}{
    "name": "Stones on the Table",
    "code": [
        "266",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "There are n stones on the table in a row, each of them can be red, green or blue. Count the minimum number of stones to take from the table so that any two neighboring stones had different colors. Stones in a row are considered neighboring if there are no other stones between them.",
    "editorial": ""
}{
    "name": "Collecting Coins",
    "code": [
        "1294",
        "A"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 800,
    "statement": "Polycarp has three sisters: Alice, Barbara, and Cerene. They're collecting coins. Currently, Alice has $$$a$$$ coins, Barbara has $$$b$$$ coins and Cerene has $$$c$$$ coins. Recently Polycarp has returned from the trip around the world and brought $$$n$$$ coins.He wants to distribute all these $$$n$$$ coins between his sisters in such a way that the number of coins Alice has is equal to the number of coins Barbara has and is equal to the number of coins Cerene has. In other words, if Polycarp gives $$$A$$$ coins to Alice, $$$B$$$ coins to Barbara and $$$C$$$ coins to Cerene ($$$A+B+C=n$$$), then $$$a + A = b + B = c + C$$$.Note that A, B or C (the number of coins Polycarp gives to Alice, Barbara and Cerene correspondingly) can be 0.Your task is to find out if it is possible to distribute all $$$n$$$ coins between sisters in a way described above.You have to answer $$$t$$$ independent test cases.",
    "editorial": "Suppose $$$a \\le b \\le c$$$. If it isn't true then let's rearrange our variables. Then we need at least $$$2c - b - a$$$ coins to make $$$a$$$, $$$b$$$ and $$$c$$$ equal. So if $$$n < 2c - b - a$$$ then the answer is \"NO\". Otherwise, the answer if \"YES\" if the number $$$n - (2c - b - a)$$$ is divisible by $$$3$$$. This is true because after making $$$a, b$$$ and $$$c$$$ equal we need to distribute all remaining candies between three sisters."
}{
    "name": "Tape",
    "code": [
        "1110",
        "B"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 1400,
    "statement": "You have a long stick, consisting of $$$m$$$ segments enumerated from $$$1$$$ to $$$m$$$. Each segment is $$$1$$$ centimeter long. Sadly, some segments are broken and need to be repaired.You have an infinitely long repair tape. You want to cut some pieces from the tape and use them to cover all of the broken segments. To be precise, a piece of tape of integer length $$$t$$$ placed at some position $$$s$$$ will cover segments $$$s, s+1, \\ldots, s+t-1$$$.You are allowed to cover non-broken segments; it is also possible that some pieces of tape will overlap.Time is money, so you want to cut at most $$$k$$$ continuous pieces of tape to cover all the broken segments. What is the minimum total length of these pieces?",
    "editorial": "Let's start with $$$n$$$ pieces of length $$$1$$$ covering only broken segments and then decrease the number of pieces used. After reducing the number of segments by $$$x$$$, some $$$x$$$ of long uncovered initial segments of unbroken places will be covered. It's easy to see that you should cover the shortest $$$x$$$ segments.Thus, to make at most $$$k$$$ segments, you should cover $$$n - k$$$ shortest initial segments. You can find their total length using sort."
}{
    "name": "Tractor College",
    "code": [
        "200",
        "E"
    ],
    "tags": [
        "implementation",
        "math",
        "number theory",
        "ternary search"
    ],
    "difficulty": 2400,
    "statement": "While most students still sit their exams, the tractor college has completed the summer exam session. In fact, students study only one subject at this college \u2014 the Art of Operating a Tractor. Therefore, at the end of a term a student gets only one mark, a three (satisfactory), a four (good) or a five (excellent). Those who score lower marks are unfortunately expelled.The college has n students, and oddly enough, each of them can be on scholarship. The size of the scholarships varies each term. Since the end-of-the-term exam has just ended, it's time to determine the size of the scholarship to the end of next term.The monthly budget for the scholarships of the Tractor college is s rubles. To distribute the budget optimally, you must follow these rules:  The students who received the same mark for the exam, should receive the same scholarship; Let us denote the size of the scholarship (in roubles) for students who have received marks 3, 4 and 5 for the exam, as k3, k4 and k5, respectively. The values k3, k4 and k5 must be integers and satisfy the inequalities 0 \u2264 k3 \u2264 k4 \u2264 k5; Let's assume that c3, c4, c5 show how many students received marks 3, 4 and 5 for the exam, respectively. The budget of the scholarship should be fully spent on them, that is, c3\u00b7k3 + c4\u00b7k4 + c5\u00b7k5 = s; Let's introduce function  \u2014 the value that shows how well the scholarships are distributed between students. In the optimal distribution function f(k3, k4, k5) takes the minimum possible value. Given the results of the exam, and the budget size s, you have to find the optimal distribution of the scholarship.",
    "editorial": ""
}{
    "name": "Connected Component on a Chessboard",
    "code": [
        "1196",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "You are given two integers $$$b$$$ and $$$w$$$. You have a chessboard of size $$$10^9 \\times 10^9$$$ with the top left cell at $$$(1; 1)$$$, the cell $$$(1; 1)$$$ is painted white.Your task is to find a connected component on this chessboard that contains exactly $$$b$$$ black cells and exactly $$$w$$$ white cells. Two cells are called connected if they share a side (i.e. for the cell $$$(x, y)$$$ there are at most four connected cells: $$$(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)$$$). A set of cells is called a connected component if for every pair of cells $$$C_1$$$ and $$$C_2$$$ from this set, there exists a sequence of cells $$$c_1$$$, $$$c_2$$$, ..., $$$c_k$$$ such that $$$c_1 = C_1$$$, $$$c_k = C_2$$$, all $$$c_i$$$ from $$$1$$$ to $$$k$$$ are belong to this set of cells and for every $$$i \\in [1, k - 1]$$$, cells $$$c_i$$$ and $$$c_{i + 1}$$$ are connected.Obviously, it can be impossible to find such component. In this case print \"NO\". Otherwise, print \"YES\" and any suitable connected component.You have to answer $$$q$$$ independent queries.",
    "editorial": "I'll consider the case when $$$b \\ge w$$$, the other case is symmetric and the answer I construct is the same but shifted by $$$1$$$ to the right.Consider the given field as a matrix where $$$x$$$ is the number of row and $$$y$$$ is the number of column. Firstly, let's build the line of length $$$2w-1$$$ from the cell $$$(2, 2)$$$ to the cell $$$(2, 2w)$$$. Then $$$b$$$ will decrease by $$$w-1$$$ and $$$w$$$ will (formally) become $$$0$$$.Then we have two black cells to the left and to the right ($$$(2, 1)$$$ and $$$(2, 2w+1)$$$) and $$$w-1$$$ black cells to the up (all cells ($$$1, 2w+2*i$$$) for all $$$i$$$ from $$$0$$$ to $$$w-1$$$) and $$$w-1$$$ black cells to the down (all cells ($$$3, 2w+2*i$$$) for all $$$i$$$ from $$$0$$$ to $$$w-1$$$). Let's add the required number of cells to the answer.If even after adding all these cells $$$b$$$ still be greater than $$$0$$$ then the answer is \"NO\" (maybe there will be a proof why it is so but you can read it already from other participants). Otherwise the answer is \"YES\" and we constructed the required component."
}{
    "name": "Divisibility by 2^n",
    "code": [
        "1744",
        "D"
    ],
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "difficulty": 1200,
    "statement": "You are given an array of positive integers $$$a_1, a_2, \\ldots, a_n$$$.Make the product of all the numbers in the array (that is, $$$a_1 \\cdot a_2 \\cdot \\ldots \\cdot a_n$$$) divisible by $$$2^n$$$.You can perform the following operation as many times as you like:  select an arbitrary index $$$i$$$ ($$$1 \\leq i \\leq n$$$) and replace the value $$$a_i$$$ with $$$a_i=a_i \\cdot i$$$. You cannot apply the operation repeatedly to a single index. In other words, all selected values of $$$i$$$ must be different.Find the smallest number of operations you need to perform to make the product of all the elements in the array divisible by $$$2^n$$$. Note that such a set of operations does not always exist.",
    "editorial": "Let's notice that if we multiply the numbers $$$a_1 \\cdot a_2 \\cdot \\ldots \\cdot a_n$$$, then the power of two of the product is equal to the sum of the powers of two in each of the numbers.Let's calculate the initial sum of the powers of twos in the product. This can be done as follows: let's take the element $$$a_i$$$ and divide it by $$$2$$$ as long as we can, while remembering to increase our counter by the number of occurrences of a power of two.Now let's move on to operations and note that choosing the index $$$i$$$ will increase the degree of occurrence of two by a fixed number (that is, it does not matter when to apply this operation). Choosing an index $$$i$$$ will increment the counter by a number $$$x$$$ such that $$$i$$$ is divisible by $$$2^x$$$ but not by $$$2^{x + 1}$$$\u00a0\u2014 you can find this $$$x$$$, again , by dividing by $$$2$$$ while we can.Since we want to minimize the number of operations used, at each moment of time we will try to use an index that increases the counter by the largest number. To do this, it is enough to sort the indices by this index of increase and take them greedily from the largest increase to the smallest.We get the solution in $$$O(n \\log n + n \\log A)$$$."
}{
    "name": "DIY Tree",
    "code": [
        "1556",
        "H"
    ],
    "tags": [
        "graphs",
        "greedy",
        "math",
        "probabilities"
    ],
    "difficulty": 3300,
    "statement": "  William really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge-weighted graph consisting of $$$n$$$ vertices.He wants to build a spanning tree of this graph, such that for the first $$$k$$$ vertices the following condition is satisfied: the degree of a vertex with index $$$i$$$ does not exceed $$$d_i$$$. Vertices from $$$k + 1$$$ to $$$n$$$ may have any degree.William wants you to find the minimum weight of a spanning tree that satisfies all the conditions.A spanning tree is a subset of edges of a graph that forms a tree on all $$$n$$$ vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.",
    "editorial": "Let's call the first $$$k$$$ vertices special.First of all, let's note that the number of different forests on $$$5$$$ vertices is at most $$$300$$$. It means that we can try all of them, one by one, as the set of all edges of the answer with both endpoints being the special vertices.Let $$$T$$$ be the set of chosen edges with both endpoints being the special vertices. With fixed $$$T$$$, only edges with zero or one endpoint at special vertices are left. From now on, we will only consider subsets of these edges.We will introduce two matroids:  Matroid $$$A$$$ is defined as follows: A set of edges $$$E$$$ is independent for matroid $$$A$$$, if the set $$$E \\cup T$$$ has no cycles. $$$A$$$ is a matroid, because:  Deleting edges produces no cycles, so if $$$F$$$ is a superset of $$$E$$$ and $$$F$$$ is independent, then $$$E$$$ is also independent. If $$$|F| > |E|$$$, $$$F$$$ is independent and $$$E$$$ is independent, then from the graphic matroid there should be an edge in $$$T \\cup F$$$ that connects connected components in $$$T \\cup E$$$. This edge can't be from $$$T$$$, so there is an element $$$x \\in F$$$, s.\u00a0t. $$$E \\cup \\{x\\}$$$ is also independent. Matroid $$$B$$$ is defined as follows. A set of edges $$$E$$$ is independent for matroid $$$B$$$, if in the set $$$E \\cup T$$$ degrees of vertices $$$[1,2,\\ldots,k]$$$ don't exceed $$$[d_1,d_2,\\ldots,d_k]$$$, respectively. $$$B$$$ is a matroid, because: Deleting edges decreases degrees, so if $$$F$$$ is a superset of $$$E$$$ and $$$F$$$ is independent, then $$$E$$$ is also independent. If $$$|F| > |E|$$$, $$$F$$$ is independent and $$$E$$$ is independent, then one of the following statements is true. Either there is an edge with zero endpoints at special vertices in $$$F \\setminus E$$$, and we can add it to $$$E$$$ preserving independence. Or there is some vertex $$$v \\in \\{1,2,\\ldots,k\\}$$$ that has larger degree in $$$F$$$ than in $$$E$$$, and we can take one of adjacent edges that are present in $$$F \\setminus E$$$ and add it to $$$E$$$. Thus, there is an element $$$x \\in F$$$, s.\u00a0t. $$$E \\cup \\{x\\}$$$ is also independent.Let's find the minimum weight base $$$E$$$ in the intersection of matroids $$$A$$$ and $$$B$$$. If it has enough edges, we can relax the answer with the total weight of edges in $$$E \\cup T$$$.Also note that we are only interested in edges from $$$\\{1, \\ldots, k\\} \\times \\{k+1,\\ldots,n\\}$$$ and in the MST of edges from $$$\\{k+1,\\ldots,n\\}$$$, so we only have $$$O(nk)$$$ edges we need to consider.Total complexity is $$$O(\\mathrm{exp}(k) \\cdot \\mathrm{poly}(n)))$$$, and it will easily fit into TL if your solution is efficient enough."
}{
    "name": "Minimizing Difference",
    "code": [
        "1244",
        "E"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "sortings",
        "ternary search",
        "two pointers"
    ],
    "difficulty": 2000,
    "statement": "You are given a sequence $$$a_1, a_2, \\dots, a_n$$$ consisting of $$$n$$$ integers.You may perform the following operation on this sequence: choose any element and either increase or decrease it by one.Calculate the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than $$$k$$$ times.",
    "editorial": "Suppose that the maximum value in the resulting array should be $$$R$$$, and the minimum value should be $$$L$$$. Let's estimate the required number of operations to make an array with such properties. All elements that are less than $$$L$$$ should be increased to $$$L$$$, and all elements that are greater than $$$R$$$ should be decreased to $$$R$$$ \u2014 and we don't have to do any operation with remaining elements.Now we claim that either $$$L$$$ or $$$R$$$ should belong to the initial array. Why so? Suppose we constructed an answer such that $$$L \\notin A$$$ and $$$R \\notin A$$$. If the number of elements we increased to $$$L$$$ is not less than the number of elements we decreased to $$$R$$$, then we could construct the answer with minimum equal to $$$L - 1$$$ and maximum equal to $$$R - 1$$$, and it would not require more operations. And if the number of elements we increased to $$$L$$$ is less than the number of elements we decreased to $$$R$$$, then we construct the answer for $$$L + 1$$$ as minimum and $$$R + 1$$$ as maximum. So we can shift the range $$$[L, R]$$$ so that one of its endpoints belongs to the initial array.Now we can solve the problem as follows: iterate on the maximum in the resulting array and find the largest minimum we can obtain with binary search, and then do it vice versa: iterate on the minimum in the resulting array and find the largest maximum we can obtain with binary search. To check how many operations we need, for example, to make all values not less than $$$L$$$, we can find the number of elements that we have to change with another binary search (let the number of such elements be $$$m$$$), and find their sum with prefix sums (let their sum be $$$S$$$). Then the required number of operations is exactly $$$Lm - S$$$. The same approach can be used to find the number of operations to make all elements not greater than $$$R$$$.This is the way the problem was supposed to solve, but, unfortunately, we failed to find a much easier greedy solution."
}{
    "name": "Watching Fireworks is Fun",
    "code": [
        "372",
        "C"
    ],
    "tags": [
        "data structures",
        "dp",
        "math"
    ],
    "difficulty": 2100,
    "statement": "A festival will be held in a town's main street. There are n sections in the main street. The sections are numbered 1 through n from left to right. The distance between each adjacent sections is 1.In the festival m fireworks will be launched. The i-th (1 \u2264 i \u2264 m) launching is on time ti at section ai. If you are at section x (1 \u2264 x \u2264 n) at the time of i-th launching, you'll gain happiness value bi - |ai - x| (note that the happiness value might be a negative value).You can move up to d length units in a unit time interval, but it's prohibited to go out of the main street. Also you can be in an arbitrary section at initial time moment (time equals to 1), and want to maximize the sum of happiness that can be gained from watching fireworks. Find the maximum total happiness.Note that two or more fireworks can be launched at the same time.",
    "editorial": ""
}{
    "name": "Rain of Fire",
    "code": [
        "1419",
        "F"
    ],
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "implementation"
    ],
    "difficulty": 2800,
    "statement": "There are $$$n$$$ detachments on the surface, numbered from $$$1$$$ to $$$n$$$, the $$$i$$$-th detachment is placed in a point with coordinates $$$(x_i, y_i)$$$. All detachments are placed in different points.Brimstone should visit each detachment at least once. You can choose the detachment where Brimstone starts.To move from one detachment to another he should first choose one of four directions of movement (up, right, left or down) and then start moving with the constant speed of one unit interval in a second until he comes to a detachment. After he reaches an arbitrary detachment, he can repeat the same process.Each $$$t$$$ seconds an orbital strike covers the whole surface, so at that moment Brimstone should be in a point where some detachment is located. He can stay with any detachment as long as needed.Brimstone is a good commander, that's why he can create at most one detachment and place it in any empty point with integer coordinates he wants before his trip. Keep in mind that Brimstone will need to visit this detachment, too.Help Brimstone and find such minimal $$$t$$$ that it is possible to check each detachment. If there is no such $$$t$$$ report about it.",
    "editorial": "We can consider a graph where vertices are the points (detachments), and there is an edge between two points, if it's possible to move from one point to another. It is possible if these points are on the same line ($$$x_i = x_j$$$ or $$$y_i = y_j$$$) and the distance between them is $$$\\le T$$$.Now we can check, whether current $$$t$$$ value is good (whether it is possible to check all detachments). It is easy to see, that it is only possible, when the graph is connected. This means, that we can make a binary search for $$$t$$$. Let's now learn how to check, whether it is possible to add at most one point to make the graph connected.If there is $$$1$$$ component, then the graph is already connected.If there are $$$2$$$ components, then we can search through all such pairs of points, that one point is from the first component, and another point is from the second component. We can connect these points, if they are on one line, and the distance between them is $$$\\le 2T$$$ or the differences $$$|x_1 - x_2| \\le T$$$ and $$$y_1 - y_2 \\le T$$$.If $$$3$$$ are three components, then we should consider triples of points. Two of these points should be on the same line. The added point should be on a segment between these two points, and there are $$$O(n)$$$ such segments. Now let's search through all such pairs (segment, point) and check whether it is possible to place a point on the segment and connect it with the point from the pair.If there are $$$4$$$ components, then you can search trough pairs (segment, segment), so that one segment is horizontal and another one is vertical (they should make a cross). Now we just need to check whether it is possible to connect their intersection point with all 4 endpoints of the segments.If there are more, than $$$4$$$ components, then it is not possible to connect them adding only one point, because there are 4 movement directions. If your binary search did not find the answer even for $$$T = 2 \\cdot 10^9$$$, then the answer is $$$-1$$$, because the maximal distance between any two points is $$$\\le 2 \\cdot 10^9$$$."
}{
    "name": "Permutation Addicts",
    "code": [
        "1738",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 1900,
    "statement": "Given a permutation $$$a_1, a_2, \\dots, a_n$$$ of integers from $$$1$$$ to $$$n$$$, and a threshold $$$k$$$ with $$$0 \\leq k \\leq n$$$, you compute a sequence $$$b_1, b_2, \\dots, b_n$$$ as follows. For every $$$1 \\leq i \\leq n$$$ in increasing order, let $$$x = a_i$$$.   If $$$x \\leq k$$$, set $$$b_{x}$$$ to the last element $$$a_j$$$ ($$$1 \\leq j < i$$$) that $$$a_j > k$$$. If no such element $$$a_j$$$ exists, set $$$b_{x} = n+1$$$.  If $$$x > k$$$, set $$$b_{x}$$$ to the last element $$$a_j$$$ ($$$1 \\leq j < i$$$) that $$$a_j \\leq k$$$. If no such element $$$a_j$$$ exists, set $$$b_{x} = 0$$$. Unfortunately, after the sequence $$$b_1, b_2, \\dots, b_n$$$ has been completely computed, the permutation $$$a_1, a_2, \\dots, a_n$$$ and the threshold $$$k$$$ are discarded. Now you only have the sequence $$$b_1, b_2, \\dots, b_n$$$. Your task is to find any possible permutation $$$a_1, a_2, \\dots, a_n$$$ and threshold $$$k$$$ that produce the sequence $$$b_1, b_2, \\dots, b_n$$$. It is guaranteed that there exists at least one pair of permutation $$$a_1, a_2, \\dots, a_n$$$ and threshold $$$k$$$ that produce the sequence $$$b_1, b_2, \\dots, b_n$$$.A permutation of integers from $$$1$$$ to $$$n$$$ is a sequence of length $$$n$$$ which contains all integers from $$$1$$$ to $$$n$$$ exactly once. ",
    "editorial": "For readability and convenience of the readers who are interested in the checker of this problem, we consider this problem without assuming the existence of the threshold $$$k$$$ and permutation $$$a_1, a_2, \\dots, a_n$$$.Let's first determine the value of $$$k$$$. A valid sequence $$$b$$$ must satisfy that   For every $$$i \\leq k$$$, we have $$$b_i > i$$$;  For every $$$i > k$$$, we have $$$b_i < i$$$.  With this, we find the largest index $$$i_0$$$ such that $$$b_{i_0} > i_0$$$, and then set $$$k = i_0$$$. We can check whether the sequence $$$b$$$ satisfies that   For every $$$i \\leq k$$$, we have $$$b_i > k$$$;  For every $$$i > k$$$, we have $$$b_i \\leq k$$$.  If not, report no solution.Now $$$k$$$ is fixed. We are going to find a sequence $$$a$$$ that produces sequence $$$b$$$ with respect to $$$k$$$. We construct a directed graph $$$G$$$ with $$$n+2$$$ vertices numbered from $$$0$$$ to $$$n+1$$$ as follows.  For every $$$1 \\leq i \\leq n$$$, add an edge from vertex $$$b_i$$$ to vertex $$$i$$$. It is clear that there are $$$n$$$ edges in graph $$$G$$$. We consider two parts of the graph $$$G$$$, set $$$A$$$ of vertices from $$$0$$$ to $$$k$$$ and set $$$B$$$ of vertices from $$$k+1$$$ to $$$n+1$$$. Then every directed edge is either from $$$A$$$ to $$$B$$$ or from $$$B$$$ to $$$A$$$. Claim B.1. There is exactly one vertex between vertex $$$0$$$ and vertex $$$n+1$$$ that is isolated (that is, no edges are incident to it). Proof: First of all, we show that it cannot be the case that both vertex $$$0$$$ and vertex $$$n+1$$$ are isolated. This is because $$$b_{a_1}$$$ is either $$$0$$$ or $$$n+1$$$ according to its definition. Now suppose both vertex $$$0$$$ and vertex $$$n+1$$$ are not isolated. Then there are two different indexes $$$x$$$ and $$$y$$$ such that $$$b_x = 0$$$ and $$$b_y = n+1$$$ with $$$1 \\leq y \\leq k < x \\leq n$$$. Find two different indexes $$$i$$$ and $$$j$$$ such that $$$a_i = x$$$ and $$$a_j = y$$$.   If $$$i < j$$$, then we have $$$a_i = x > k \\geq a_j = y$$$. By the definition of $$$b_{y}$$$, $$$a_i = x$$$ is a candidate. So $$$b_y \\neq n+1$$$.  If $$$i > j$$$, then we have $$$a_j = y \\leq k < a_i = x$$$. By the definition of $$$b_{x}$$$, $$$a_j = y$$$ is a candidate. So $$$b_x \\neq 0$$$.  Therefore, there is exactly one isolated vertex between vertex $$$0$$$ and vertex $$$n+1$$$. $$$\\Box$$$By Claim B.1, we can just ignore the isolated vertex. After that, there are $$$n+1$$$ vertices and $$$n$$$ edges. It seems like that the graph $$$G$$$ is a tree! Next, we will show that this is true.Claim B.2. The graph $$$G$$$ must not contain loops. That is, $$$G$$$ is a DAG (directed acyclic graph).Proof: There is no edge leading to vertex $$$0$$$ or $$$n + 1$$$. So loops will only occur among vertices from $$$1$$$ to $$$n$$$. Every edge $$$(u, v)$$$ in graph $$$G$$$ for $$$1 \\leq u, v \\leq n$$$ means that, in sequence $$$a$$$, the value of $$$u$$$ is in front of the value of $$$v$$$. Since sequence $$$a$$$ is a permutation, all values appear exactly once. A loop implies that there are two different vertices $$$u$$$ and $$$v$$$ such that $$$u$$$ is in front of $$$v$$$ and $$$v$$$ is in front of $$$u$$$. This is of course imposssible. $$$\\Box$$$According to the construction of graph $$$G$$$, there is at most one edge leading to each vertex. So DAG $$$G$$$ is a rooted tree with vertex $$$0$$$ or $$$n+1$$$, with every edge $$$(u, v)$$$ meaning that $$$u$$$ is the parent of $$$v$$$. Now we have a tree $$$G$$$, and want to find a suitable sequence $$$a$$$.Claim B.3. For every vertex $$$u$$$ in tree $$$G$$$, there is at most one child vertex $$$v$$$ of $$$u$$$ that is not a leaf.Proof: If there are two child vertices $$$v_1$$$ and $$$v_2$$$ of $$$u$$$ that are not leaves, let $$$w_1$$$ and $$$w_2$$$ be child vertices of $$$v_1$$$ and $$$v_2$$$, respectively. Let $$$a^{-1}(x)$$$ the index $$$i$$$ of $$$x$$$ such that $$$a_i = x$$$. In this notation, we have $$$a^{-1}(u) < a^{-1}(v)$$$ for every edge $$$(u, v)$$$ in tree $$$G$$$. Without loss of generality, we assume that $$$a^{-1}(v_1) < a^{-1}(v_2)$$$. Then, we have $$$a^{-1}(v_2) < a^{-1}(w_1)$$$. If this is not true, i.e., $$$a^{-1}(v_2) > a^{-1}(w_1)$$$, then $$$w_1$$$ is a candidate for $$$b_{v_2}$$$, which leads that $$$u$$$ is no longer the parent vertex of $$$v_2$$$.Now we have $$$a^{-1}(v_2) < a^{-1}(w_1)$$$. This means that $$$v_2$$$ is a candidate for $$$b_{w_1}$$$, which leads that $$$v_1$$$ is no longer the parent vertex of $$$w_1$$$. A contradiction! $$$\\Box$$$Now we are ready to give an algorithm to find a suitable sequence $$$a$$$ with tree $$$G$$$, which is rather simple:   Find the BFS order of tree $$$G$$$, with non-leaf vertices visited last.  Sequence $$$a$$$ is then obtained by removing the root (the only non-existing element) from the BFS order. If there are multiple valid BFS orders, any of them is acceptable. It can be shown that sequence $$$a$$$ obtained by the BFS order will produce sequence $$$b$$$ with respect to $$$k$$$, and the time complexity is $$$O(n)$$$. Before processing the BFS, remember to check the graph $$$G$$$ as follows:   There is exactly one isolated vertex between vertex $$$0$$$ and $$$n+1$$$.  The graph $$$G$$$ is a DAG, i.e., no loops exist in graph $$$G$$$.  With the above, graph $$$G$$$ must be a rooted tree. Choose the non-isolated vertex from vertex $$$0$$$ and $$$n+1$$$ as the root.  For every vertex $$$u$$$ in tree $$$G$$$, there is at most one non-leaf child vertex of $$$u$$$. "
}{
    "name": "Hidden Word",
    "code": [
        "725",
        "C"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "implementation",
        "strings"
    ],
    "difficulty": 1600,
    "statement": "Let\u2019s define a grid to be a set of tiles with 2 rows and 13 columns. Each tile has an English letter written in it. The letters don't have to be unique: there might be two or more tiles with the same letter written on them. Here is an example of a grid: ABCDEFGHIJKLMNOPQRSTUVWXYZ We say that two tiles are adjacent if they share a side or a corner. In the example grid above, the tile with the letter 'A' is adjacent only to the tiles with letters 'B', 'N', and 'O'. A tile is not adjacent to itself.A sequence of tiles is called a path if each tile in the sequence is adjacent to the tile which follows it (except for the last tile in the sequence, which of course has no successor). In this example, \"ABC\" is a path, and so is \"KXWIHIJK\". \"MAB\" is not a path because 'M' is not adjacent to 'A'. A single tile can be used more than once by a path (though the tile cannot occupy two consecutive places in the path because no tile is adjacent to itself).You\u2019re given a string s which consists of 27 upper-case English letters. Each English letter occurs at least once in s. Find a grid that contains a path whose tiles, viewed in the order that the path visits them, form the string s. If there\u2019s no solution, print \"Impossible\" (without the quotes).",
    "editorial": "1. The input string s contains 27 letters and it contains every letter in the English alphabet. The English alphabet has 26 letters, so there is exactly one repeated letter.2. If the instances of the repeated letter are adjacent in the string, there can be no solution. That's because every English letter occurs in s and the solution grid contains exactly 26 tiles, so any solution must have all letters distinct. Consider the tile containing the repeated letter. None of the tiles adjacent to it can contain the repeated letter because the letters of the grid are distinct, so the grid doesn't contain s.3. Otherwise, there is a solution. Delete the second occurrence of the repeated letter and write the resulting string in circular order. For example, if the string with the repeated letter deleted is ABCDEFGHIJKLMNOPQRSTUVWXYZ, we write this to the grid:ABCDEFGHIJKLMZYXWVUTSRQPONThen we rotate the grid, one step at a time, until it contains s. For example, if the above grid isn't a valid solution, we next try this:ZABCDEFGHIJKLYXWVUTSRQPONMAnd then this:YZABCDEFGHIJKXWVUTSRQPONMLThis will eventually give us a solution. Suppose the repeated letter lies between G and H in the original string. In each rotation, there are 2 letters adjacent to both G and H in the grid (in the above examples these letters are S and T, then Q and R, then O and P). When we rotate the string by a step, the adjacent letters advance by 1 or 2 steps. Eventually the repeated letter will be adjacent to both G and H, and this will yield a solution."
}{
    "name": "Buttons",
    "code": [
        "268",
        "B"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "Manao is trying to open a rather challenging lock. The lock has n buttons on it and to open it, you should press the buttons in a certain order to open the lock. When you push some button, it either stays pressed into the lock (that means that you've guessed correctly and pushed the button that goes next in the sequence), or all pressed buttons return to the initial position. When all buttons are pressed into the lock at once, the lock opens.Consider an example with three buttons. Let's say that the opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3, the buttons unpress immediately. If you first press button 2, it stays pressed. If you press 1 after 2, all buttons unpress. If you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got two pressed buttons, you only need to press button 1 to open the lock.Manao doesn't know the opening sequence. But he is really smart and he is going to act in the optimal way. Calculate the number of times he's got to push a button in order to open the lock in the worst-case scenario.",
    "editorial": ""
}{
    "name": "Graph and Queries",
    "code": [
        "1416",
        "D"
    ],
    "tags": [
        "data structures",
        "dsu",
        "graphs",
        "implementation",
        "trees"
    ],
    "difficulty": 2600,
    "statement": "You are given an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. Initially there is a single integer written on every vertex: the vertex $$$i$$$ has $$$p_i$$$ written on it. All $$$p_i$$$ are distinct integers from $$$1$$$ to $$$n$$$.You have to process $$$q$$$ queries of two types:  $$$1$$$ $$$v$$$ \u2014 among all vertices reachable from the vertex $$$v$$$ using the edges of the graph (including the vertex $$$v$$$ itself), find a vertex $$$u$$$ with the largest number $$$p_u$$$ written on it, print $$$p_u$$$ and replace $$$p_u$$$ with $$$0$$$;  $$$2$$$ $$$i$$$ \u2014 delete the $$$i$$$-th edge from the graph.  Note that, in a query of the first type, it is possible that all vertices reachable from $$$v$$$ have $$$0$$$ written on them. In this case, $$$u$$$ is not explicitly defined, but since the selection of $$$u$$$ does not affect anything, you can choose any vertex reachable from $$$v$$$ and print its value (which is $$$0$$$). ",
    "editorial": "Basically, we want to transform each \"connected component maximum\" query into \"segment maximum\" query. It can be efficiently done using DSU and processing all queries in reversed order. For simplicity, let's assume all edges will eventually get deleted in the process. If not, you can always add some extra queries at the end. Initially, each vertex is a connected component on its own. We are processing all queries in reverse order. If the current query is of first type, remember the \"boss\" of the corresponding vertex. Otherwise, unite the corresponding vertices accordingly. If we want to unite two bosses $$$a$$$ and $$$b$$$, we create a new fake vertex $$$c$$$ and add edges $$$(a, c)$$$, $$$(b, c)$$$ so that the subtree of $$$c$$$ becomes responsible for both components of $$$a$$$ and $$$b$$$. Notice that we cannot apply small-to-large merging to our DSU, but we are still able to use path-compression heuristic. Now, our DSU-tree is ready. Each query of first type is now a subtree-maximum query and all queries of second type can be ignored. The solution onwards should be pretty straightforward. We first do an Eulerian tour on our tree to transform each subtree into a segment. Using segment tree we are able to efficiently process all queries.Time complexity: $$$O((n + m + q) \\log n)$$$ Space complexity: $$$O(n + m + q)$$$"
}{
    "name": "Messenger",
    "code": [
        "631",
        "D"
    ],
    "tags": [
        "data structures",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ],
    "difficulty": 2100,
    "statement": "Each employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.All the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (li, ci), where li is the length of the i-th block and ci is the corresponding letter. Thus, the string s may be written as the sequence of pairs .Your task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if tptp + 1...tp + |s| - 1 = s, where ti is the i-th character of string t.Note that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as , , ...",
    "editorial": ""
}{
    "name": "Guess The String",
    "code": [
        "1697",
        "D"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "interactive"
    ],
    "difficulty": 1900,
    "statement": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush(stdout) in C++, system.out.flush() in Java, stdout.flush() in Python or flush(output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: https://codeforces.com/blog/entry/45307.The jury has chosen a string $$$s$$$ consisting of $$$n$$$ characters; each character of $$$s$$$ is a lowercase Latin letter. Your task is to guess this string; initially, you know only its length.You may ask queries of two types:  $$$1$$$ $$$i$$$ \u2014 the query of the first type, where $$$i$$$ is an integer from $$$1$$$ to $$$n$$$. In response to this query, the jury will tell you the character $$$s_i$$$;  $$$2$$$ $$$l$$$ $$$r$$$ \u2014 the query of the second type, where $$$l$$$ and $$$r$$$ are integers such that $$$1 \\le l \\le r \\le n$$$. In response to this query, the jury will tell you the number of different characters among $$$s_l, s_{l+1}, \\dots, s_r$$$. You are allowed to ask no more than $$$26$$$ queries of the first type, and no more than $$$6000$$$ queries of the second type. Your task is to restore the string $$$s$$$.For each test in this problem, the string $$$s$$$ is fixed beforehand, and will be the same for every submission.",
    "editorial": "There are several ways to solve this problem. The model solution does it as follows:Restore the characters of $$$s$$$ from left to right. The first character is restored by query ? 1 1. For each of the next characters, let's ask if this character is new (by querying ? 2 1 i and comparing the result with the number of different characters on the segment $$$[1, i-1]$$$). If it's new, ask ? 1 i to obtain the $$$i$$$-th character (there will be at most $$$26$$$ such queries).Otherwise, we can find the previous occurrence of the $$$i$$$-th character with binary search. Let $$$f(x,y)$$$ be the number of different characters from position $$$x$$$ to position $$$y$$$. If we want to find the previous occurrence of the $$$i$$$-th character, we need to find the last index $$$j$$$ such that $$$f(j,i) = f(j,i-1)$$$. Since the value $$$f(j,i) - f(j,i-1)$$$ does not decrease when we increase $$$j$$$, we can find the last $$$j$$$ such that $$$f(j,i) - f(j,i-1) = 0$$$, with binary search.Unfortunately, the number of queries of type $$$2$$$ will be too large if we just use binary search over the whole segment $$$[1,i-1]$$$. To decrease the number of queries, we can use the fact that the value of $$$j$$$ we are interested in is the last occurrence of some character we already met; there are at most $$$26$$$ such values, and binary search among them will need only $$$5$$$ iterations."
}{
    "name": "E-reader Display",
    "code": [
        "126",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 2000,
    "statement": "After years of hard work scientists invented an absolutely new e-reader display. The new display has a larger resolution, consumes less energy and its production is cheaper. And besides, one can bend it. The only inconvenience is highly unusual management. For that very reason the developers decided to leave the e-readers' software to programmers.The display is represented by n \u00d7 n square of pixels, each of which can be either black or white. The display rows are numbered with integers from 1 to n upside down, the columns are numbered with integers from 1 to n from the left to the right. The display can perform commands like \"x, y\". When a traditional display fulfills such command, it simply inverts a color of (x, y), where x is the row number and y is the column number. But in our new display every pixel that belongs to at least one of the segments (x, x) - (x, y) and (y, y) - (x, y) (both ends of both segments are included) inverts a color.For example, if initially a display 5 \u00d7 5 in size is absolutely white, then the sequence of commands (1, 4), (3, 5), (5, 1), (3, 3) leads to the following changes:  You are an e-reader software programmer and you should calculate minimal number of commands needed to display the picture. You can regard all display pixels as initially white.",
    "editorial": ""
}{
    "name": "Win or Freeze",
    "code": [
        "150",
        "A"
    ],
    "tags": [
        "games",
        "math",
        "number theory"
    ],
    "difficulty": 1400,
    "statement": "You can't possibly imagine how cold our friends are this winter in Nvodsk! Two of them play the following game to warm up: initially a piece of paper has an integer q. During a move a player should write any integer number that is a non-trivial divisor of the last written number. Then he should run this number of circles around the hotel. Let us remind you that a number's divisor is called non-trivial if it is different from one and from the divided number itself. The first person who can't make a move wins as he continues to lie in his warm bed under three blankets while the other one keeps running. Determine which player wins considering that both players play optimally. If the first player wins, print any winning first move.",
    "editorial": ""
}{
    "name": "Vladik and fractions",
    "code": [
        "743",
        "C"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "difficulty": 1500,
    "statement": "Vladik and Chloe decided to determine who of them is better at math. Vladik claimed that for any positive integer n he can represent fraction  as a sum of three distinct positive fractions in form .Help Vladik with that, i.e for a given n find three distinct positive integers x, y and z such that . Because Chloe can't check Vladik's answer if the numbers are large, he asks you to print numbers not exceeding 109.If there is no such answer, print -1.",
    "editorial": "Note that for n = 1 there is no solution, and for n > 1 there is solution x = n, y = n + 1, z = n\u00b7(n + 1).To come to this solution, represent  and reduce the problem to represent  as a sum of two fractions. Let's find the difference between  and  and get a fraction , so the solution is "
}{
    "name": "Set Theory",
    "code": [
        "856",
        "A"
    ],
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "difficulty": 1600,
    "statement": "Masha and Grisha like studying sets of positive integers.One day Grisha has written a set A containing n different integers ai on a blackboard. Now he asks Masha to create a set B containing n different integers bj such that all n2 integers that can be obtained by summing up ai and bj for all possible pairs of i and j are different.Both Masha and Grisha don't like big numbers, so all numbers in A are from 1 to 106, and all numbers in B must also be in the same range.Help Masha to create the set B that satisfies Grisha's requirement.",
    "editorial": "\u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0441\u043f\u043e\u0439\u043b\u0435\u0440\u044b: \u043e\u0442\u0432\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 YES, \u043f\u043e\u0447\u0435\u043c\u0443\u00a0\u2014 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u0411\u0443\u0434\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c bj \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0441\u0435\u0445 ai \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 bj, \u0432\u0441\u0435 \u0441\u0443\u043c\u043c\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u0430 O(max(B)\u00b7n2).\u041e\u0446\u0435\u043d\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 B. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043e\u043d \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 106 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438. \u0417\u0430\u0442\u0435\u043c, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e: ai1 + bj1 = ai2 + bj2, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f B. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c: bj2 = bj1 - (ai2 - ai1). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043b\u044e\u0431\u044b\u0445 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 B \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 A. \u0412 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 A \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c O(n2) \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0435\u0439, \u0438\u0437 \u0447\u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e max(B) \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c O(n2) \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\u0418\u0437 \u0432\u044b\u0448\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430 O(n4) \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442, \u0447\u0442\u043e \u043d\u0435 \u0443\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435? \u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432, \u0438 \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e. \u0417\u0430\u0432\u0435\u0434\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 bad, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u043e\u0442\u043c\u0435\u0447\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 B. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 bj, \u0435\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043e \u0432 bad, \u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442. \u041a\u0430\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u0443\u0434\u0435\u0442 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0440\u0430\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442? \u0422\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 bj, \u043d\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 A. (\u0422\u0430\u043a \u043a\u0430\u043a bj \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 n2 / 2) \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e bj \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043c\u044b \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0431\u0435\u0440\u0435\u043c \u0432 \u043e\u0442\u0432\u0435\u0442. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 O(max(B) + n3) \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442. \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e max(B) \u0432 \u0442\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u0437\u043e\u0439\u0434\u0435\u0442 n3 / 2, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u043e\u0431\u0449\u0430\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u00a0\u2014O(n3) \u043d\u0430 \u0442\u0435\u0441\u0442.\u041f\u043e\u0441\u043b\u0435\u0441\u043b\u043e\u0432\u0438\u0435: \u041a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0437\u0430 O(n4) \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a, \u043d\u0435 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043e\u0442\u0441\u0435\u0447\u044c \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0438\u0441\u0430\u0442\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0432 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e, \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u0438\u0445\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f."
}{
    "name": "Naming Company",
    "code": [
        "794",
        "C"
    ],
    "tags": [
        "games",
        "greedy",
        "sortings"
    ],
    "difficulty": 1800,
    "statement": "Oleg the client and Igor the analyst are good friends. However, sometimes they argue over little things. Recently, they started a new company, but they are having trouble finding a name for the company.To settle this problem, they've decided to play a game. The company name will consist of n letters. Oleg and Igor each have a set of n letters (which might contain multiple copies of the same letter, the sets can be different). Initially, the company name is denoted by n question marks. Oleg and Igor takes turns to play the game, Oleg moves first. In each turn, a player can choose one of the letters c in his set and replace any of the question marks with c. Then, a copy of the letter c is removed from his set. The game ends when all the question marks has been replaced by some letter.For example, suppose Oleg has the set of letters {i, o, i} and Igor has the set of letters {i, m, o}. One possible game is as follows :Initially, the company name is ???.Oleg replaces the second question mark with 'i'. The company name becomes ?i?. The set of letters Oleg have now is {i, o}.Igor replaces the third question mark with 'o'. The company name becomes ?io. The set of letters Igor have now is {i, m}.Finally, Oleg replaces the first question mark with 'o'. The company name becomes oio. The set of letters Oleg have now is {i}.In the end, the company name is oio.Oleg wants the company name to be as lexicographically small as possible while Igor wants the company name to be as lexicographically large as possible. What will be the company name if Oleg and Igor always play optimally?A string s = s1s2...sm is called lexicographically smaller than a string t = t1t2...tm (where s \u2260 t) if si < ti where i is the smallest index such that si \u2260 ti. (so sj = tj for all j < i)",
    "editorial": ""
}{
    "name": "Blocks and Sensors",
    "code": [
        "1320",
        "F"
    ],
    "tags": [
        "brute force"
    ],
    "difficulty": 3500,
    "statement": "Polycarp plays a well-known computer game (we won't mention its name). Every object in this game consists of three-dimensional blocks \u2014 axis-aligned cubes of size $$$1 \\times 1 \\times 1$$$. These blocks are unaffected by gravity, so they can float in the air without support. The blocks are placed in cells of size $$$1 \\times 1 \\times 1$$$; each cell either contains exactly one block or is empty. Each cell is represented by its coordinates $$$(x, y, z)$$$ (the cell with these coordinates is a cube with opposite corners in $$$(x, y, z)$$$ and $$$(x + 1, y + 1, z + 1)$$$) and its contents $$$a_{x, y, z}$$$; if the cell is empty, then $$$a_{x, y, z} = 0$$$, otherwise $$$a_{x, y, z}$$$ is equal to the type of the block placed in it (the types are integers from $$$1$$$ to $$$2 \\cdot 10^5$$$).Polycarp has built a large structure consisting of blocks. This structure can be enclosed in an axis-aligned rectangular parallelepiped of size $$$n \\times m \\times k$$$, containing all cells $$$(x, y, z)$$$ such that $$$x \\in [1, n]$$$, $$$y \\in [1, m]$$$, and $$$z \\in [1, k]$$$. After that, Polycarp has installed $$$2nm + 2nk + 2mk$$$ sensors around this parallelepiped. A sensor is a special block that sends a ray in some direction and shows the type of the first block that was hit by this ray (except for other sensors). The sensors installed by Polycarp are adjacent to the borders of the parallelepiped, and the rays sent by them are parallel to one of the coordinate axes and directed inside the parallelepiped. More formally, the sensors can be divided into $$$6$$$ types:  there are $$$mk$$$ sensors of the first type; each such sensor is installed in $$$(0, y, z)$$$, where $$$y \\in [1, m]$$$ and $$$z \\in [1, k]$$$, and it sends a ray that is parallel to the $$$Ox$$$ axis and has the same direction;  there are $$$mk$$$ sensors of the second type; each such sensor is installed in $$$(n + 1, y, z)$$$, where $$$y \\in [1, m]$$$ and $$$z \\in [1, k]$$$, and it sends a ray that is parallel to the $$$Ox$$$ axis and has the opposite direction;  there are $$$nk$$$ sensors of the third type; each such sensor is installed in $$$(x, 0, z)$$$, where $$$x \\in [1, n]$$$ and $$$z \\in [1, k]$$$, and it sends a ray that is parallel to the $$$Oy$$$ axis and has the same direction;  there are $$$nk$$$ sensors of the fourth type; each such sensor is installed in $$$(x, m + 1, z)$$$, where $$$x \\in [1, n]$$$ and $$$z \\in [1, k]$$$, and it sends a ray that is parallel to the $$$Oy$$$ axis and has the opposite direction;  there are $$$nm$$$ sensors of the fifth type; each such sensor is installed in $$$(x, y, 0)$$$, where $$$x \\in [1, n]$$$ and $$$y \\in [1, m]$$$, and it sends a ray that is parallel to the $$$Oz$$$ axis and has the same direction;  finally, there are $$$nm$$$ sensors of the sixth type; each such sensor is installed in $$$(x, y, k + 1)$$$, where $$$x \\in [1, n]$$$ and $$$y \\in [1, m]$$$, and it sends a ray that is parallel to the $$$Oz$$$ axis and has the opposite direction. Polycarp has invited his friend Monocarp to play with him. Of course, as soon as Monocarp saw a large parallelepiped bounded by sensor blocks, he began to wonder what was inside of it. Polycarp didn't want to tell Monocarp the exact shape of the figure, so he provided Monocarp with the data from all sensors and told him to try guessing the contents of the parallelepiped by himself.After some hours of thinking, Monocarp has no clue about what's inside the sensor-bounded space. But he does not want to give up, so he decided to ask for help. Can you write a program that will analyze the sensor data and construct any figure that is consistent with it?",
    "editorial": "Initially fill each cell with a colorless block, and then try to paint blocks and delete them if they definitely contradict the sensor data.We have to delete a block if:  it is observed by a sensor which should see no blocks;  it is observed by at least two sensors that report different block types. In any of these cases, we delete a block. Then we update all sensors which were looking at it: for each of them, find the next block which they are looking at, and maybe delete it (if the information for it is contradictory). If this results in deleting all blocks for a sensor that should see a block, then the answer is $$$-1$$$.If this process terminates without any contradictions, we can construct the answer. Now all sensors that should not see any blocks don't see them, and each block observed by sensors can be assigned a type that does not contradict the sensor data. If some block is not observed by sensors at all, we may assign any color to it (or even delete it).To maintain blocks that should be deleted, we may use a BFS-like approach with a queue, or a DFS-like function that deletes a block, updates the sensors looking at it, and maybe calls itself recursively for the blocks that have to be deleted after the updates."
}{
    "name": "Vasya And Array",
    "code": [
        "1187",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "Vasya has an array $$$a_1, a_2, \\dots, a_n$$$.You don't know this array, but he told you $$$m$$$ facts about this array. The $$$i$$$-th fact is a triple of numbers $$$t_i$$$, $$$l_i$$$ and $$$r_i$$$ ($$$0 \\le t_i \\le 1, 1 \\le l_i < r_i \\le n$$$) and it means:  if $$$t_i=1$$$ then subbarray $$$a_{l_i}, a_{l_i + 1}, \\dots, a_{r_i}$$$ is sorted in non-decreasing order;  if $$$t_i=0$$$ then subbarray $$$a_{l_i}, a_{l_i + 1}, \\dots, a_{r_i}$$$ is not sorted in non-decreasing order. A subarray is not sorted if there is at least one pair of consecutive elements in this subarray such that the former is greater than the latter. For example if $$$a = [2, 1, 1, 3, 2]$$$ then he could give you three facts: $$$t_1=1, l_1=2, r_1=4$$$ (the subarray $$$[a_2, a_3, a_4] = [1, 1, 3]$$$ is sorted), $$$t_2=0, l_2=4, r_2=5$$$ (the subarray $$$[a_4, a_5] = [3, 2]$$$ is not sorted), and $$$t_3=0, l_3=3, r_3=5$$$ (the subarray $$$[a_3, a_5] = [1, 3, 2]$$$ is not sorted).You don't know the array $$$a$$$. Find any array which satisfies all the given facts.",
    "editorial": "Let's consider array $$$b_1, b_2, \\dots , b_{n-1}$$$, such that $$$b_i = a_{i + 1} - a_i$$$.Then subarray $$$a_l, a_{l+1}, \\dots , a_r$$$ is sorted in non-decreasing order if and only if all elements $$$b_l, b_{l + 1} , \\dots , b_{r - 1}$$$ are greater or equal to zero.So if we have fact $$$t_i = 1, l_i, r_i$$$, then all elements $$$b_{l_i}, b_{l_i + 1}, \\dots , b_{r_i - 1}$$$ must be greater or equal to zero.Let's create the following array $$$b$$$: $$$b_i = 0$$$ if there is such a fact $$${t_j, l_j, r_j}$$$ that $$$t_j = 1, l_j \\le i < r_j$$$, and $$$b_i = -1$$$ otherwise.After that we create the following array $$$a$$$: $$$a_1 = n$$$, and for all other indexes $$$a_i = a_{i - 1} + b_{i - 1}$$$.This array $$$a$$$ satisfies all facts $$${t_i, l_i, r_i}$$$ such that $$$t_i = 1$$$. So all we have to do is check that all remaining facts are satisfied."
}{
    "name": "Keanu Reeves",
    "code": [
        "1189",
        "A"
    ],
    "tags": [
        "strings"
    ],
    "difficulty": 800,
    "statement": "After playing Neo in the legendary \"Matrix\" trilogy, Keanu Reeves started doubting himself: maybe we really live in virtual reality? To find if this is true, he needs to solve the following problem.Let's call a string consisting of only zeroes and ones good if it contains different numbers of zeroes and ones. For example, 1, 101, 0000 are good, while 01, 1001, and 111000 are not good.We are given a string $$$s$$$ of length $$$n$$$ consisting of only zeroes and ones. We need to cut $$$s$$$ into minimal possible number of substrings $$$s_1, s_2, \\ldots, s_k$$$ such that all of them are good. More formally, we have to find minimal by number of strings sequence of good strings $$$s_1, s_2, \\ldots, s_k$$$ such that their concatenation (joining) equals $$$s$$$, i.e. $$$s_1 + s_2 + \\dots + s_k = s$$$.For example, cuttings 110010 into 110 and 010 or into 11 and 0010 are valid, as 110, 010, 11, 0010 are all good, and we can't cut 110010 to the smaller number of substrings as 110010 isn't good itself. At the same time, cutting of 110010 into 1100 and 10 isn't valid as both strings aren't good. Also, cutting of 110010 into 1, 1, 0010 isn't valid, as it isn't minimal, even though all $$$3$$$ strings are good.Can you help Keanu? We can show that the solution always exists. If there are multiple optimal answers, print any.",
    "editorial": "We've added challenges(mostly not hard) to some tasks. Feel free to share solutions and ask any questions in comments!Keanu ReevesIf the string is good, then answer it's itself. Otherwise, there are at least two strings in answer, and we can print substring without its last symbol and its last symbol separately. Complexity $$$O(n)$$$.// code"
}{
    "name": "Guess the Root",
    "code": [
        "1155",
        "E"
    ],
    "tags": [
        "brute force",
        "interactive",
        "math"
    ],
    "difficulty": 2200,
    "statement": "Jury picked a polynomial $$$f(x) = a_0 + a_1 \\cdot x + a_2 \\cdot x^2 + \\dots + a_k \\cdot x^k$$$. $$$k \\le 10$$$ and all $$$a_i$$$ are integer numbers and $$$0 \\le a_i < 10^6 + 3$$$. It's guaranteed that there is at least one $$$i$$$ such that $$$a_i > 0$$$.Now jury wants you to find such an integer $$$x_0$$$ that $$$f(x_0) \\equiv 0 \\mod (10^6 + 3)$$$ or report that there is not such $$$x_0$$$.You can ask no more than $$$50$$$ queries: you ask value $$$x_q$$$ and jury tells you value $$$f(x_q) \\mod (10^6 + 3)$$$.Note that printing the answer doesn't count as a query.",
    "editorial": "Since $$$10^6 + 3$$$ is a prime and degree $$$k$$$ of the polynomial is small enough, we can get this polynomial in our hands asking $$$k + 1$$$ queries in different points. Knowing values $$$f(x_i)$$$ for $$$x_1, x_2, \\dots, x_{k + 1}$$$, we can interpolate $$$f$$$ by various ways. For example, we can construct a system of linear equations thinking of $$$a_i$$$ as variables. In other words, we know, that $$$a_0 \\cdot x_i^0 + a_1 \\cdot x_i^1 + \\dots + a_k \\cdot x_i^k = f(x_i)$$$ for $$$i = 1 \\dots (k+1)$$$, also we know $$$x_i^l$$$ and $$$f(x_i)$$$. So we can solve this system using Gaussian elimination in $$$O(k^3)$$$.Now, knowing the polynomial $$$f(x)$$$ we can locally brute force all possible candidates for $$$x_0$$$, since there is only $$$10^6 + 3$$$ such candidates, and print the one we found."
}{
    "name": "Divan and Kostomuksha (easy version)",
    "code": [
        "1614",
        "D1"
    ],
    "tags": [
        "dp",
        "number theory"
    ],
    "difficulty": 2100,
    "statement": "This is the easy version of the problem. The only difference is maximum value of $$$a_i$$$.Once in Kostomuksha Divan found an array $$$a$$$ consisting of positive integers. Now he wants to reorder the elements of $$$a$$$ to maximize the value of the following function: $$$$$$\\sum_{i=1}^n \\operatorname{gcd}(a_1, \\, a_2, \\, \\dots, \\, a_i),$$$$$$ where $$$\\operatorname{gcd}(x_1, x_2, \\ldots, x_k)$$$ denotes the greatest common divisor of integers $$$x_1, x_2, \\ldots, x_k$$$, and $$$\\operatorname{gcd}(x) = x$$$ for any integer $$$x$$$.Reordering elements of an array means changing the order of elements in the array arbitrary, or leaving the initial order.Of course, Divan can solve this problem. However, he found it interesting, so he decided to share it with you.",
    "editorial": "Let's solve the dynamic programming problem. Let $$$dp_i$$$ be the maximum answer for all arrays, the last element of which is divisible by $$$i$$$. Let's calculate the dynamics from $$$C$$$ to $$$1$$$, where $$$C$$$ is the maximum value of $$$a_i$$$. Initially, $$$dp_i = cnt_i \\cdot i$$$, where $$$cnt_i$$$ is the amount of $$$a_i = i$$$. How do we recalculate our dynamic programming? $$$dp_i = dp_j \\cdot (cnt_i - cnt_j)$$$, for all $$$j$$$ such that $$$j$$$ $$$mod$$$ $$$i = 0$$$ (i.e. $$$j$$$ is divisible by $$$i$$$). In this dynamic, we iterate over the past change of our $$$gcd$$$ on the prefix, and greedily add all possible elements.The resulting asymptotics in time is $$$\\mathcal{O}(C\\log{}C)$$$."
}{
    "name": "Tree Recovery",
    "code": [
        "1696",
        "F"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 2600,
    "statement": "Fishingprince loves trees. A tree is a connected undirected graph without cycles.Fishingprince has a tree of $$$n$$$ vertices. The vertices are numbered $$$1$$$ through $$$n$$$. Let $$$d(x,y)$$$ denote the shortest distance on the tree from vertex $$$x$$$ to vertex $$$y$$$, assuming that the length of each edge is $$$1$$$.However, the tree was lost in an accident. Fortunately, Fishingprince still remembers some information about the tree. More specifically, for every triple of integers $$$x,y,z$$$ ($$$1\\le x<y\\le n$$$, $$$1\\le z\\le n$$$) he remembers whether $$$d(x,z)=d(y,z)$$$ or not.Help him recover the structure of the tree, or report that no tree satisfying the constraints exists.",
    "editorial": "Construct a graph with $$$\\binom n2$$$ vertices $$$(1,2),(1,3),\\dots,(n-1,n)$$$.If $$$dis(a,b)=dis(b,c)$$$, link an undirected edge between $$$(a,b)$$$ and $$$(b,c)$$$.Observe that all edges in the tree form a connected component of size exactly $$$n-1$$$ in the graph!Find all components of size $$$n-1$$$ and try if all vertices in it form a tree that satisfy the input. There are at most $$$\\dfrac n2$$$ such components, so complexity is $$$O(n^4)$$$. Proper pre-computation and the usage of bitsets can reduce the complexity to $$$O(n^4/w)$$$."
}{
    "name": "Nora's Toy Boxes",
    "code": [
        "1292",
        "F"
    ],
    "tags": [
        "bitmasks",
        "combinatorics",
        "dp"
    ],
    "difficulty": 3500,
    "statement": "SIHanatsuka - EMber SIHanatsuka - ATONEMENTBack in time, the seven-year-old Nora used to play lots of games with her creation ROBO_Head-02, both to have fun and enhance his abilities.One day, Nora's adoptive father, Phoenix Wyle, brought Nora $$$n$$$ boxes of toys. Before unpacking, Nora decided to make a fun game for ROBO.She labelled all $$$n$$$ boxes with $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ and asked ROBO to do the following action several (possibly zero) times:  Pick three distinct indices $$$i$$$, $$$j$$$ and $$$k$$$, such that $$$a_i \\mid a_j$$$ and $$$a_i \\mid a_k$$$. In other words, $$$a_i$$$ divides both $$$a_j$$$ and $$$a_k$$$, that is $$$a_j \\bmod a_i = 0$$$, $$$a_k \\bmod a_i = 0$$$.  After choosing, Nora will give the $$$k$$$-th box to ROBO, and he will place it on top of the box pile at his side. Initially, the pile is empty.  After doing so, the box $$$k$$$ becomes unavailable for any further actions. Being amused after nine different tries of the game, Nora asked ROBO to calculate the number of possible different piles having the largest amount of boxes in them. Two piles are considered different if there exists a position where those two piles have different boxes.Since ROBO was still in his infant stages, and Nora was still too young to concentrate for a long time, both fell asleep before finding the final answer. Can you help them?As the number of such piles can be very large, you should print the answer modulo $$$10^9 + 7$$$.",
    "editorial": "KURORAK - Jakarta PROGRESSION 3R2 - Starlight (KIV\u039b Remix)We consider a directed graph $$$G$$$, where we draw an edge from vertex $$$i$$$ to vertex $$$j$$$ if $$$a_i \\mid a_j$$$. Notice that $$$G$$$ is a DAG and is transitive (if $$$(u, v), (v, w) \\in G$$$ then $$$(u, w) \\in G$$$).For each vertex, we consider two states: \"on\" (not deleted) and \"off\" (deleted). An edge is \"on\" if both end vertices are not deleted, and \"off\" otherwise. The operation is equivalent to choosing a vertices triple $$$(u, v, w)$$$ such that $$$u$$$, $$$v$$$, $$$w$$$ are on and $$$(u, v), (u, w) \\in G$$$; then turn off vertex $$$w$$$ and append $$$a_w$$$ to the end of $$$b$$$.We first solve the problem for a weakly connected component $$$C$$$ (only choosing vertices triple belong to this component in each operation). Define $$$S$$$ the set of all vertices with no incoming edges, and $$$T$$$ the set of remaining vertices ($$$T = C - S$$$). Obviously, vertices in $$$S$$$ can't be turned off. We need to figure out the maximum number of vertices in $$$T$$$ we can turn off.We consider the reversed process. Initially, some vertices in $$$T$$$ are turned off, and we can turn on a vertex with the following operation: choose a vertices triple $$$(u, v, w)$$$ such that $$$u$$$, $$$v$$$ are on, $$$w$$$ is off, and $$$(u, v), (u, w) \\in G$$$; then turn on $$$w$$$ and append $$$a_w$$$ to the beginning of $$$b$$$. Lemma 1: For each vertex $$$u \\in T$$$, there exist a vertex in $$$S$$$ that has an outgoing edge to $$$u$$$.Proof:Consider a vertex $$$u \\in T$$$.   If $$$u$$$ has no incoming edge from another vertex in $$$T$$$, $$$u$$$ must has an incoming edge from a vertex in $$$S$$$ (if not, $$$u$$$ have no incoming edge, which mean $$$u$$$ should be in $$$S$$$ instead of $$$T$$$, contradiction).  Otherwise, let $$$v$$$ the vertex with minimum $$$a_v$$$ among all vertices in $$$T$$$ with an outgoing edge to $$$u$$$. $$$v$$$ has no incoming edge from another vertex in $$$T$$$, so there exist a vertex $$$s \\in S$$$ that has an outgoing edge to $$$v$$$. Since $$$G$$$ is transitive and $$$(v, u), (s, v) \\in G$$$, $$$s$$$ has an outgoing edge to $$$u$$$. $$$\\blacksquare$$$   Lemma 2: If at least one vertex in $$$T$$$ is on, we can turn all other vertices in $$$T$$$ on.Proof:Let's $$$X$$$ the set of all vertices in $$$T$$$ that is currently on, and $$$Y$$$ the set of remaining vertices in $$$T$$$ ($$$Y = T - X$$$). We will prove that, if $$$X$$$ is not empty, we can always turn on a vertex in $$$Y$$$. If this is true, starting from the state where $$$X$$$ contain only one vertex (and $$$Y$$$ contain the remaining vertices of $$$T$$$), one can repeat turning on a vertex in $$$Y$$$ until all vertices in $$$T$$$ are on.To prove it, we need to show that there exist a vertex in $$$S$$$ that has an outgoing edge to some vertex in $$$X$$$ and some vertex in $$$Y$$$ (so we can choose the triple of three mentioned vertices to turn on a vertex in $$$Y$$$). Consider two cases:  Case 1: There exist some edge $$$(v, w)$$$ with $$$v \\in X$$$ and $$$w \\in Y$$$.Let $$$s$$$ a vertex in $$$S$$$ that has an outgoing edge to $$$v$$$. Since $$$G$$$ is transitive and $$$(s, v)$$$, $$$(v, w)$$$ are in $$$G$$$, $$$(s, w)$$$ are also in $$$G$$$. In other word, $$$s \\in S$$$ has an outgoing edge to both $$$v \\in X$$$ and $$$w \\in Y$$$.   Case 2: There is no edge from a vertex in $$$X$$$ to a vertex in $$$Y$$$. In this case, if there exist no vertex in $$$S$$$ that has an outgoing edge to some vertex in $$$X$$$ and some vertex in $$$Y$$$, the component would be divided into two smaller component (one with all vertices in $$$X$$$ with their incoming vertices, one with all vertices in $$$Y$$$ with their incoming vertices). This contradict the fact that $$$S$$$, $$$X$$$ and $$$Y$$$ are weakly connected. $$$\\blacksquare$$$ The lemma above give us the maximum length of sequence $$$B$$$ we can construct: $$$|T| - 1$$$. Now we need to count the number of such sequence $$$B$$$. Equivalently, for each vertex $$$u \\in T$$$, we need to count the number of orders to turn on all other vertices in $$$T$$$ (given that $$$u$$$ is initially on and all other vertices in $$$T$$$ are initially off).Let $$$s_1, s_2, \\ldots, s_p$$$ the vertices in $$$S$$$ and $$$t_1, t_2, \\ldots, t_m$$$ the vertices in $$$T$$$. First, how can we know whether we can turn on a vertex in $$$T$$$, without having to consider the states of other vertices in $$$T$$$?Lemma 3: When perform the above operation, it is sufficient to consider only all triples $$$(u, v, w)$$$ such that $$$u \\in S$$$ and $$$v, w \\in T$$$.Proof:For a vertex $$$w$$$ in $$$T$$$ that is off, assume that we can turn on $$$w$$$ by choosing a triple $$$(u, v, w)$$$ such that $$$u, v \\in T$$$. In other to choose the triple, $$$u$$$, $$$v$$$ must be on and $$$(u, v), (u, w) \\in G$$$. Let $$$s$$$ the vertex in $$$S$$$ that has an outgoing edge to $$$u$$$ ($$$s$$$ is always on since $$$s \\in S$$$). Since the graph is transitive, $$$s$$$ also has outgoing edges to $$$v$$$ and $$$w$$$. Therefore, we can turn on $$$w$$$ by choosing the triple $$$(s, v, w)$$$ instead. $$$\\blacksquare$$$  With the above lemma, it is sufficient to only consider, for each vertex $$$u \\in S$$$, whether there is an on outgoing edge from $$$u$$$. We can use a bitmask of length $$$p$$$ to represent this information, with $$$x$$$-th bit equal $$$1$$$ if $$$s_x$$$ has an on outgoing edge (and equal $$$0$$$ otherwise). For each vertex $$$t_i \\in T$$$, let $$$inMask[i]$$$ the bitmask of length $$$p$$$, with $$$x$$$-th bit equal $$$1$$$ if $$$s_x$$$ has an outgoing edge to $$$t_i$$$ in $$$G$$$.Let $$$dp[mask][k]$$$ the number of distinct box piles of length $$$k$$$ ROBO can have, with the $$$x$$$-th bit of $$$mask$$$ equals $$$1$$$ if $$$s_x$$$ has an on outgoing edge to a vertex in $$$T$$$ that is turned on. For a vertex $$$t_j$$$ that is currently off, we can turn on $$$t_j$$$ if $$$inMask[j] \\; \\& \\; mask \\neq 0$$$.There are two cases:  Turn on a currently-off vertex $$$t_j$$$ in a way that $$$mask$$$ is expanded (some bit(s) $$$0$$$ turn into bit(s) $$$1$$$). To archive this, we must select $$$t_j$$$ in such a way that $$$inMask[j]$$$ must not be a subset of $$$mask$$$, and we can turn on $$$t_j$$$ (if a $$$t_j$$$ satisfy these two conditions, we know for sure that $$$t_j$$$ is currently off). Therefore, for $$$1 \\le j \\leq m$$$ such that $$$inMask[j] \\nsubseteq mask$$$ and $$$inMask[j] \\; \\& \\; mask \\neq 0$$$, we update the following:$$$$$$dp[mask \\; | \\; inMask[j]][k + 1] = dp[mask \\; | \\; inMask[j]][k + 1] + dp[mask][k]$$$$$$  Turn on a currently-off vertex $$$t_j$$$ in a way that $$$mask$$$ is not expanded. Let $$$cnt(mask)$$$ be the number of indices j such that $$$inMask[j] \\subseteq mask$$$. We can turn on one of the $$$cnt(mask) - k$$$ vertices that is currently off. Therefore, we update the following:$$$$$$dp[mask][k + 1] = dp[mask][k + 1] + dp[mask][k] * (cnt(mask) - k)$$$$$$ To solve the general case, we can calculate the number of orders for each weakly connected component separately and then combine the result with some combinatorics formula.Complexity: $$$O(2^r * n^2)$$$, with $$$r$$$ the maximum number of vertices with no incoming vertices (number of vertices in set $$$S$$$) among all weakly connected component. We will prove that $$$r \\leq \\frac{X}{4}$$$ (where $$$X$$$ is the constraint of $$$n$$$ and $$$a_i$$$), therefore the algorithm fit the given time limit.Proof:For simplicity, assume that $$$X$$$ is divisible by $$$4$$$. Let's focus only on the weakly connected component $$$C$$$ with maximum number of vertices (which will equal $$$r$$$). Let's define $$$S$$$ and $$$T$$$ in the same manner as the above solution. Notice that, for all $$$x$$$ from $$$\\frac{X}{2}$$$ to $$$X$$$, if $$$x$$$ in $$$S$$$, then $$$x$$$ is a separate weakly connected component. Therefore, all numbers in $$$S$$$ should range from $$$1$$$ to $$$\\frac{X}{2}$$$.On another hand, there should be no number in $$$S$$$ that divide another one in $$$S$$$. In other word, consider the divisibility graph of all integer from $$$1$$$ to $$$\\frac{X}{2}$$$. Therefore, the size of $$$S$$$ cannot exceed the size of the maximum anti-chain (a subset of vertices such that no pair of vertices is connected by an edge) of the graph. The size of the maximum anti-chain of the divisibility graph with vertices from $$$1$$$ to $$$n$$$ is $$$\\frac{n}{2}$$$ (proof below). Therefore, the size of $$$S$$$ cannot exceed $$$\\frac{\\frac{X}{2}}{2} = \\frac{X}{4}$$$, or $$$r \\leq \\frac{X}{4}$$$. $$$\\blacksquare$$$Though, for an anti-chain of the divisibility graph with $$$\\frac{X}{2}$$$ vertices, even if we include all the numbers from $$$\\frac{X}{2} + 1$$$ to $$$X$$$, it may happen that vertices of the anti-chain belong to different weakly connected component. In reality, our brute-force program figure out that in the worst case, $$$r = 11$$$ (achieved with $$$a = [2, 11, 13, \\ldots, 27, 29, 30, 31, \\ldots, 59, 60]$$$). We still need to prove that, for even $$$n$$$, the maximum anti-chain of the divisibility graph with vertices from $$$1$$$ to $$$n$$$ is $$$\\frac{n}{2}$$$.Proof:For any number $$$x$$$, let $$$f(x)$$$ the number received by continuously divide $$$x$$$ by $$$2$$$. In other word, let $$$k$$$ the maximum value of $$$i$$$ such that $$$x$$$ is divisible by $$$2^i$$$, then $$$f(x) = \\frac{x}{2^k}$$$. Notice that, for two number $$$x$$$ and $$$y$$$, if $$$f(x) = f(y)$$$ then $$$x$$$ divides $$$y$$$ or $$$y$$$ divides $$$x$$$.For all $$$x$$$ from $$$1$$$ to $$$n$$$, $$$f(x)$$$ has at most $$$\\frac{n}{2}$$$ different value (all odd number from $$$1$$$ to $$$n-1$$$). For any subset $$$s$$$ of integers from $$$1$$$ to $$$n$$$, if $$$s$$$ has $$$\\frac{n}{2} + 1$$$ elements or more, according to Pigeonhole principle, there are two elements in $$$s$$$ that have the same value of $$$f$$$. One of these two numbers will divide the other, so $$$s$$$ is not an anti-chain. $$$\\blacksquare$$$"
}{
    "name": "Dreamoon and Binary",
    "code": [
        "477",
        "D"
    ],
    "tags": [
        "dp",
        "strings"
    ],
    "difficulty": 2700,
    "statement": "Dreamoon saw a large integer x written on the ground and wants to print its binary form out. Dreamoon has accomplished the part of turning x into its binary format. Now he is going to print it in the following manner.He has an integer n = 0 and can only perform the following two operations in any order for unlimited times each:  Print n in binary form without leading zeros, each print will append to the right of previous prints.  Increase n by 1. Let's define an ideal sequence as a sequence of operations that can successfully print binary representation of x without leading zeros and ends with a print operation (i.e. operation 1). Dreamoon wants to know how many different ideal sequences are there and the length (in operations) of the shortest ideal sequence.The answers might be large so please print them modulo 1000000007 (109 + 7).Let's define the string representation of an ideal sequence as a string of '1' and '2' where the i-th character in the string matches the i-th operation performed. Two ideal sequences are called different if their string representations are different.",
    "editorial": ""
}{
    "name": "Black, White and Grey Tree",
    "code": [
        "1442",
        "E"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "difficulty": 3000,
    "statement": "You are given a tree with each vertex coloured white, black or grey. You can remove elements from the tree by selecting a subset of vertices in a single connected component and removing them and their adjacent edges from the graph. The only restriction is that you are not allowed to select a subset containing a white and a black vertex at once.What is the minimum number of removals necessary to remove all vertices from the tree?",
    "editorial": "Let's solve the task step by step: Suppose that tree is a bamboo without the grey vertices. Such a tree can be viewed as an array of colors $$$1$$$ and $$$2$$$. We can see that if there are two adjacent vertices of equal color, we can always delete them together in one operation. We can merge adjacent vertices of the same color, and get an array of colors $$$b_1, b_2, \\ldots, b_k$$$, such that $$$b_i \\in \\{1, 2\\}; b_i \\ne b_{i+1}$$$. Such an array can be defined by two numbers\u00a0\u2014 $$$b_1, k$$$.We can see that such an array $$$b$$$ of length $$$k$$$ can not be deleted in less than $$$\\lfloor {k \\over 2} \\rfloor + 1$$$ removals. It can be proved by induction. Also, you can delete all elements in this number of removals by deleting opposite leaves (after the first removal opposite leaves will have the same color). Let's solve the task for a general tree without grey vertices. Let's assign the edge $$$uv$$$ with weight $$$0$$$ if $$$a_u=a_v$$$, and $$$1$$$ otherwise. Let's find the longest path (diameter) in this weighted tree, and let it be the vertices $$$v_1, v_2, \\ldots, v_m$$$. We can see this path as bamboo from the previous paragraph, and find the corresponding value $$$k$$$ for this path (it is equal to diameter + 1). It is obvious that we can't delete the tree in less than $$$\\lfloor {k \\over 2} \\rfloor + 1$$$ removals (otherwise we would be able to delete the bamboo in a smaller number of removals). Turns out that we can delete all vertices in this number of removals. We can do the same algorithm\u00a0\u2014 let's delete the opposite leaves of diameter, and also let's delete all leaves in the tree that have the same color (why not). After one such removal, our path will still be a diameter (if another path becomes the diameter, then one of its leaves should have the same color, and was going to be deleted).We can find the diameter in such a 0/1 tree in linear time, or we can solve the task even simpler. We can see that we alternate the removal of black and white vertices, and we delete all the leaves with the same color. So, we can choose the first operation (delete black or white), and at each iteration just delete all corresponding leaves. It works in linear time. Let's solve the task without additional constraints. Now there are the grey vertices. How do they change the solution? Let's see at the last removal\u00a0\u2014 suppose we deleted vertex $$$v$$$, which was not grey. Then we can imagine that we make $$$v$$$ the root of the tree, and paint all the grey vertices in the color of their parents. Then we have a tree without grey vertices, which we can solve. Obviously, the answer for such a colored tree is not less than the answer for the initial tree (because we can make the same removals as in a colored tree). But we can see that we can't get the smaller answer, as by coloring grey vertices we effectively removed them from the tree, and the value $$$\\lfloor {k \\over 2} \\rfloor + 1$$$ (over subsequences of black and white vertices) hasn't changed.So, overall, the solution is to choose the first removal (1 or 2), and alternate removals of black and white vertices. For removal of $$$c \\in \\{ 1, 2 \\}$$$ we delete all the leaves with color $$$0$$$ or $$$c$$$. Also, we can note that the tree remains connected in this process."
}{
    "name": "Homecoming",
    "code": [
        "1315",
        "B"
    ],
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "strings"
    ],
    "difficulty": 1300,
    "statement": "After a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are $$$n$$$ crossroads in the line in the town, and there is either the bus or the tram station at each crossroad.The crossroads are represented as a string $$$s$$$ of length $$$n$$$, where $$$s_i = \\texttt{A}$$$, if there is a bus station at $$$i$$$-th crossroad, and $$$s_i = \\texttt{B}$$$, if there is a tram station at $$$i$$$-th crossroad. Currently Petya is at the first crossroad (which corresponds to $$$s_1$$$) and his goal is to get to the last crossroad (which corresponds to $$$s_n$$$).If for two crossroads $$$i$$$ and $$$j$$$ for all crossroads $$$i, i+1, \\ldots, j-1$$$ there is a bus station, one can pay $$$a$$$ roubles for the bus ticket, and go from $$$i$$$-th crossroad to the $$$j$$$-th crossroad by the bus (it is not necessary to have a bus station at the $$$j$$$-th crossroad). Formally, paying $$$a$$$ roubles Petya can go from $$$i$$$ to $$$j$$$ if $$$s_t = \\texttt{A}$$$ for all $$$i \\le t < j$$$. If for two crossroads $$$i$$$ and $$$j$$$ for all crossroads $$$i, i+1, \\ldots, j-1$$$ there is a tram station, one can pay $$$b$$$ roubles for the tram ticket, and go from $$$i$$$-th crossroad to the $$$j$$$-th crossroad by the tram (it is not necessary to have a tram station at the $$$j$$$-th crossroad). Formally, paying $$$b$$$ roubles Petya can go from $$$i$$$ to $$$j$$$ if $$$s_t = \\texttt{B}$$$ for all $$$i \\le t < j$$$.For example, if $$$s$$$=\"AABBBAB\", $$$a=4$$$ and $$$b=3$$$ then Petya needs:  buy one bus ticket to get from $$$1$$$ to $$$3$$$,  buy one tram ticket to get from $$$3$$$ to $$$6$$$,  buy one bus ticket to get from $$$6$$$ to $$$7$$$. Thus, in total he needs to spend $$$4+3+4=11$$$ roubles. Please note that the type of the stop at the last crossroad (i.e. the character $$$s_n$$$) does not affect the final expense.Now Petya is at the first crossroad, and he wants to get to the $$$n$$$-th crossroad. After the party he has left with $$$p$$$ roubles. He's decided to go to some station on foot, and then go to home using only public transport.Help him to choose the closest crossroad $$$i$$$ to go on foot the first, so he has enough money to get from the $$$i$$$-th crossroad to the $$$n$$$-th, using only tram and bus tickets.",
    "editorial": "The first thing you should do in this problem\u00a0\u2014 you should understand the problem statement (which could be not very easy), and get the right answers to the sample test cases. Petya needs to find the minimal $$$i$$$ such that he has enough money to get from $$$i$$$ to $$$n$$$ (not $$$n+1$$$, he doesn't need to use the transport from the last crossroad. This was a rather common mistake in misunderstanding the statement) using only public transport. We can see that if Petya can get from $$$i$$$ to $$$n$$$ using only public transport, he can also get from any $$$j>i$$$ to $$$n$$$, using only public transport (because he will need fewer tickets).Let's iterate the candidates for $$$i$$$ from $$$n$$$ to $$$1$$$ and try to find the minimal possible $$$i$$$. Of course, Petya can go from $$$n$$$ to $$$n$$$ using only public transport (he doesn't need to buy any ticket). Suppose Petya can get from $$$j$$$ to $$$n$$$ for some $$$j$$$, and it would cost him $$$t_j$$$ money. How much money he would need to get from $$$j-1$$$ to $$$n$$$? He definitely should be able to buy a ticket at station $$$j-1$$$. So, if it is the same ticket he should buy at station $$$j$$$, he will need the same amount of money, because he doesn't need to buy two consecutive equal tickets, it has no sense. Otherwise, he should buy one more ticket. So, a minimal amount of money $$$t_{j-1}$$$ to get from $$$j-1$$$ to $$$j$$$ is $$$t_j$$$, if $$$j<n$$$ and $$$s_{j-1}=s_j$$$, and $$$t_j+cost(s_{j-1})$$$ otherwise ($$$cost(s_{j-1})$$$ is $$$a$$$ if $$$s_{j-1} = \\texttt{A}$$$, and $$$b$$$ otherwise). If this value is greater than $$$p$$$, he should go to $$$j$$$ by foot, otherwise, we should resume the process because he can go to $$$j-1$$$ or even some less-numbered crossroads."
}{
    "name": "Heist",
    "code": [
        "1041",
        "A"
    ],
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "difficulty": 800,
    "statement": "There was an electronic store heist last night.All keyboards which were in the store yesterday were numbered in ascending order from some integer number $$$x$$$. For example, if $$$x = 4$$$ and there were $$$3$$$ keyboards in the store, then the devices had indices $$$4$$$, $$$5$$$ and $$$6$$$, and if $$$x = 10$$$ and there were $$$7$$$ of them then the keyboards had indices $$$10$$$, $$$11$$$, $$$12$$$, $$$13$$$, $$$14$$$, $$$15$$$ and $$$16$$$.After the heist, only $$$n$$$ keyboards remain, and they have indices $$$a_1, a_2, \\dots, a_n$$$. Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither $$$x$$$ nor the number of keyboards in the store before the heist.",
    "editorial": "Let $$$x$$$ \u2014 the minimal number from the given numbers and $$$y$$$ \u2014 the maximal. So we consider that $$$x$$$ and $$$y$$$ were minimal and maximal keyboard numbers before the heist. All given numbers are distinct, so the answer is $$$y - x + 1 - n$$$ (initial number of the keyboards is $$$(y - x + 1)$$$ minus the remaining number of keyboards $$$n$$$)."
}{
    "name": "Mister B and Beacons on Field",
    "code": [
        "819",
        "C"
    ],
    "tags": [
        "number theory"
    ],
    "difficulty": 2900,
    "statement": "Mister B has a house in the middle of a giant plain field, which attracted aliens life. For convenience, aliens specified the Cartesian coordinate system on the field in such a way that Mister B's house has coordinates (0, 0). After that they sent three beacons to the field, but something went wrong. One beacon was completely destroyed, while the other two landed in positions with coordinates (m, 0) and (0, n), respectively, but shut down.Mister B was interested in this devices, so he decided to take them home. He came to the first beacon, placed at (m, 0), lifted it up and carried the beacon home choosing the shortest path. After that he came to the other beacon, placed at (0, n), and also carried it home choosing the shortest path. When first beacon was lifted up, the navigation system of the beacons was activated.Partially destroyed navigation system started to work in following way.At time moments when both survived beacons are at points with integer coordinates the system tries to find a location for the third beacon. It succeeds if and only if there is a point with integer coordinates such that the area of the triangle formed by the two survived beacons and this point is equal to s. In this case the system sends a packet of information with beacon positions to aliens, otherwise it doesn't.Compute how many packets of information system sent while Mister B was moving the beacons.",
    "editorial": "There 2 stages in this task: moving of first beacon and moving of second.But at first we need factorization of n and s. Since n and s are product of integers  \u2264 106, it can be done in O(log(n) + log(s)) time by \"Sieve of Eratosthenes\".Start from second stage, when second beacon is moving:Position of beacons will look like pair of points: (0, 0), (0, k), where 0 \u2264 k \u2264 n. We need to check existing of point (x, y) such, that area of triangle (0, 0), (0, k), (x, y) equals to s. Using cross product |((0, k) - (0, 0))\u00b7((x, y) - (0, 0))| = 2\u00b7s. After simplifying we get |k\u00b7x| = 2\u00b7s where 0 \u2264 k \u2264 n.So we can iterate all divisors of 2\u00b7s, using factorization of s and recursive algorithm.Complexity of second stage is O(\u03c3 (s)), where \u03c3 (s) \u2014 number of divisors of s and for s \u2264 1018 \u03c3 (s) \u2264  \u2248 105.In the first stage we have such points: (k, 0), (0, n), where 1 \u2264 k \u2264 m.We need to check existing of point (x, y) such, that area of triangle (k, 0), (0, n), (x, y) equals to s. Using cross product |((k, 0) - (0, n))\u00b7((x, y) - (0, n))| = 2\u00b7s we can get next equation: |k\u00b7(y - n) + n\u00b7x| = 2\u00b7s. Then solution exists iff gcd(k, n) | 2\u00b7s (2s % gcd(k, n) = 0).And we need to calculate how many 1 \u2264 k \u2264 m such, that gcd(k, n) | 2\u00b7s.We will solve it in next way: let's n = p1n1p2n2... plnl and 2s = p1s1p2s2... plsl (ni, si \u2265 0).Look at all pi, that ni > si. It's obvious, that if pisi + 1 is divisor of k, then 2s doesn't divide at gcd(k, n).In result, we have some constrains on k, like k doesn't divide at aj = pijsij + 1.Finally, we have next task: calculate number of k (1 \u2264 k \u2264 n) such, that k doesn't divide any of ai. It can be done with inclusion-exclusion principle, where number of k which divides ai1, ai2 ... aib is .Complexity of first stage is O(2z(n)), where z(x) \u2014 number of prime divisors of x, z \u2264 15 for integers up to 1018.Result complexity is O(\u03c3 (s) + 2z(n)) per test."
}{
    "name": "Working Week",
    "code": [
        "1735",
        "A"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "difficulty": 800,
    "statement": "Your working week consists of $$$n$$$ days numbered from $$$1$$$ to $$$n$$$, after day $$$n$$$ goes day $$$1$$$ again. And $$$3$$$ of them are days off. One of the days off is the last day, day $$$n$$$. You have to decide when the other two are.Choosing days off, you pursue two goals:   No two days should go one after the other. Note that you can't make day $$$1$$$ a day off because it follows day $$$n$$$.  Working segments framed by days off should be as dissimilar as possible in duration. More specifically, if the segments are of size $$$l_1$$$, $$$l_2$$$, and $$$l_3$$$ days long, you want to maximize $$$\\min(|l_1 - l_2|, |l_2 - l_3|, |l_3 - l_1|)$$$. Output the maximum value of $$$\\min(|l_1 - l_2|, |l_2 - l_3|, |l_3 - l_1|)$$$ that can be obtained.",
    "editorial": "Let's consider that $$$l_1$$$, $$$l_2$$$, and $$$l_3$$$ are sorted working segments.If $$$l_1$$$ is not equal to $$$1$$$ then we can decrease $$$l_1$$$ by $$$1$$$ and increase $$$l_3$$$ by $$$1$$$. So we'll increase the answer.We've got that $$$l_1 = 1$$$ and we have to work just with $$$l_2$$$ and $$$l_3$$$.Now, our problem can be rewritten as: $$$l_2 + l_3 = n - 4$$$, maximize $$$min(l_2 - 1, l_3 - l_2)$$$.And as we know that $$$l_3 = n - 4 - l_2$$$, just: maximize $$$min(l_2 - 1, n - 4 - 2 \\cdot l_2)$$$.If we increase both values under the minimum scope by one, solutions don't change: maximize $$$min(l_2, (n - 3) - 2 \\cdot l_2)$$$.If we choose $$$l_2 = \\left\\lfloor\\frac{n-3}{3}\\right\\rfloor$$$, then $$$min(l_2, (n - 3) - 2 \\cdot l_2) = \\left\\lfloor\\frac{n-3}{3}\\right\\rfloor$$$. If the answer is greater, then $$$l_2 > \\frac{n - 3}{3}$$$, $$$(n - 3) - 2 \\cdot l_2 > \\frac{n - 3}{3}$$$, and it means that $$$2 \\cdot (l_2) + ((n - 3) - 2 \\cdot l_2) > n - 3$$$ but $$$2 \\cdot (l_2) + ((n - 3) - 2 \\cdot l_2) = n - 3$$$.The only thing is left to do is to calculate final answer. And it is $$$\\left\\lfloor\\frac{n-3}{3}\\right\\rfloor - 1$$$ or just $$$\\left\\lfloor\\frac{n}{3}\\right\\rfloor - 2$$$.It was a mathematician way of solving. As it's pretty obvious that $$$l_2$$$ is approximately $$$\\frac{n}{3}$$$, you could check $$$l_2 = \\frac{n}{3} \\pm 5$$$ and choose the best among them."
}{
    "name": "Spit Problem",
    "code": [
        "29",
        "A"
    ],
    "tags": [
        "brute force"
    ],
    "difficulty": 1000,
    "statement": "In a Berland's zoo there is an enclosure with camels. It is known that camels like to spit. Bob watched these interesting animals for the whole day and registered in his notepad where each animal spitted. Now he wants to know if in the zoo there are two camels, which spitted at each other. Help him to solve this task.The trajectory of a camel's spit is an arc, i.e. if the camel in position x spits d meters right, he can hit only the camel in position x + d, if such a camel exists.",
    "editorial": ""
}{
    "name": "Poman Numbers",
    "code": [
        "1411",
        "E"
    ],
    "tags": [
        "bitmasks",
        "greedy",
        "math",
        "strings"
    ],
    "difficulty": 2300,
    "statement": "You've got a string $$$S$$$ consisting of $$$n$$$ lowercase English letters from your friend. It turned out that this is a number written in poman numerals. The poman numeral system is long forgotten. All that's left is the algorithm to transform number from poman numerals to the numeral system familiar to us. Characters of $$$S$$$ are numbered from $$$1$$$ to $$$n$$$ from left to right. Let's denote the value of $$$S$$$ as $$$f(S)$$$, it is defined as follows:   If $$$|S| > 1$$$, an arbitrary integer $$$m$$$ ($$$1 \\le m < |S|$$$) is chosen, and it is defined that $$$f(S) = -f(S[1, m]) + f(S[m + 1, |S|])$$$, where $$$S[l, r]$$$ denotes the substring of $$$S$$$ from the $$$l$$$-th to the $$$r$$$-th position, inclusively.  Otherwise $$$S = c$$$, where $$$c$$$ is some English letter. Then $$$f(S) = 2^{pos(c)}$$$, where $$$pos(c)$$$ is the position of letter $$$c$$$ in the alphabet ($$$pos($$$a$$$) = 0$$$, $$$pos($$$z$$$) = 25$$$). Note that $$$m$$$ is chosen independently on each step.Your friend thinks it is possible to get $$$f(S) = T$$$ by choosing the right $$$m$$$ on every step. Is he right?",
    "editorial": "First, note that the last digit will always be taken with a plus sign, and the one before the last\u00a0\u2014 with a minus sign. It turns out that all other digits may be taken with any sign. Let's prove it.Suppose we want to get the mask $$$---++--++---+$$$. All minuses on the left can be obtained by simply splitting one character at a time. We are left with the $$$++--++---+$$$ mask, split it as follows: $$$(++--++-)(--+)$$$. That is, we left in the left part only one minus from the last segment of consecutive minuses. Change the signs in the left part: $$$(--++--+)(--+)$$$. We reduced it to a smaller problem. Doing this, we will end up with masks of the form $$$+$$$.Now the problem is reduced to whether we can get the number $$$X$$$ using the first $$$n - 2$$$ letters. Since the weights of the items are powers of two, we can choose them greedily.Bonus. Can you construct an answer in linear time (i.e. output a binary tree)?"
}{
    "name": "Dense Array",
    "code": [
        "1490",
        "A"
    ],
    "tags": [
        "greedy",
        "math"
    ],
    "difficulty": 800,
    "statement": "Polycarp calls an array dense if the greater of any two adjacent elements is not more than twice bigger than the smaller. More formally, for any $$$i$$$ ($$$1 \\le i \\le n-1$$$), this condition must be satisfied: $$$$$$\\frac{\\max(a[i], a[i+1])}{\\min(a[i], a[i+1])} \\le 2$$$$$$For example, the arrays $$$[1, 2, 3, 4, 3]$$$, $$$[1, 1, 1]$$$ and $$$[5, 10]$$$ are dense. And the arrays $$$[5, 11]$$$, $$$[1, 4, 2]$$$, $$$[6, 6, 1]$$$ are not dense.You are given an array $$$a$$$ of $$$n$$$ integers. What is the minimum number of numbers you need to add to an array to make it dense? You can insert numbers anywhere in the array. If the array is already dense, no numbers need to be added.For example, if $$$a=[4,2,10,1]$$$, then the answer is $$$5$$$, and the array itself after inserting elements into it may look like this: $$$a=[4,2,\\underline{\\textbf{3}},\\underline{\\textbf{5}},10,\\underline{\\textbf{6}},\\underline{\\textbf{4}},\\underline{\\textbf{2}},1]$$$ (there are other ways to build such $$$a$$$).",
    "editorial": "Note that adding elements between positions $$$i$$$ ($$$1 \\le i \\le n - 1$$$) and $$$i + 1$$$ will not change the ratio of the adjacent elements, except for the ones just added. Therefore, for each pair of adjacent numbers, the problem can be solved independently.Let us solve the problem for a adjacent pair of numbers $$$a_i$$$ and $$$a_{i+1}$$$ for which the inequality from the statements does not hold. Suppose that $$$2a_i \\le a_{i+1}$$$ (if not, we will swap them). Then between $$$a_i$$$ and $$$a_{i+1}$$$ it requires to insert $$$\\left\\lceil log_2 \\left(\\frac{a_{i+1}}{a_i}\\right) - 1 \\right\\rceil$$$ elements of the form: $$$$$$ 2a_i, 4a_i, ..., 2^{\\left\\lceil log_2 \\left(\\frac{a_{i+1}}{a_i}\\right) - 1 \\right\\rceil} a_i $$$$$$It is better not to use explicit formula, but to use the following cycle: while a[i] * 2 < a[i + 1]:  a[i] *= 2  ans += 1"
}{
    "name": "Party",
    "code": [
        "906",
        "C"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "graphs"
    ],
    "difficulty": 2400,
    "statement": "Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure.At each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends.Arseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.",
    "editorial": "Let\u2019s formulate and prove several facts.1. If we change an call order, the result doesn\u2019t change. Let\u2019s consider two vertices which are called consecutively. If they are not connected by edge, then regardless of the order, we get that at the end, neighbours of each vertex form a clique.If they are connected, then independently on the order, we get clique from 2 vertices and all neighbours of them.2. If graph is a tree, it\u2019s sufficient to take as an answer all its vertices except leaves. Indeed, if we consider any 2 tree vertices, we get that all vertices on the way between them are in the answer. Each vertex reduces on 1 the distance between those 2, it means that the distance between them is 1.3. Let\u2019s select from source graph spanning tree, that has the largest number of leaves. One can say that we can use all vertices except leaves as an answer.Obviously from point 2, that after all our operations with such set graph will become complete. Let\u2019s show that it is minimal number of vertices.Let we selected some set of vertices, that is the answer. Then subgraph of given graph, built on the selected set of vertices, should be connected (otherwise between connected component can\u2019t appear the edge and graph can\u2019t be complete. Also, each of vertices, that isn\u2019t in an answer should have at least one of neighbours selected (otherwise it is impossible to add new edge to it). Now let\u2019s select a spanning tree in selected set (it\u2019s possible because our set is connected) and add non-selected vertices into the tree as leafs. Then we see that our selected can be represented as spanning tree in the initial graph, in which all selected vertices are all non-leaf vertices and possibly, some leafs; but leafs can be obviously removed from the selected set by proved above. So, one of optimal answers can be described as set of non-leaf vertices of spanning tree with minimal possible number of non-leaves and, as a consequence, with maximal possible number of leaves, QED.4. Implementation. It is necessary to implement an algorithm that should work for 2n\u00b7n or faster or with worse asymptotic but with non-asymptotical optimization. One of possible solutions is following. Let contain any subset of vertices as a n-bit mask; for example, mask of a subset containing vertices {v1, v2, ..., vk} will be equal to 2v1 + 2v2 + ... + 2vk. Then, for subset with mask m, vertex v is in set iff m & 2v is not equal to 0; here & is a bitwise AND.Let for each vertex v, neighbours[v] be a mask of subset of vertices containing vertex v and it's neighbours. Array neighbours[v] can be calculated easily. Then, let bool isConnected[m] be 1 for some mask m iff subset coded by m is connected. Array isConnected can be calculated in O(2n * n) by the following algorithm:  for all vertices  (let vertices be enumerated in 0-indexation), isCalculated[2v] is assigned to 1; for all other masks, isCalculated should be equal to 0;  then, go through all masks in increasing order by a simple cycle; let m be current mask in the cycle;  if isConnected[m] = 0, then go to the next iteration of cycle;  otherwise, let v1, v2, ..., vk be vertices of subset coded by m. Then, mask m':  = maskNeighbours[m]:  = neighbours[v1]|neighbours[v2]|... |neighbours[vk] for | as bitwise OR is a mask coding a subset of vertices containing vertices of mask m and their neighbours. Then, for each vertex w in subset of mask m' we assign isConnected[m|2w] to be 1. The described algorithm works in O(2n * n); it can be proved by induction that at the end, isConnected[m] = 1 for mask m iff m is a code of connected subset of vertices.But how to find an answer? Notice that mask m = 2v1 + 2v2 + ... + 2vk is a code of good (for our purposes) subset iff isConnected[m] = 1 and maskNeighbours[m] = 2n - 1 = 20 + 21 + ... + 2n - 1. For each mask m, we can check if it's good in O(n) time having an array isConnected calculated; the answer is a good mask with minimal possible number of elements in the corresponding set."
}{
    "name": "Ehab and a Special Coloring Problem",
    "code": [
        "1174",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "number theory"
    ],
    "difficulty": 1300,
    "statement": "You're given an integer $$$n$$$. For every integer $$$i$$$ from $$$2$$$ to $$$n$$$, assign a positive integer $$$a_i$$$ such that the following conditions hold:  For any pair of integers $$$(i,j)$$$, if $$$i$$$ and $$$j$$$ are coprime, $$$a_i \\neq a_j$$$.  The maximal value of all $$$a_i$$$ should be minimized (that is, as small as possible). A pair of integers is called coprime if their greatest common divisor is $$$1$$$.",
    "editorial": "Let's call the maximum value in the array $$$max$$$. Let the number of primes less than or equal to $$$n$$$ be called $$$p$$$. Then, $$$max \\ge p$$$. That's true because a distinct number must be assigned to each prime, since all primes are coprime to each other. Now if we can construct an answer wherein $$$max=p$$$, it'll be optimal. Let's first assign a distinct number to each prime. Then, assign to every composite number the same number as any of its prime divisors. This works because for any pair of numbers $$$(i,j)$$$, $$$i$$$ is given the same number of a divisor and so is $$$j$$$, so if they're coprime (don't share a divisor), they can't be given the same number!Code link:Time complexity: $$$O(nlog(n))$$$."
}{
    "name": "Du\u0161an's Railway",
    "code": [
        "1423",
        "C"
    ],
    "tags": [
        "divide and conquer",
        "graphs",
        "trees"
    ],
    "difficulty": 3500,
    "statement": "As you may already know, Du\u0161an is keen on playing with railway models. He has a big map with cities that are connected with railways. His map can be seen as a graph where vertices are cities and the railways connecting them are the edges. So far, the graph corresponding to his map is a tree. As you already know, a tree is a connected acyclic undirected graph.He is curious to find out whether his railway can be optimized somehow. He wants to add so-called shortcuts, which are also railways connecting pairs of cities. This shortcut will represent the railways in the unique path in the tree between the pair of cities it connects. Since Du\u0161an doesn't like repeating the railways, he has also defined good paths in his newly obtained network (notice that after adding the shortcuts, his graph is no more a tree). He calls a path good, if no edge appears more than once, either as a regular railway edge or as an edge represented by some shortcut (Every shortcut in a good path has length 1, but uses up all the edges it represents - they can't appear again in that path). Having defined good paths, he defines good distance between two cities to be the length of the shortest good path between them. Finally, the shortcutting diameter of his network is the largest good distance between any two cities.Now he is curious to find out whether it is possible to achieve shortcutting diameter less or equal than $$$k$$$, while adding as few shortcuts as possible.Your solution should add no more than $$$\\mathbf{10 \\cdot n}$$$ shortcuts.",
    "editorial": ""
}{
    "name": "Mishka and trip",
    "code": [
        "703",
        "B"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1400,
    "statement": "Little Mishka is a great traveller and she visited many countries. After thinking about where to travel this time, she chose XXX\u00a0\u2014 beautiful, but little-known northern country.Here are some interesting facts about XXX:  XXX consists of n cities, k of whose (just imagine!) are capital cities.  All of cities in the country are beautiful, but each is beautiful in its own way. Beauty value of i-th city equals to ci.  All the cities are consecutively connected by the roads, including 1-st and n-th city, forming a cyclic route 1 \u2014 2 \u2014 ... \u2014 n \u2014 1. Formally, for every 1 \u2264 i < n there is a road between i-th and i + 1-th city, and another one between 1-st and n-th city.  Each capital city is connected with each other city directly by the roads. Formally, if city x is a capital city, then for every 1 \u2264 i \u2264 n,  i \u2260 x, there is a road between cities x and i.  There is at most one road between any two cities.  Price of passing a road directly depends on beauty values of cities it connects. Thus if there is a road between cities i and j, price of passing it equals ci\u00b7cj.Mishka started to gather her things for a trip, but didn't still decide which route to follow and thus she asked you to help her determine summary price of passing each of the roads in XXX. Formally, for every pair of cities a and b (a < b), such that there is a road between a and b you are to find sum of products ca\u00b7cb. Will you help her?",
    "editorial": "Let's look at the first capital. Note that the total cost of the outgoing roads is cid1 \u00b7 (sum - cid1), where sum\u00a0\u2014 summary beauty of all cities. Thus iterating through the capitals we can count the summary cost of roads between capitals and all the other cities. But don't forget that in this case we count the roads between pairs of capitals twice. To avoid this on each step we should update sum = sum - cidcur , where idcur is the position of current capital. In the end we should add to the answer the cost of roads between \"non-capital\" neighbour cities. Complexity - O(n)."
}{
    "name": "Repaintings",
    "code": [
        "40",
        "B"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1600,
    "statement": "A chessboard n \u00d7 m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.",
    "editorial": ""
}{
    "name": "Vasiliy's Multiset",
    "code": [
        "706",
        "D"
    ],
    "tags": [
        "binary search",
        "bitmasks",
        "data structures",
        "trees"
    ],
    "difficulty": 1800,
    "statement": "Author has gone out of the stories about Vasiliy, so here is just a formal task description.You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries:  \"+ x\"\u00a0\u2014 add integer x to multiset A. \"- x\"\u00a0\u2014 erase one occurrence of integer x from multiset A. It's guaranteed that at least one x is present in the multiset A before this query. \"? x\"\u00a0\u2014 you are given integer x and need to compute the value , i.e. the maximum value of bitwise exclusive OR (also know as XOR) of integer x and some integer y from the multiset A.Multiset is a set, where equal elements are allowed.",
    "editorial": ""
}{
    "name": "Casinos and travel",
    "code": [
        "852",
        "E"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2100,
    "statement": "John has just bought a new car and is planning a journey around the country. Country has N cities, some of which are connected by bidirectional roads. There are N - 1 roads and every city is reachable from any other city. Cities are labeled from 1 to N.John first has to select from which city he will start his journey. After that, he spends one day in a city and then travels to a randomly choosen city which is directly connected to his current one and which he has not yet visited. He does this until he can't continue obeying these rules.To select the starting city, he calls his friend Jack for advice. Jack is also starting a big casino business and wants to open casinos in some of the cities (max 1 per city, maybe nowhere). Jack knows John well and he knows that if he visits a city with a casino, he will gamble exactly once before continuing his journey.He also knows that if John enters a casino in a good mood, he will leave it in a bad mood and vice versa. Since he is John's friend, he wants him to be in a good mood at the moment when he finishes his journey. John is in a good mood before starting the journey.In how many ways can Jack select a starting city for John and cities where he will build casinos such that no matter how John travels, he will be in a good mood at the end? Print answer modulo 109 + 7.",
    "editorial": ""
}{
    "name": "Optimal Number Permutation",
    "code": [
        "622",
        "D"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 1900,
    "statement": "You have array a that contains all integers from 1 to n twice. You can arbitrary permute any numbers in a.Let number i be in positions xi, yi (xi < yi) in the permuted array a. Let's define the value di = yi - xi \u2014 the distance between the positions of the number i. Permute the numbers in array a to minimize the value of the sum .",
    "editorial": ""
}{
    "name": "Regular Bracket Sequence",
    "code": [
        "1469",
        "A"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 1000,
    "statement": "A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters + and 1 into this sequence. For example, sequences (())(), () and (()(())) are regular, while )(, (() and (()))( are not. Let's call a regular bracket sequence \"RBS\".You are given a sequence $$$s$$$ of $$$n$$$ characters (, ), and/or ?. There is exactly one character ( and exactly one character ) in this sequence.You have to replace every character ? with either ) or ( (different characters ? can be replaced with different brackets). You cannot reorder the characters, remove them, insert other characters, and each ? must be replaced.Determine if it is possible to obtain an RBS after these replacements.",
    "editorial": "There are two solutions to this problem: casework and greedy.The greedy solution goes as follows: the number of opening brackets in an RBS should be exactly $$$\\frac{|s|}{2}$$$, and if there is a closing bracket before an opening bracket, it's optimal to swap them, if possible. So, we should replace the first $$$\\frac{|s|}{2} - 1$$$ question marks with opening brackets, other question marks with closing brackets, and if the answer exists, this method will find it. All that's left is to check that the resulting sequence is an RBS.The casework solution goes as follows: first of all, each RBS should have an even length, so if $$$|s|$$$ is odd, there is no answer. Furthermore, an RBS always begins with an opening bracket and always ends with a closing bracket, so if the first character is a closing bracket or the last character is an opening bracket, there is no answer. Since there is at most one opening bracket and at most one closing bracket in the original sequence, these three constraints are enough: if the opening bracket is before the closing bracket, then they balance out, and all other characters can be replaced in such a way that they form an RBS of length $$$|s| - 2$$$. If the opening bracket is after the closing bracket, then the first and the last characters are question marks (since the first character is not a closing bracket, and the last one is not an opening bracket). We should replace the first character with an opening bracket, the last character with a closing bracket, so we get four characters (two opening and two closing brackets) which balance themselves out. All other question marks can be replaced in such a way that they form an RBS of length $$$|s| - 4$$$. So, all we have to check is that $$$|s|$$$ is even, the first character is not a closing bracket, and the last character is not an opening bracket."
}{
    "name": "Choosing Subtree is Fun",
    "code": [
        "372",
        "D"
    ],
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "trees",
        "two pointers"
    ],
    "difficulty": 2600,
    "statement": "There is a tree consisting of n vertices. The vertices are numbered from 1 to n.Let's define the length of an interval [l, r] as the value r - l + 1. The score of a subtree of this tree is the maximum length of such an interval [l, r] that, the vertices with numbers l, l + 1, ..., r belong to the subtree.Considering all subtrees of the tree whose size is at most k, return the maximum score of the subtree. Note, that in this problem tree is not rooted, so a subtree \u2014 is an arbitrary connected subgraph of the tree.",
    "editorial": ""
}{
    "name": "Parallel Projection",
    "code": [
        "1781",
        "A"
    ],
    "tags": [
        "geometry",
        "math"
    ],
    "difficulty": 800,
    "statement": "Vika's house has a room in a shape of a rectangular parallelepiped (also known as a rectangular cuboid). Its floor is a rectangle of size $$$w \\times d$$$, and the ceiling is right above at the constant height of $$$h$$$. Let's introduce a coordinate system on the floor so that its corners are at points $$$(0, 0)$$$, $$$(w, 0)$$$, $$$(w, d)$$$, and $$$(0, d)$$$.A laptop is standing on the floor at point $$$(a, b)$$$. A projector is hanging on the ceiling right above point $$$(f, g)$$$. Vika wants to connect the laptop and the projector with a cable in such a way that the cable always goes along the walls, ceiling, or floor (i.\u00a0e. does not go inside the cuboid). Additionally, the cable should always run parallel to one of the cuboid's edges (i.\u00a0e. it can not go diagonally).What is the minimum length of a cable that can connect the laptop to the projector?  Illustration for the first test case. One of the optimal ways to put the cable is shown in green. ",
    "editorial": "Note that bending the cable on the wall is not necessary: we can always bend it on the floor and on the ceiling, while keeping the vertical part of the cable straight. Thus, we can just disregard the height of the room, view the problem as two-dimensional, and add $$$h$$$ to the answer at the end.In the two-dimensional formulation, we need to connect points $$$(a, b)$$$ and $$$(f, g)$$$ with a cable that goes parallel to the coordinate axes and touches at least one side of the $$$(0, 0)$$$\u00a0\u2014 $$$(w, d)$$$ rectangle. We can now casework on the side of the rectangle (the sides are referred to as in the picture from the problem statement):   If the cable touches the front side, its length will be $$$b + |a - f| + g$$$.  If the cable touches the left side, its length will be $$$a + |b - g| + f$$$.  If the cable touches the back side, its length will be $$$(d - b) + |a - f| + (d - g)$$$.  If the cable touches the right side, its length will be $$$(w - a) + |b - g| + (w - f)$$$. Out of these four values, the smallest one (plus $$$h$$$) is the answer."
}{
    "name": "2-3-numbers",
    "code": [
        "926",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1300,
    "statement": "A positive integer is called a 2-3-integer, if it is equal to 2x\u00b73y for some non-negative integers x and y. In other words, these integers are such integers that only have 2 and 3 among their prime divisors. For example, integers 1, 6, 9, 16 and 108 \u2014 are 2-3 integers, while 5, 10, 21 and 120 are not.Print the number of 2-3-integers on the given segment [l, r], i.\u00a0e. the number of sich 2-3-integers t that l \u2264 t \u2264 r.",
    "editorial": "\u0422\u0430\u043a \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u0430, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044f\u043c\u0438 \u0434\u0432\u043e\u0439\u043a\u0438 \u0438 \u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0441\u0442\u0443\u0442, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c. \u041d\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f 30-\u0439. \u0422\u0430\u043a\u0436\u0435 \u043d\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432\u0441\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f 19-\u0439. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0432 set \u0432\u0441\u0435 \u043f\u043e\u043f\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u044d\u0442\u0438\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 2\u00b7109. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u043d\u0430\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u0432 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u043e\u0439\u043a\u0438 \u0438 \u0442\u0440\u043e\u0439\u043a\u0438, \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 2\u00b7109.\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e set \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043b\u0438\u0431\u043e \u0440\u0430\u0432\u043d\u044b l \u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u043b\u0438\u0431\u043e \u0440\u0430\u0432\u043d\u044b r."
}{
    "name": "So Mean",
    "code": [
        "1299",
        "E"
    ],
    "tags": [
        "interactive",
        "math"
    ],
    "difficulty": 3400,
    "statement": "This problem is interactive.We have hidden a permutation $$$p_1, p_2, \\dots, p_n$$$ of numbers from $$$1$$$ to $$$n$$$ from you, where $$$n$$$ is even. You can try to guess it using the following queries:$$$?$$$ $$$k$$$ $$$a_1$$$ $$$a_2$$$ $$$\\dots$$$ $$$a_k$$$.In response, you will learn if the average of elements with indexes $$$a_1, a_2, \\dots, a_k$$$ is an integer. In other words, you will receive $$$1$$$ if $$$\\frac{p_{a_1} + p_{a_2} + \\dots + p_{a_k}}{k}$$$ is integer, and $$$0$$$ otherwise. You have to guess the permutation. You can ask not more than $$$18n$$$ queries.Note that permutations $$$[p_1, p_2, \\dots, p_k]$$$ and $$$[n + 1 - p_1, n + 1 - p_2, \\dots, n + 1 - p_k]$$$ are indistinguishable. Therefore, you are guaranteed that $$$p_1 \\le \\frac{n}{2}$$$.Note that the permutation $$$p$$$ is fixed before the start of the interaction and doesn't depend on your queries. In other words, interactor is not adaptive.Note that you don't have to minimize the number of queries.",
    "editorial": "Let's solve this problem in several steps.First, let's ask a query about each group of $$$n-1$$$ numbers. Note that $$$1 + 2 + \\dots + (i-1) + (i+1) + \\dots + n = \\frac{n(n+1)}{2} - i \\equiv \\frac{1\\cdot 2}{2} - i \\bmod (n-1)$$$. Therefore, answer will be YES only for numbers $$$1$$$ and $$$n$$$. Find the positions where $$$1$$$ and $$$n$$$ lie, assign one of them to be $$$1$$$ and the other one to be $$$n$$$ (it doesn't matter how to assign $$$1$$$ and $$$n$$$ to these $$$2$$$ spots, as permutations $$$[p_1, p_2, \\dots, p_k]$$$ and $$$[n + 1 - p_1, n + 1 - p_2, \\dots, n + 1 - p_k]$$$ are indistinguishable). $$$n$$$ queries.Note that knowing $$$1$$$, we can find parity of every other number. Indeed, just ask about $$$1$$$ and $$$p_i$$$, if answer is YES, $$$p_i$$$ is odd, else it is even.$$$n$$$ queries.Suppose that we have found numbers $$$1, 2, \\dots, k, n-k+1, n-k+2, \\dots, n$$$ at some point. Let's find numbers $$$k+1$$$ and $$$n-k$$$.Consider all numbers except $$$1, 2, \\dots, k, n-k+1, n-k+2, \\dots, n$$$ now. Ask a query about each subset of $$$n - 2k - 1$$$ numbers among them. Again, we can see that we will get answer YES only when we omit $$$k+1$$$ and $$$n-k$$$. Indeed, $$$k+1 + \\dots (i-1) + (i+1) + \\dots + (n-k) = k\\cdot (n - 2k - 1) + \\frac{(n-2k)(n-2k+1)}{2} - (i-k) \\equiv 1 - (i-k) \\bmod (n-2k-1)$$$, which is $$$0$$$ only for $$$i = k+1$$$ and $$$n-k$$$.Now that we know parities of all numbers, we can distinguish between $$$k+1$$$ and $$$n-k$$$. So, we determined $$$k+1$$$ and $$$n-k$$$ in $$$n - 2k$$$ queries.Note that this already means that we can solve our problem in $$$n + n + (n - 2) + (n - 4) + (n - 6) \\dots + (n - (n-2))$$$ queries, which is $$$\\frac{n^2 + 6n}{4}$$$ queries. Unfortunately, this is much larger than we are allowed. However, we will use this method for $$$n\\le 8$$$.Let's use the procedure above to find numbers $$$1, 2, 3, 4, n-3, n-2, n-1, n$$$. We have used $$$5n - 12$$$ queries by now, but let's round this up to $$$5n$$$. Now, we are going to find the remainders of each element of permutation modulo $$$3$$$, $$$5$$$, $$$7$$$, $$$8$$$. As $$$3\\cdot 5 \\cdot 7 \\cdot 8 = 840 \\ge 800 \\ge n$$$, we will be able to restore each number uniquely.To find remainders modulo $$$3$$$, we will first ask each number with already found $$$1$$$ and $$$2$$$. We will get YES only for numbers, divisible by $$$3$$$. Next, we will ask each number whose remainder under division by $$$3$$$ we haven't yet found with $$$1$$$, $$$3$$$. This way we find all the numbers which give the remainder $$$2$$$. All others give the remainder $$$1$$$.We spend $$$n + \\frac{2n}{3}$$$ queries.Similarly, we find remainders mod $$$5$$$ and mod $$$7$$$. For mod $$$5$$$, at step $$$i$$$ ask each number whose remainder we don't know yet with $$$n, n-2, n-3, i$$$ (for $$$i$$$ from $$$1$$$ to $$$4$$$). We spend $$$n + \\frac{4n}{5} + \\frac{3n}{5} + \\frac{2n}{5}$$$ queries.For mod $$$7$$$, first ask all numbers whose remainders we don't know yet with $$$\\{1, 2, 3, n-3, n-2, n-1\\}$$$, then with $$$\\{1, 2, 3, n-3, n-2, n\\}$$$, $$$\\{1, 2, 3, n-3, n-1, n\\}$$$, $$$\\{1, 2, 3, n-2, n-1, n\\}$$$, $$$\\{1, 2, 4, n-2, n-1, n\\}$$$, $$$\\{1, 3, 4, n-2, n-1, n\\}$$$ (sums of all these sets are different mod $$$7$$$).We spend $$$n + \\frac{6n}{7} + \\dots + \\frac{2n}{7}$$$ queries.Now time to find remainders mod $$$4$$$. We already know all remainders mod $$$2$$$. To distinguish $$$4k$$$ from $$$4k+2$$$, ask with $$$1, 2, 3$$$. To distinguish $$$4k+1$$$ from $$$4k+3$$$, ask with $$$1, 2, 4$$$.We spend $$$n$$$ queries.Now time to find remainders mod $$$8$$$. We already know all remainders mod $$$4$$$. Similarly, to distinguish $$$8k$$$ from $$$8k+4$$$, ask with $$$n, n-1, n-2, n-3, 1, 2, 3$$$, $$$\\dots$$$, to distinguish $$$8k+3$$$ from $$$8k+7$$$, ask with $$$n, n-1, n-2, n-3, 1, 2, 4$$$.We spend $$$n$$$ queries.Overall, we spend $$$5n + (n + \\frac{2n}{3}) + (n + \\frac{4n}{5} + \\frac{3n}{5} + \\frac{2n}{5}) + (n + \\frac{6n}{7} + \\dots + \\frac{2n}{7}) + n + n \\sim 15.324 n$$$. Note that this bound is easy to optimize (for example, determine all remainders mod $$$3$$$ and $$$4$$$ from $$$1, 2, n, n-1$$$, and after that check only candidates which work mod $$$12$$$ in phase $$$5$$$. This will reduce the number of operations to $$$13.66 n$$$ operations. Of course, a lot of other optimizations are possible."
}{
    "name": "Strange Function",
    "code": [
        "1310",
        "E"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2900,
    "statement": "Let's define the function $$$f$$$ of multiset $$$a$$$ as the multiset of number of occurences of every number, that is present in $$$a$$$.E.g., $$$f(\\{5, 5, 1, 2, 5, 2, 3, 3, 9, 5\\}) = \\{1, 1, 2, 2, 4\\}$$$.Let's define $$$f^k(a)$$$, as applying $$$f$$$ to array $$$a$$$ $$$k$$$ times: $$$f^k(a) = f(f^{k-1}(a)), f^0(a) = a$$$. E.g., $$$f^2(\\{5, 5, 1, 2, 5, 2, 3, 3, 9, 5\\}) = \\{1, 2, 2\\}$$$.You are given integers $$$n, k$$$ and you are asked how many different values the function $$$f^k(a)$$$ can have, where $$$a$$$ is arbitrary non-empty array with numbers of size no more than $$$n$$$. Print the answer modulo $$$998\\,244\\,353$$$.",
    "editorial": "The solution of the task consists of three cases:  $$$k = 1$$$. For fixed $$$n$$$ $$$f(a)$$$ can be equal to any partition of $$$n$$$. We need to count the number of arrays $$$b_1, b_2, \\ldots, b_m$$$, such that $$$b_1 \\ge b_2 \\ge \\ldots \\ge b_m$$$ and $$$\\sum \\limits_{i=1}^m b_i \\le n$$$. This can be done by simple dp in $$$\\mathcal{O}(n^2)$$$ (or even faster, much faster). $$$k = 2$$$. When the array $$$b_1 \\ge b_2 \\ge \\ldots \\ge b_m$$$ can be equal to value of $$$f^2(a)$$$ for some $$$|a| \\le n$$$? When there exists some array $$$c_1, \\ldots, c_l$$$ such that $$$\\sum \\limits_{i=1}^l c_i \\le n$$$, and $$$f(c) = b$$$. The values of $$$b$$$ are the numbers of occurences of numbers in $$$c$$$, so we need to minimize $$$\\sum \\limits_{i=1}^m b_i v_i$$$, where $$$v_i$$$\u00a0\u2014 the unique numbers in $$$c$$$. To minimize this sum we should take $$$v_1=1, \\ldots, v_m=m$$$, so we need $$$\\sum \\limits_{i=1}^m b_i i \\le n$$$. This can be done by simple dp: $$$dp[val][j][sum]$$$\u00a0\u2014 the number of prefixes of $$$b$$$ such that we already took $$$j$$$ elements to $$$b$$$, all elements on prefix are greater than or equal to $$$val$$$, and the $$$\\sum \\limits_{i=1}^j b_i i = sum$$$.This dp can look like it is $$$\\mathcal{O}(n^3)$$$, but it is actually $$$\\mathcal{O}(n^2 \\log n)$$$, because there is a limitation $$$val \\cdot j \\le n$$$, and there are $$$\\mathcal{O}(n \\log n)$$$ such pairs. There is also a subquadratic solution. $$$k \\ge 3$$$. We can notice that in the array $$$f^2(a)$$$ there are at most $$$\\mathcal{O}(\\sqrt{2n})$$$ elements. We can use this fact to bruteforce all possible answers\u00a0\u2014 candidates for the answer are the partitions of numbers not exceeding $$$\\sqrt{2n}=64$$$, there are few millions of them. How to check if the array $$$b_1 \\ge b_2 \\ge \\ldots \\ge b_m$$$ can be the falue of $$$f^k(a)$$$? It happens that we can make $$$k-2$$$ iterations of the unfolding algorithm from case $$$k=2$$$ and get the \u00abminimal\u00bb possible array $$$a$$$, and check, if it contains no more than $$$n$$$ elements. This part works in $$$\\mathcal{O}(\\mathcal{P}(\\sqrt{2n}))$$$."
}{
    "name": "Burenka and Traditions (easy version)",
    "code": [
        "1718",
        "A1"
    ],
    "tags": [
        "dp",
        "greedy"
    ],
    "difficulty": 1800,
    "statement": "This is the easy version of this problem. The difference between easy and hard versions is only the constraints on $$$a_i$$$ and on $$$n$$$. You can make hacks only if both versions of the problem are solved.Burenka is the crown princess of Buryatia, and soon she will become the $$$n$$$-th queen of the country. There is an ancient tradition in Buryatia\u00a0\u2014 before the coronation, the ruler must show their strength to the inhabitants. To determine the strength of the $$$n$$$-th ruler, the inhabitants of the country give them an array of $$$a$$$ of exactly $$$n$$$ numbers, after which the ruler must turn all the elements of the array into zeros in the shortest time. The ruler can do the following two-step operation any number of times:   select two indices $$$l$$$ and $$$r$$$, so that $$$1 \\le l \\le r \\le n$$$ and a non-negative integer $$$x$$$, then  for all $$$l \\leq i \\leq r$$$ assign $$$a_i := a_i \\oplus x$$$, where $$$\\oplus$$$ denotes the bitwise XOR operation. It takes $$$\\left\\lceil \\frac{r-l+1}{2} \\right\\rceil$$$ seconds to do this operation, where $$$\\lceil y \\rceil$$$ denotes $$$y$$$ rounded up to the nearest integer. Help Burenka calculate how much time she will need.",
    "editorial": ""
}{
    "name": "Young Photographer",
    "code": [
        "14",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "Among other things, Bob is keen on photography. Especially he likes to take pictures of sportsmen. That was the reason why he placed himself in position x0 of a long straight racetrack and got ready to take pictures. But the problem was that not all the runners passed him. The total amount of sportsmen, training at that racetrack, equals n. And each of them regularly runs distances within a particular segment of the racetrack, which is the same for each sportsman. For example, the first sportsman runs from position a1 to position b1, the second \u2014 from a2 to b2What is the minimum distance that Bob should move to have a chance to take pictures of each sportsman? Bob can take a picture of a sportsman, if he stands within the segment that this sportsman covers on the racetrack.",
    "editorial": ""
}{
    "name": "Range Deleting",
    "code": [
        "1167",
        "E"
    ],
    "tags": [
        "binary search",
        "combinatorics",
        "data structures",
        "two pointers"
    ],
    "difficulty": 2100,
    "statement": "You are given an array consisting of $$$n$$$ integers $$$a_1, a_2, \\dots , a_n$$$ and an integer $$$x$$$. It is guaranteed that for every $$$i$$$, $$$1 \\le a_i \\le x$$$.Let's denote a function $$$f(l, r)$$$ which erases all values such that $$$l \\le a_i \\le r$$$ from the array $$$a$$$ and returns the resulting array. For example, if $$$a = [4, 1, 1, 4, 5, 2, 4, 3]$$$, then $$$f(2, 4) = [1, 1, 5]$$$.Your task is to calculate the number of pairs $$$(l, r)$$$ such that $$$1 \\le l \\le r \\le x$$$ and $$$f(l, r)$$$ is sorted in non-descending order. Note that the empty array is also considered sorted.",
    "editorial": "Lets find the maximum number $$$pref$$$ such that all values $$$1, 2, \\dots, pref$$$ form the non-descending order array. It can be done the following way. Let values $$$1, 2, \\dots, x$$$ form the non-descending order array. Then values $$$1, 2, \\dots, x, x+1$$$ will form the non-descending order array if the first occurrence of $$$x+1$$$ in array $$$a$$$ is after the last occurrence of $$$x$$$. In similar manner we can find the minimum number $$$suf$$$ such that all values $$$suf, suf+1, \\dots, x$$$ form the non-descending order array.Now let's find out how to get the minimum number $$$s$$$ such that all values $$$1, 2, \\dots, p, s, s + 1, \\dots, x$$$ form the non-descending order array if we fixed the value $$$p$$$. We denote this value $$$s$$$ for some fixed value $$$p$$$ as $$$f(p)$$$. Firstly, conditions $$$s > p$$$, $$$suf \\le s$$$ and $$$p \\le pre$$$ should hold. Secondly, there should be no such a pair $$$(m, r)$$$ that conditions $$$1 \\le m < r \\le n$$$, $$$1 \\le a_r, \\le p$$$ and $$$s \\le a_m \\le x$$$ hold. Since the condition $$$p \\le pre$$$ is satisfied, it means that $$$s$$$ must be greater than $$$\\max\\limits_{1 \\le i \\le lst} a_i$$$, where $$$lst$$$ is the last occurrence of $$$p$$$ in array $$$a$$$.In this way the answer is $$$\\sum\\limits_{i=1}^{pref} (x - f(i) + 1)$$$."
}{
    "name": "System Testing",
    "code": [
        "1121",
        "C"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1600,
    "statement": "Vasya likes taking part in Codeforces contests. When a round is over, Vasya follows all submissions in the system testing tab.There are $$$n$$$ solutions, the $$$i$$$-th of them should be tested on $$$a_i$$$ tests, testing one solution on one test takes $$$1$$$ second. The solutions are judged in the order from $$$1$$$ to $$$n$$$. There are $$$k$$$ testing processes which test solutions simultaneously. Each of them can test at most one solution at a time.At any time moment $$$t$$$ when some testing process is not judging any solution, it takes the first solution from the queue and tests it on each test in increasing order of the test ids. Let this solution have id $$$i$$$, then it is being tested on the first test from time moment $$$t$$$ till time moment $$$t + 1$$$, then on the second test till time moment $$$t + 2$$$ and so on. This solution is fully tested at time moment $$$t + a_i$$$, and after that the testing process immediately starts testing another solution.Consider some time moment, let there be exactly $$$m$$$ fully tested solutions by this moment. There is a caption \"System testing: $$$d$$$%\" on the page with solutions, where $$$d$$$ is calculated as$$$$$$d = round\\left(100\\cdot\\frac{m}{n}\\right),$$$$$$where $$$round(x) = \\lfloor{x + 0.5}\\rfloor$$$ is a function which maps every real to the nearest integer.Vasya calls a submission interesting if there is a time moment (possibly, non-integer) when the solution is being tested on some test $$$q$$$, and the caption says \"System testing: $$$q$$$%\". Find the number of interesting solutions.Please note that in case when multiple processes attempt to take the first submission from the queue at the same moment (for instance, at the initial moment), the order they take the solutions does not matter.",
    "editorial": "Let's determine for each solution when it begins being tested. It can be done, for example, by the following algorithm: let's store for each testing process the time when it becomes free to test something (initially all these $$$k$$$ numbers are zeroes), then iterate over all solutions in the queue and for each of them we pick a process with minimal time, say that it's the time when this solution begins being tested, and then update the time when this process stops testing.After we determined this, we can easily know for each moment the number of solutions which are completely tested before this moment, and then for each test of each solution just check the required condition of being interesting on this test."
}{
    "name": "Mezo Playing Zoma",
    "code": [
        "1285",
        "A"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 800,
    "statement": "Today, Mezo is playing a game. Zoma, a character in that game, is initially at position $$$x = 0$$$. Mezo starts sending $$$n$$$ commands to Zoma. There are two possible commands:  'L' (Left) sets the position $$$x: =x - 1$$$;  'R' (Right) sets the position $$$x: =x + 1$$$. Unfortunately, Mezo's controller malfunctions sometimes. Some commands are sent successfully and some are ignored. If the command is ignored then the position $$$x$$$ doesn't change and Mezo simply proceeds to the next command.For example, if Mezo sends commands \"LRLR\", then here are some possible outcomes (underlined commands are sent successfully):   \"LRLR\" \u2014 Zoma moves to the left, to the right, to the left again and to the right for the final time, ending up at position $$$0$$$;  \"LRLR\" \u2014 Zoma recieves no commands, doesn't move at all and ends up at position $$$0$$$ as well;  \"LRLR\" \u2014 Zoma moves to the left, then to the left again and ends up in position $$$-2$$$. Mezo doesn't know which commands will be sent successfully beforehand. Thus, he wants to know how many different positions may Zoma end up at.",
    "editorial": "Let $$$c_L$$$ and $$$c_R$$$ be the number of 'L's and 'R's in the string respectively. Note that Zoma may end up at any integer point in the interval $$$[-c_L, c_R]$$$. So, the answer equals $$$c_R - (-c_L) + 1 = n + 1$$$."
}{
    "name": "Tree Requests",
    "code": [
        "570",
        "D"
    ],
    "tags": [
        "binary search",
        "bitmasks",
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "difficulty": 2200,
    "statement": "Roman planted a tree consisting of n vertices. Each vertex contains a lowercase English letter. Vertex 1 is the root of the tree, each of the n - 1 remaining vertices has a parent in the tree. Vertex is connected with its parent by an edge. The parent of vertex i is vertex pi, the parent index is always less than the index of the vertex (i.e., pi < i).The depth of the vertex is the number of nodes on the path from the root to v along the edges. In particular, the depth of the root is equal to 1.We say that vertex u is in the subtree of vertex v, if we can get from u to v, moving from the vertex to the parent. In particular, vertex v is in its subtree.Roma gives you m queries, the i-th of which consists of two numbers vi, hi. Let's consider the vertices in the subtree vi located at depth hi. Determine whether you can use the letters written at these vertices to make a string that is a palindrome. The letters that are written in the vertexes, can be rearranged in any order to make a palindrome, but all letters should be used.",
    "editorial": ""
}{
    "name": "Berland collider",
    "code": [
        "24",
        "E"
    ],
    "tags": [
        "binary search"
    ],
    "difficulty": 2300,
    "statement": "Recently the construction of Berland collider has been completed. Collider can be represented as a long narrow tunnel that contains n particles. We associate with collider 1-dimensional coordinate system, going from left to right. For each particle we know its coordinate and velocity at the moment of start of the collider. The velocities of the particles don't change after the launch of the collider. Berland scientists think that the big bang will happen at the first collision of particles, whose velocities differs in directions. Help them to determine how much time elapses after the launch of the collider before the big bang happens.",
    "editorial": ""
}{
    "name": "The penguin's game",
    "code": [
        "835",
        "E"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "interactive"
    ],
    "difficulty": 2400,
    "statement": "Pay attention: this problem is interactive.Penguin Xoriy came up with a new game recently. He has n icicles numbered from 1 to n. Each icicle has a temperature\u00a0\u2014 an integer from 1 to 109. Exactly two of these icicles are special: their temperature is y, while a temperature of all the others is x \u2260 y. You have to find those special icicles. You can choose a non-empty subset of icicles and ask the penguin what is the bitwise exclusive OR (XOR) of the temperatures of the icicles in this subset. Note that you can't ask more than 19 questions.You are to find the special icicles.",
    "editorial": "The solution can be separated into several parts.I. Finding the parity of the number of special icicles in the given subset using 1 question.Consider the following cases:   Subset's size is even, the number of special icicles in it is even. Then the answer to such question is 0.  Subset's size is even, the number of special icicles in it is odd. Then the answer to such question is .  Subset's size is odd, the number of special icicles in it is even. Then the answer to such question is x.  Subset's size is odd, the number of special icicles in it is odd. Then the answer to such question is y. x, y \u2265 1 and x \u2260 y, so the numbers 0, x, y,  are pairwise distinct. Therefore, we can find the parity of the number of special icicles on the given subset using 1 question.II. The solution for the problem for the only one special icicle.Suppose we have n icicles, and one of them is special. Then you can find it using  questions.The algorithm is to use binary search over the minimum prefix that contains the special icicle.III. The solution of our problem.Each integer n \u2264 1000 can be written using no more than  bits. Iterate over the bits from 0 to . Ask a question about the icicles that have 1 in their numbers in the fixed bit. After that, we can determine if the numbers of the special icicles differ in this bit. Really, the bits differ if this subset's size is odd, and don't differ otherwise.Obviously, we will find at least one bit, where their numbers differ. Let A is the subset of the icicles that have 1 in this bit, and B is the complement set. Let m is the size of the smallest from these subsets. Then . Let's solve the problem for the only one special icicle for the smallest of these subsets.Then it's easy to get the number of the other icicle: we know the number of the first icicle and we know in which bits the numbers differ and in which don't.This solution uses 19 question. It can be proven that in the given constraints you can't solve this problem in less than 19 questions."
}{
    "name": "Star MST",
    "code": [
        "1657",
        "E"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "graph matchings",
        "math"
    ],
    "difficulty": 2200,
    "statement": "In this problem, we will consider complete undirected graphs consisting of $$$n$$$ vertices with weighted edges. The weight of each edge is an integer from $$$1$$$ to $$$k$$$.An undirected graph is considered beautiful if the sum of weights of all edges incident to vertex $$$1$$$ is equal to the weight of MST in the graph. MST is the minimum spanning tree\u00a0\u2014 a tree consisting of $$$n-1$$$ edges of the graph, which connects all $$$n$$$ vertices and has the minimum sum of weights among all such trees; the weight of MST is the sum of weights of all edges in it.Calculate the number of complete beautiful graphs having exactly $$$n$$$ vertices and the weights of edges from $$$1$$$ to $$$k$$$. Since the answer might be large, print it modulo $$$998244353$$$.",
    "editorial": "Let the weight of the edge between the vertex $$$x$$$ to the vertex $$$y$$$ be $$$w_{x,y}$$$.Suppose there exists a pair of vertices $$$x$$$ and $$$y$$$ (with indices greater than $$$2$$$) such that $$$w_{x,y} < w_{1,x}$$$ or $$$w_{x,y} < w_{1,y}$$$. Then, if we choose the spanning tree with all vertices connected to $$$1$$$, it won't be an MST: we can remove either the edge $$$(1,x)$$$ or the edge $$$(1,y)$$$, add the edge $$$(x,y)$$$ instead, and the cost of the spanning tree will decrease. So, we should have $$$w_{x,y} \\ge \\max(w_{1,x}, w_{1,y})$$$ for every pair $$$(x, y)$$$.It can be shown that this condition is not only necessary, but sufficient as well: if for every pair $$$(x, y)$$$ the condition $$$w_{x,y} \\ge \\max(w_{1,x}, w_{1,y})$$$ holds, the MST can't have the weight less than $$$\\sum \\limits_{i=2}^{n} w_{1,i}$$$. We can prove this by induction (suppose that $$$w_{1,2} \\le w_{1,3} \\le \\ldots \\le w_{1,n}$$$ for simplicity):  in the spanning tree, there should be at least one edge incident to vertex $$$n$$$, and its weight is at least $$$w_{1,n}$$$;  there should be at least two edges incident to vertices $$$n$$$ and $$$n-1$$$, and their weights are at least $$$w_{1,n-1} + w_{1,n}$$$;  ...;  there should be at least $$$n-1$$$ edges incident to vertices from $$$2$$$ to $$$n$$$, and their weights are at least $$$\\sum \\limits_{i=2}^{n} w_{1,i}$$$. Okay, now let's show how to calculate the number of such graphs. We can run the following dynamic programming: let $$$dp_{i,j}$$$ be the number of graphs where we have already connected $$$i$$$ vertices to the vertex $$$1$$$, and the maximum weight we have used is $$$j$$$. We start with $$$dp_{0,0}$$$, and for each transition from $$$dp_{i,j}$$$, we will iterate on the number of vertices we connect to the vertex $$$1$$$ with edges with weight $$$(j+1)$$$ (let the number of those vertices be $$$t$$$), choose them with a binomial coefficient $$$\\frac{(n-1-i)!}{t!(n-1-i-t)!}$$$, and also choose the weights for the edges that connect one of the chosen vertices with one of the vertices already connected to $$$1$$$ (since for each of those edges, we know that their weights should be in $$$[j+1,k]$$$) \u2014 so, we need to multiply the value in transition by $$$(k-j)^e$$$, where $$$e$$$ is the number of such edges.Implementing this dynamic programming can be done in $$$O(n^2k)$$$ or $$$O(n^2 k \\log n)$$$, both are sufficient."
}{
    "name": "Bargain",
    "code": [
        "1422",
        "C"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "difficulty": 1700,
    "statement": "Sometimes it is not easy to come to an agreement in a bargain. Right now Sasha and Vova can't come to an agreement: Sasha names a price as high as possible, then Vova wants to remove as many digits from the price as possible. In more details, Sasha names some integer price $$$n$$$, Vova removes a non-empty substring of (consecutive) digits from the price, the remaining digits close the gap, and the resulting integer is the price.For example, is Sasha names $$$1213121$$$, Vova can remove the substring $$$1312$$$, and the result is $$$121$$$.It is allowed for result to contain leading zeros. If Vova removes all digits, the price is considered to be $$$0$$$.Sasha wants to come up with some constraints so that Vova can't just remove all digits, but he needs some arguments supporting the constraints. To start with, he wants to compute the sum of all possible resulting prices after Vova's move.Help Sasha to compute this sum. Since the answer can be very large, print it modulo $$$10^9 + 7$$$.",
    "editorial": "Let's count for each digit how many times it will be included in the final sum and in what place. Let's denote $$$ m $$$ as the length of the number $$$ n $$$. Consider the digit $$$ a_i $$$ at the position $$$ i $$$ in the number $$$ n $$$ ($$$ 1 \\le i \\le m $$$). If some part of the number to the left of the digit is removed, then the current digit will remain in its place \u00a0\u2014 and we add the number of ways to remove the subsegment to the left to the answer multiplied by the current digit $$$ i * (i - 1) / 2 \\times 10 ^ {m - i} \\times a_i $$$. If the segment to the right is deleted, then the place of the digit will change \u2013 $$$ (j + 1) \\times 10^j \\times a_i $$$ for all $$$ 0 \\le j < m - i $$$, or $$$ \\sum_ {j = 0 }^{m - i - 1} {(j + 1) \\times 10 ^ j} \\times a_i $$$. The $$$ j $$$ sum can be pre-calculated for all values."
}{
    "name": "Island Puzzle",
    "code": [
        "627",
        "F"
    ],
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 3400,
    "statement": "A remote island chain contains n islands, with some bidirectional bridges between them. The current bridge network forms a tree. In other words, a total of n - 1 bridges connect pairs of islands in a way that it's possible to reach any island from any other island using the bridge network. The center of each island contains an identical pedestal, and all but one of the islands has a fragile, uniquely colored statue currently held on the pedestal. The remaining island holds only an empty pedestal.The islanders want to rearrange the statues in a new order. To do this, they repeat the following process: first, they choose an island directly adjacent to the island containing an empty pedestal. Then, they painstakingly carry the statue on this island across the adjoining bridge and place it on the empty pedestal.It is often impossible to rearrange statues in the desired order using only the operation described above. The islanders would like to build one additional bridge in order to make this achievable in the fewest number of movements possible. Find the bridge to construct and the minimum number of statue movements necessary to arrange the statues in the desired position.",
    "editorial": ""
}{
    "name": "Far Relative\u2019s Problem",
    "code": [
        "629",
        "B"
    ],
    "tags": [
        "brute force"
    ],
    "difficulty": 1100,
    "statement": "Famil Door wants to celebrate his birthday with his friends from Far Far Away. He has n friends and each of them can come to the party in a specific range of days of the year from ai to bi. Of course, Famil Door wants to have as many friends celebrating together with him as possible.Far cars are as weird as Far Far Away citizens, so they can only carry two people of opposite gender, that is exactly one male and one female. However, Far is so far from here that no other transportation may be used to get to the party.Famil Door should select some day of the year and invite some of his friends, such that they all are available at this moment and the number of male friends invited is equal to the number of female friends invited. Find the maximum number of friends that may present at the party.",
    "editorial": ""
}{
    "name": "Omkar and Duck",
    "code": [
        "1392",
        "E"
    ],
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "interactive",
        "math"
    ],
    "difficulty": 2100,
    "statement": "This is an interactive problem.Omkar has just come across a duck! The duck is walking on a grid with $$$n$$$ rows and $$$n$$$ columns ($$$2 \\leq n \\leq 25$$$) so that the grid contains a total of $$$n^2$$$ cells. Let's denote by $$$(x, y)$$$ the cell in the $$$x$$$-th row from the top and the $$$y$$$-th column from the left. Right now, the duck is at the cell $$$(1, 1)$$$ (the cell in the top left corner) and would like to reach the cell $$$(n, n)$$$ (the cell in the bottom right corner) by moving either down $$$1$$$ cell or to the right $$$1$$$ cell each second.Since Omkar thinks ducks are fun, he wants to play a game with you based on the movement of the duck. First, for each cell $$$(x, y)$$$ in the grid, you will tell Omkar a nonnegative integer $$$a_{x,y}$$$ not exceeding $$$10^{16}$$$, and Omkar will then put $$$a_{x,y}$$$ uninteresting problems in the cell $$$(x, y)$$$. After that, the duck will start their journey from $$$(1, 1)$$$ to $$$(n, n)$$$. For each cell $$$(x, y)$$$ that the duck crosses during their journey (including the cells $$$(1, 1)$$$ and $$$(n, n)$$$), the duck will eat the $$$a_{x,y}$$$ uninteresting problems in that cell. Once the duck has completed their journey, Omkar will measure their mass to determine the total number $$$k$$$ of uninteresting problems that the duck ate on their journey, and then tell you $$$k$$$.Your challenge, given $$$k$$$, is to exactly reproduce the duck's path, i. e. to tell Omkar precisely which cells the duck crossed on their journey. To be sure of your mastery of this game, Omkar will have the duck complete $$$q$$$ different journeys ($$$1 \\leq q \\leq 10^3$$$). Note that all journeys are independent: at the beginning of each journey, the cell $$$(x, y)$$$ will still contain $$$a_{x,y}$$$ uninteresting tasks.",
    "editorial": "The problem essentially boils down to constructing a grid such that any path from $$$(1, 1)$$$ to $$$(n, n)$$$ has a different sum and you can easily determine any path from its sum. You can do this using the following construction: for all $$$(x, y)$$$, if $$$x$$$ is even, then let $$$a_{x,y} = 2^{x + y}$$$; otherwise, let $$$a_{x,y} = 0$$$.The construction is illustrated below for $$$n = 8$$$:$$$ \\begin{matrix} 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^{3} & 2^{4} & 2^{5} & 2^{6} & 2^{7} & 2^{8} & 2^{9} & 2^{10} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^{5} & 2^{6} & 2^{7} & 2^{8} & 2^{9} & 2^{10} & 2^{11} & 2^{12} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^{7} & 2^{8} & 2^{9} & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^{9} & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} & 2^{15} & 2^{16} \\\\ \\end{matrix} $$$You can see that this construction works using the following observations:   The maximum value of $$$n$$$ is $$$25$$$, and $$$2^{2 \\cdot 25} = 2^{50} < 10^{16}$$$.  For any integer $$$j$$$ between $$$2$$$ and $$$2n$$$ (inclusive), all paths cross exactly one cell $$$(x, y)$$$ such that $$$x + y = j$$$.  For any cell $$$(x, y)$$$, you can move to either one or two cells, and if you can move to two cells, then exactly one of those will have $$$x'$$$ even and exactly one of those will have $$$x'$$$ odd, as the cells will necessarily be $$$(x + 1, y)$$$ and $$$(x, y + 1)$$$ which have different parities of $$$x'$$$. This means that the sum on any path will be the sum of distinct powers of $$$2$$$ between $$$2^2$$$ and $$$2^{2n}$$$ (inclusive), meaning that given that we know which cell $$$(x, y)$$$ the path crossed satisfying $$$x + y = j$$$, we can determine which cell $$$(x', y')$$$ the path crossed satisfying $$$x' + y' = j + 1$$$ by checking whether the path sum contains $$$2^{j + 1}$$$ and then appropriately selecting either $$$(x', y') = (x + 1, y)$$$ or $$$(x', y') = (x, y + 1)$$$. We know that the path must start at $$$(1, 1)$$$ so we can therefore easily determine the rest of the path given the sum."
}{
    "name": "Knights",
    "code": [
        "1067",
        "C"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 2600,
    "statement": "Ivan places knights on infinite chessboard. Initially there are $$$n$$$ knights. If there is free cell which is under attack of at least $$$4$$$ knights then he places new knight in this cell. Ivan repeats this until there are no such free cells. One can prove that this process is finite. One can also prove that position in the end does not depend on the order in which new knights are placed.Ivan asked you to find initial placement of exactly $$$n$$$ knights such that in the end there will be at least $$$\\lfloor \\frac{n^{2}}{10} \\rfloor$$$ knights.",
    "editorial": "If after some loops of the process we will have two neighboring lines with length $$$x$$$ total complexity of knights would be not less than $$$O( \\frac{x^2}{4} )$$$.In this construction:$$$0$$$\u00a0\u2014 initial placement.$$$1, \\,\\, 2$$$\u00a0\u2014 added knights. Would be two neighboring lines with length $$$O(\\frac{2 \\cdot n}{3})$$$ so total complexity of knights would be $$$O( \\frac{(\\frac{2 \\cdot n}{3})^2}{4} ) = O( \\frac{n^2}{9} )$$$.The possible way to facilitate the invention this (or over) solutions is to write process modeling.Bonus: Solve this problem with complexity $$$ O( \\frac{n^2}{6} )$$$."
}{
    "name": "Cheese Board",
    "code": [
        "952",
        "E"
    ],
    "tags": [],
    "difficulty": 2000,
    "statement": "Not to be confused with chessboard.  ",
    "editorial": "This problem was inspired by the first line of Wikipedia article Chessboard: \"Not to be confused with cheese board\". Indeed, cheese board, chess board, what's the difference really? :-)The image in the statement showed a bunch of cheeses (from the first example) arranged in a chessboard pattern, with soft cheeses representing one \"color\" of the squares and hard cheeses representing the other. The task was to find out the smallest size of a square \"chessboard\" on which the given cheeses could be arranged in such a way that soft and hard cheeses would alternate, and cheeses of the same type would never occupy adjacent squares.Once you've figured out the task, the solution is very straightforward. First, count the numbers of soft and hard cheeses. Iterate through the sizes of the chessboard, starting with 1, and for each size count the number of black and white cells on it. If the number of black cells is greater than or equal to the number of hard cheeses and the number of white cells is greater than or equal to the number of soft cheeses or vice versa, return this size of the board."
}{
    "name": "Game 23",
    "code": [
        "1141",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "Polycarp plays \"Game 23\". Initially he has a number $$$n$$$ and his goal is to transform it to $$$m$$$. In one move, he can multiply $$$n$$$ by $$$2$$$ or multiply $$$n$$$ by $$$3$$$. He can perform any number of moves.Print the number of moves needed to transform $$$n$$$ to $$$m$$$. Print -1 if it is impossible to do so.It is easy to prove that any way to transform $$$n$$$ to $$$m$$$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).",
    "editorial": "If $$$m$$$ is not divisible by $$$n$$$ then just print -1 and stop the program. Otherwise, calculate $$$d=m/n$$$, denoting the required number of times to multiply $$$n$$$. It is easy to see that $$$d$$$ should be a product of zero or more $$$2$$$'s and of zero or more $$$3$$$'s, i.e. $$$d=2^x3^y$$$ for integers $$$x,y \\ge 0$$$. To find $$$x$$$ just use a loop to divide $$$d$$$ by $$$2$$$ while it is divisible by $$$2$$$. Similarly, to find $$$y$$$ just use a loop to divide $$$d$$$ by $$$3$$$ while it is divisible by $$$3$$$. After the divisions, the expected value of $$$d$$$ is $$$1$$$. If $$$d \\ne 1$$$, print -1. Otherwise, print the total number of the loop iterations."
}{
    "name": "Antenna Coverage",
    "code": [
        "1253",
        "E"
    ],
    "tags": [
        "data structures",
        "dp",
        "greedy",
        "sortings"
    ],
    "difficulty": 2200,
    "statement": "The mayor of the Central Town wants to modernize Central Street, represented in this problem by the $$$(Ox)$$$ axis.On this street, there are $$$n$$$ antennas, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th antenna lies on the position $$$x_i$$$ and has an initial scope of $$$s_i$$$: it covers all integer positions inside the interval $$$[x_i - s_i; x_i + s_i]$$$.It is possible to increment the scope of any antenna by $$$1$$$, this operation costs $$$1$$$ coin. We can do this operation as much as we want (multiple times on the same antenna if we want).To modernize the street, we need to make all integer positions from $$$1$$$ to $$$m$$$ inclusive covered by at least one antenna. Note that it is authorized to cover positions outside $$$[1; m]$$$, even if it's not required.What is the minimum amount of coins needed to achieve this modernization?",
    "editorial": "We can add an antenna $$$(x=0, s=0)$$$. It will not modifiy the answer, because it would be non-optimal to increase the scope of this antenna.Let $$$dp_x$$$ be the minimum cost to cover all positions from $$$x$$$ to $$$m$$$ inclusive, knowing that position $$$x$$$ is covered. We compute $$$dp$$$ in decreasing order of $$$x$$$.Base case is $$$dp_m := 0$$$.The default transition is $$$dp_x := (m - x)$$$.If position $$$x+1$$$ is initially covered, $$$dp_x := dp_{x+1}$$$Otherwise, let's consider all antennas and their initial intervals $$$[l_i; r_i]$$$. If $$$x < l_i$$$, let $$$u = (l_i - x - 1)$$$, then a possible transition is $$$dp_x := u + dp_{min(m, r_i + u)}$$$.We take the minimum of all these transitions. Note that we always extend intervals as less as possible, but it's optimal because :   If after using this interval $$$i$$$, we use another interval $$$j$$$ (at the right of $$$i$$$), the time spent to extend $$$i$$$ could have been used to extend $$$j$$$ instead, which will be more optimal.  If $$$i$$$ was the last interval used, we don't care because the default transition will take care of this case. The final answer will be $$$dp_0$$$.There are $$$O(m)$$$ states and $$$O(n)$$$ transitions, hence final complexity is $$$O(nm)$$$ with very low constant. $$$O(n^2 \\cdot m)$$$ can also get AC because of very low constant.Implementation"
}{
    "name": "Pave the Parallelepiped",
    "code": [
        "1007",
        "B"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "combinatorics",
        "math",
        "number theory"
    ],
    "difficulty": 2400,
    "statement": "You are given a rectangular parallelepiped with sides of positive integer lengths $$$A$$$, $$$B$$$ and $$$C$$$. Find the number of different groups of three integers ($$$a$$$, $$$b$$$, $$$c$$$) such that $$$1\\leq a\\leq b\\leq c$$$ and parallelepiped $$$A\\times B\\times C$$$ can be paved with parallelepipeds $$$a\\times b\\times c$$$. Note, that all small parallelepipeds have to be rotated in the same direction.For example, parallelepiped $$$1\\times 5\\times 6$$$ can be divided into parallelepipeds $$$1\\times 3\\times 5$$$, but can not be divided into parallelepipeds $$$1\\times 2\\times 3$$$.",
    "editorial": "First solution.First, for every natural number up to $$$10^5$$$ we count its number of divisors in $$$O(\\sqrt{n})$$$. Also for every unordered set of $$$3$$$ masks $$$(m_1, m_2, m_3)$$$ of length $$$3$$$ we check if there is \u0430 way to enumerate them in such a way that $$$1 \\in m_1$$$, $$$2 \\in m_2$$$ and $$$3 \\in m_3$$$. We will call such sets acceptable.Now let's consider two parallelepipeds. For each dimension of the second parallelepiped let's construct a mask of length $$$3$$$ which contains the numbers of the dimensions of the first parallelepiped for which the length of the first parallelepiped along this dimension is divisible by the length of the second parallelepiped along the chosen dimension. Now these three masks form an acceptable set iff we can pave the first parallelepiped with the second one.Now for a given parallelepiped let's calculate for every mask of length $$$3$$$ the number of possible lengths of the second parallelepiped which would produce this mask. We can do this by taking the GCD of the lengths of the first parallelepiped along the dimensions whose numbers are in the mask, and subtracting from it the calculated numbers for every submask.Now let's iterate over acceptable sets of masks. For each different mask from the set which is included into the set $$$k$$$ times we need to calculate the number of ways to take $$$k$$$ unordered lengths which produce this mask, and multiply these numbers. The sum of these numbers is the answers to the query.So for every query we need $$$O \\left( 2^{m^2} \\right)$$$ operations, where $$$m = 3$$$ is the number of dimensions of the parallelepiped.Second solution.First, for every natural number up to $$$10^5$$$ we count its number of divisors in $$$O(\\sqrt{n})$$$.Then for every query for every subset of numbers in it we keep their GCD and the number of its divisors. So for every subset of this three numbers we know the number of their common divisors.Let's look at the parallelepiped $$$(a, b, c)$$$. The way we orient it with respect to the large parallelepiped is determined by a permutation of size $$$3$$$\u00a0\u2014 that is, which dimension would correspond to every dimension in the large one. Using the inclusion-exclusion principle on this permutations we can count how many there are such parallelepipeds (considering the orientation) that we can orient some way to then pave the large parallelepiped with it. Namely, we fix the set of permutations for which our parallelepiped shall satisfy. Then for every side of the small parallelepiped we know which sides of the large one it shall divide. To find the number of such sides of the small one we shall take the number of common divisors of the corresponding sides of the large one. Now to find the number of such small parallelepipeds we must multiply the three resultant numbers.In such way every satisfying this criteria parallelepiped (not considering the orientation) with three different side lengths was counted $$$6$$$ times, with two different lengths was counted $$$3$$$ times, with one different length was counted $$$1$$$ time. But it won't be difficult for us to use the same approach in counting such parallelepipeds, but with no less than two same side lengths: let's say the first and the second. To do this when we fix which permutations this parallelepiped shall satisfy we should just add the condition that its first and second side lengths must be equal, this means they both must divide both of the sets corresponding to them, so instead of this two sets we must take their union.Let's add the resultant number multiplied by three to the answer. Now every parallelepiped with three different side length is still counted $$$6$$$ times, with two different is now counted also $$$6$$$ times, and with one different is counted $$$4$$$ times. The number of satisfying parallelepipeds with equal sides is just the number of common divisors of all the sides of the large parallelepiped. Let's add it multiplied by two, and now every needed parallelepiped is counted $$$6$$$ times. We divide this number by $$$6$$$ and get the answer.So for every query we need $$$O \\left( p(m) \\cdot 2^{m!} \\cdot m \\right)$$$ operations, where $$$p(m)$$$ is the number of partitions of $$$m$$$, and $$$m = 3$$$ is the number of dimensions of the parallelepiped."
}{
    "name": "I Hate 1111",
    "code": [
        "1526",
        "B"
    ],
    "tags": [
        "dp",
        "math",
        "number theory"
    ],
    "difficulty": 1400,
    "statement": "You are given an integer $$$x$$$. Can you make $$$x$$$ by summing up some number of $$$11, 111, 1111, 11111, \\ldots$$$? (You can use any number among them any number of times).For instance,   $$$33=11+11+11$$$  $$$144=111+11+11+11$$$ ",
    "editorial": ""
}{
    "name": "All Possible Digits",
    "code": [
        "1759",
        "F"
    ],
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "math",
        "number theory"
    ],
    "difficulty": 1800,
    "statement": "A positive number $$$x$$$ of length $$$n$$$ in base $$$p$$$ ($$$2 \\le p \\le 10^9$$$) is written on the blackboard. The number $$$x$$$ is given as a sequence $$$a_1, a_2, \\dots, a_n$$$ ($$$0 \\le a_i < p$$$) \u2014 the digits of $$$x$$$ in order from left to right (most significant to least significant).Dmitry is very fond of all the digits of this number system, so he wants to see each of them at least once.In one operation, he can:   take any number $$$x$$$ written on the board, increase it by $$$1$$$, and write the new value $$$x + 1$$$ on the board. For example, $$$p=5$$$ and $$$x=234_5$$$.  Initially, the board contains the digits $$$2$$$, $$$3$$$ and $$$4$$$;  Dmitry increases the number $$$234_5$$$ by $$$1$$$ and writes down the number $$$240_5$$$. On the board there are digits $$$0, 2, 3, 4$$$;  Dmitry increases the number $$$240_5$$$ by $$$1$$$ and writes down the number $$$241_5$$$. Now the board contains all the digits from $$$0$$$ to $$$4$$$. Your task is to determine the minimum number of operations required to make all the digits from $$$0$$$ to $$$p-1$$$ appear on the board at least once.",
    "editorial": "If all digits from $$$0$$$ to $$$p-1$$$ are initially present in the number, then the answer is $$$0$$$.Each time we will increase the number by $$$1$$$. If the last digit is less than $$$p-1$$$, then only it will change. Otherwise, all digits equal to $$$p-1$$$ at the end will become equal to $$$0$$$, and the previous one will increase by $$$1$$$ (or a new digit equal to $$$1$$$ will be added if all digits were equal to $$$p-1$$$).For a $$$p-1$$$ operation, the last digit will run through all possible values. However, we can get all the numbers earlier. We will solve the problem using binary search, sorting through the number of operations.We can have 2 options: whether $$$0$$$ was at the end or not. Depending on this, one or two subsegments of the segment $$$[0, p-1]$$$ \u2014 a subsegment in the middle or a prefix and a suffix remained uncovered by the last digit of the number. They need to be completely covered with numbers that were already in positions, except for the last one \u2014 these are the original numbers and, in case there was $$$0$$$ at the end, the number into which the transfer was made. There are at most $$$n+1$$$ of them."
}{
    "name": "Fake Plastic Trees",
    "code": [
        "1693",
        "B"
    ],
    "tags": [
        "dfs and similar",
        "dp",
        "greedy",
        "trees"
    ],
    "difficulty": 1700,
    "statement": "We are given a rooted tree consisting of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. The root of the tree is the vertex $$$1$$$ and the parent of the vertex $$$v$$$ is $$$p_v$$$.There is a number written on each vertex, initially all numbers are equal to $$$0$$$. Let's denote the number written on the vertex $$$v$$$ as $$$a_v$$$.For each $$$v$$$, we want $$$a_v$$$ to be between $$$l_v$$$ and $$$r_v$$$ $$$(l_v \\leq a_v \\leq r_v)$$$.In a single operation we do the following:   Choose some vertex $$$v$$$. Let $$$b_1, b_2, \\ldots, b_k$$$ be vertices on the path from the vertex $$$1$$$ to vertex $$$v$$$ (meaning $$$b_1 = 1$$$, $$$b_k = v$$$ and $$$b_i = p_{b_{i + 1}}$$$). Choose a non-decreasing array $$$c$$$ of length $$$k$$$ of nonnegative integers: $$$0 \\leq c_1 \\leq c_2 \\leq \\ldots \\leq c_k$$$. For each $$$i$$$ $$$(1 \\leq i \\leq k)$$$, increase $$$a_{b_i}$$$ by $$$c_i$$$. What's the minimum number of operations needed to achieve our goal?",
    "editorial": "Lemma 1. You won't perform the operation on a particular vertex more than once. Because you could merge the operations.Lemma 2. If you perform the operation on some vertex $$$v$$$, you can do it with $$$c_k = r_v$$$. If there is another operation that helps this vertex, you can cut the operation into two pieces and merge one with the operation that starts at $$$v$$$. And you can just increase $$$c_k$$$ if it's not equal to $$$r_v$$$.Define $$$dp_v$$$ as the minimum number of operations needed to satisfy the conditions on the vertices in the subtree of vertex $$$v$$$.We claim that there is a way to achieve our goal with minimum number of operations in which for each vertex $$$v$$$ there are exactly $$$dp_v$$$ operations done in the subtree of vertex $$$v$$$.Imagine there is a vertex $$$v$$$ that there are more than $$$dp_v$$$ operations on vertices in the subtree of vertex $$$v$$$. We can instead satisfy the subtree by $$$dp_v$$$ operations and make sure that we perform the operation on vertex $$$p_v$$$.Denote $$$mx_v$$$ as the maximum value that vertex $$$v$$$ can pass to its ancestors if exactly $$$dp_v$$$ operations are performed in the subtree of vertex $$$v$$$.We need to perform the operation on a vertex $$$v$$$ if and only if $$$\\sum_\\limits{u | p_u = v}{mx_u} < l_v$$$.If we need to perform the operation on vertex $$$v$$$ then $$$mx_v = r_v$$$, otherwise $$$mx_v = min(r_v, \\sum_\\limits{u | p_u = v}{mx_u})$$$.Time complexity: $$$\\mathcal{O}(n)$$$"
}{
    "name": "Hex Dyslexia",
    "code": [
        "865",
        "E"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "graphs"
    ],
    "difficulty": 3300,
    "statement": "Copying large hexadecimal (base 16) strings by hand can be error prone, but that doesn't stop people from doing it. You've discovered a bug in the code that was likely caused by someone making a mistake when copying such a string. You suspect that whoever copied the string did not change any of the digits in the string, nor the length of the string, but may have permuted the digits arbitrarily. For example, if the original string was 0abc they may have changed it to a0cb or 0bca, but not abc or 0abb.Unfortunately you don't have access to the original string nor the copied string, but you do know the length of the strings and their numerical absolute difference. You will be given this difference as a hexadecimal string S, which has been zero-extended to be equal in length to the original and copied strings. Determine the smallest possible numerical value of the original string.",
    "editorial": "First, observe that for a solution to exist, the sum of the digits in the input must be divisible by 15. This is because of the Casting out Nines rule, but applied in base 16. Furthermore, the sum of digits, when divided by 15, tells us how many carries must be performed when adding the answer to the input. We can try every possible set of positions for the carries, of which there are at most  ways. Once the carries are fixed, for each position we know the exact difference between the original digit in that position and the permuted digit in that position.Now let's consider the permutation itself. Any permutation can be decomposed into cycles. Because we're looking for the minimum solution, it must be the case that every cycle in the permutation contains a zero. If there were a cycle without a zero, we could reduce every number in the cycle by the minimum value and produce a smaller solution. Furthermore, because every cycle contains a common element, that means the permutation can be written as a single cycle, since two cycles with a common element can be merged into one cycle using that element.To build such a cycle, we can start at a zero, and when we add a digit to the path we know based on its position what the difference must be between it and the previous digit. For each of the 2|S| subsets of positions we can compute the minimum value that corresponds to a path through those positions. This step is O(|S|\u00b72|S|).Side note: the answer, if it exists, always begins with 0. There are 2 cases to consider. If S begins with an 'f', then the only possible solutions begin with a 0. Otherwise, the value given by  is a valid solution, and starts with 0."
}{
    "name": "Parliament of Berland",
    "code": [
        "644",
        "A"
    ],
    "tags": [
        "*special",
        "constructive algorithms"
    ],
    "difficulty": 1000,
    "statement": "There are n parliamentarians in Berland. They are numbered with integers from 1 to n. It happened that all parliamentarians with odd indices are Democrats and all parliamentarians with even indices are Republicans.New parliament assembly hall is a rectangle consisting of a \u00d7 b chairs\u00a0\u2014 a rows of b chairs each. Two chairs are considered neighbouring if they share as side. For example, chair number 5 in row number 2 is neighbouring to chairs number 4 and 6 in this row and chairs with number 5 in rows 1 and 3. Thus, chairs have four neighbours in general, except for the chairs on the border of the hallWe know that if two parliamentarians from one political party (that is two Democrats or two Republicans) seat nearby they spent all time discussing internal party issues.Write the program that given the number of parliamentarians and the sizes of the hall determine if there is a way to find a seat for any parliamentarian, such that no two members of the same party share neighbouring seats.",
    "editorial": ""
}{
    "name": "Leha and another game about graph",
    "code": [
        "840",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "dp",
        "graphs"
    ],
    "difficulty": 2100,
    "statement": "Leha plays a computer game, where is on each level is given a connected graph with n vertices and m edges. Graph can contain multiple edges, but can not contain self loops. Each vertex has an integer di, which can be equal to 0, 1 or  - 1. To pass the level, he needs to find a \u00abgood\u00bb subset of edges of the graph or say, that it doesn't exist. Subset is called \u00abgood\u00bb, if by by leaving only edges from this subset in the original graph, we obtain the following: for every vertex i, di =  - 1 or it's degree modulo 2 is equal to di. Leha wants to pass the game as soon as possible and ask you to help him. In case of multiple correct answers, print any of them.",
    "editorial": ""
}{
    "name": "Combining Slimes",
    "code": [
        "618",
        "G"
    ],
    "tags": [
        "dp",
        "math",
        "matrices",
        "probabilities"
    ],
    "difficulty": 3300,
    "statement": "Your friend recently gave you some slimes for your birthday. You have a very large amount of slimes with value 1 and 2, and you decide to invent a game using these slimes.You initialize a row with n empty spaces. You also choose a number p to be used in the game. Then, you will perform the following steps while the last space is empty.   With probability , you will choose a slime with value 1, and with probability , you will choose a slime with value 2. You place the chosen slime on the last space of the board.  You will push the slime to the left as far as possible. If it encounters another slime, and they have the same value v, you will merge the slimes together to create a single slime with value v + 1. This continues on until the slime reaches the end of the board, or encounters a slime with a different value than itself. You have played the game a few times, but have gotten bored of it. You are now wondering, what is the expected sum of all values of the slimes on the board after you finish the game.",
    "editorial": "Matrix exponentiation with condition probabilities. It seems like there might be an easier solution with more simplification. "
}{
    "name": "Watermelon",
    "code": [
        "4",
        "A"
    ],
    "tags": [
        "brute force",
        "math"
    ],
    "difficulty": 800,
    "statement": "One hot summer day Pete and his friend Billy decided to buy a watermelon. They chose the biggest and the ripest one, in their opinion. After that the watermelon was weighed, and the scales showed w kilos. They rushed home, dying of thirst, and decided to divide the berry, however they faced a hard problem.Pete and Billy are great fans of even numbers, that's why they want to divide the watermelon in such a way that each of the two parts weighs even number of kilos, at the same time it is not obligatory that the parts are equal. The boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, if they can divide the watermelon in the way they want. For sure, each of them should get a part of positive weight.",
    "editorial": ""
}{
    "name": "Two Round Dances",
    "code": [
        "1433",
        "E"
    ],
    "tags": [
        "combinatorics",
        "math"
    ],
    "difficulty": 1300,
    "statement": "One day, $$$n$$$ people ($$$n$$$ is an even number) met on a plaza and made two round dances, each round dance consists of exactly $$$\\frac{n}{2}$$$ people. Your task is to find the number of ways $$$n$$$ people can make two round dances if each round dance consists of exactly $$$\\frac{n}{2}$$$ people. Each person should belong to exactly one of these two round dances.Round dance is a dance circle consisting of $$$1$$$ or more people. Two round dances are indistinguishable (equal) if one can be transformed to another by choosing the first participant. For example, round dances $$$[1, 3, 4, 2]$$$, $$$[4, 2, 1, 3]$$$ and $$$[2, 1, 3, 4]$$$ are indistinguishable.For example, if $$$n=2$$$ then the number of ways is $$$1$$$: one round dance consists of the first person and the second one of the second person.For example, if $$$n=4$$$ then the number of ways is $$$3$$$. Possible options:  one round dance \u2014 $$$[1,2]$$$, another \u2014 $$$[3,4]$$$;  one round dance \u2014 $$$[2,4]$$$, another \u2014 $$$[3,1]$$$;  one round dance \u2014 $$$[4,1]$$$, another \u2014 $$$[3,2]$$$. Your task is to find the number of ways $$$n$$$ people can make two round dances if each round dance consists of exactly $$$\\frac{n}{2}$$$ people.",
    "editorial": "Firstly, we need to choose the set of $$$\\frac{n}{2}$$$ people to be in the first round dance (the other half is going to the second one). The number of ways to do that is $$$\\binom{n}{\\frac{n}{2}}$$$. Then we need to set some order of people in both round dances, but we don't want to forget about rotation (because rotation can lead us to counting the same ways several times). So, the number of ways to arrange people inside one round dance is $$$(\\frac{n}{2} - 1)!$$$. This is true because we just \"fixed\" who will be the first in the round dance, and place others in every possible order. So, we need to multiply our initial answer by this value twice because we have two round dances. And, finally, we have to divide our answer by $$$2$$$ because we counted \"ordered\" pairs (i.e. we distinguish pairs of kind $$$(x, y)$$$ and $$$(y, x)$$$ but we don't have to do that). So, the final answer is $$$\\binom{n}{\\frac{n}{2}} \\cdot (\\frac{n}{2} - 1)! \\cdot (\\frac{n}{2} - 1)!$$$ divided by $$$2$$$. This formula can be reduced to $$$\\frac{n!}{\\frac{n}{2}^2 \\cdot 2}$$$.You could also find the sequence of answers in OEIS (and this can be really useful skill sometimes)."
}{
    "name": "Extra Element",
    "code": [
        "1185",
        "D"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1700,
    "statement": "A sequence $$$a_1, a_2, \\dots, a_k$$$ is called an arithmetic progression if for each $$$i$$$ from $$$1$$$ to $$$k$$$ elements satisfy the condition $$$a_i = a_1 + c \\cdot (i - 1)$$$ for some fixed $$$c$$$.For example, these five sequences are arithmetic progressions: $$$[5, 7, 9, 11]$$$, $$$[101]$$$, $$$[101, 100, 99]$$$, $$$[13, 97]$$$ and $$$[5, 5, 5, 5, 5]$$$. And these four sequences aren't arithmetic progressions: $$$[3, 1, 2]$$$, $$$[1, 2, 4, 8]$$$, $$$[1, -1, 1, -1]$$$ and $$$[1, 2, 3, 3, 3]$$$.You are given a sequence of integers $$$b_1, b_2, \\dots, b_n$$$. Find any index $$$j$$$ ($$$1 \\le j \\le n$$$), such that if you delete $$$b_j$$$ from the sequence, you can reorder the remaining $$$n-1$$$ elements, so that you will get an arithmetic progression. If there is no such index, output the number -1.",
    "editorial": "First of all, we should sort all elements (from smaller to larger, for example, or vice versa). But in the answer is index of element in original sequence, so let's keep the array $$$c$$$ of pairs $$$\\{b_i, i\\}$$$, sorted by $$$b_i$$$.Now we need to check some simple cases, for example, let's check the $$$1$$$-st and the $$$2$$$-nd elements whether they are the answers. We'll create the copy of original sequence, but without $$$1$$$-st element. Then we will check that all neighboring elements $$$c_i.first$$$ and $$$c_{i + 1}.first$$$ have the same difference. If it is so, $$$c_1.second$$$ is the answer. For the $$$2$$$-nd element similarly.Okay, now we have the sequence, where $$$1$$$-st and $$$2$$$-nd elements aren't the answers. Let's fix difference between them $$$d$$$ and check that all neighboring elements $$$c_i.first$$$ and $$$c_{i + 1}.first$$$ have the same difference. If we meet the pair, where the difference doesn't equal $$$d$$$, we will check the difference between $$$c_{i}.first$$$ and $$$c_{i + 2}.first$$$. If it equals $$$d$$$, so $$$c_{i + 1}.second$$$ may be the answer, otherwise there is no answer (output $$$-1$$$). If we will find one else pair, where the difference doesn't equals $$$d$$$, there is no answer too.If all pairs have the difference that equals $$$d$$$, it means that it's initially arithmetic progression. So we can remove first or last element and get arithmetic progression again. In this case let's output $$$1$$$."
}{
    "name": "Alpha planetary system",
    "code": [
        "1218",
        "G"
    ],
    "tags": [
        "constructive algorithms",
        "graphs",
        "shortest paths"
    ],
    "difficulty": 3000,
    "statement": "Three planets $$$X$$$, $$$Y$$$ and $$$Z$$$ within the Alpha planetary system are inhabited with an advanced civilization. The spaceports of these planets are connected by interplanetary space shuttles. The flight scheduler should decide between $$$1$$$, $$$2$$$ and $$$3$$$ return flights for every existing space shuttle connection. Since the residents of Alpha are strong opponents of the symmetry, there is a strict rule that any two of the spaceports connected by a shuttle must have a different number of flights. For every pair of connected spaceports, your goal is to propose a number $$$1$$$, $$$2$$$ or $$$3$$$ for each shuttle flight, so that for every two connected spaceports the overall number of flights differs. You may assume that:1) Every planet has at least one spaceport 2) There exist only shuttle flights between spaceports of different planets 3) For every two spaceports there is a series of shuttle flights enabling traveling between them4) Spaceports are not connected by more than one shuttle",
    "editorial": ""
}{
    "name": "Two Arrays",
    "code": [
        "1710",
        "E"
    ],
    "tags": [
        "binary search",
        "games",
        "graph matchings"
    ],
    "difficulty": 2400,
    "statement": "You are given two arrays of integers $$$a_1,a_2,\\dots,a_n$$$ and $$$b_1,b_2,\\dots,b_m$$$. Alice and Bob are going to play a game. Alice moves first and they take turns making a move.They play on a grid of size $$$n \\times m$$$ (a grid with $$$n$$$ rows and $$$m$$$ columns). Initially, there is a rook positioned on the first row and first column of the grid.During her/his move, a player can do one of the following two operations:  Move the rook to a different cell on the same row or the same column of the current cell. A player cannot move the rook to a cell that has been visited $$$1000$$$ times before (i.e., the rook can stay in a certain cell at most $$$1000$$$ times during the entire game). Note that the starting cell is considered to be visited once at the beginning of the game. End the game immediately with a score of $$$a_r+b_c$$$, where $$$(r, c)$$$ is the current cell (i.e., the rook is on the $$$r$$$-th row and $$$c$$$-th column). Bob wants to maximize the score while Alice wants to minimize it. If they both play this game optimally, what is the final score of the game?",
    "editorial": "Hint1: Since they are very smart, they know the result of the game at the beginning.Hint2: If the result is $$$x$$$, then Alice will end the game when Bob moves to a cell with score less than $$$x$$$, and something analogous holds for Bob.Hint3: Thus, Alice can only move to a certain subset of cells, and the same holds for Bob. \u2014-Knowing the above facts, it is clear that we can apply binary search on the answer $$$Z$$$, which is less than $$$a_1+b_1$$$, or Alice can end the game immediately to get $$$a_1+b_1$$$.Let's color white all the cells with $$$a_r+b_c \\leq Z$$$, and black all the cells with $$$a_r+b_c > Z$$$.Then we shall add edges between cells in the same row or same column with different colors. These edges and cells forms a bipartite graph.Consider the game on the bipartite graph. Initially, we are at cell $$$(1,1)$$$. Alice moves first, then they take turns to move. Each player can only move the cell to another place with an edge connecting them, or the other player will end the game immediately.Each cell can be visited at most $$$1000$$$ times, whoever cannot move loses.If Alice wins, then the answer is no greater than $$$Z$$$, otherwise the answer is greater than $$$Z$$$.The version of this game where each vertex can be visited exactly once is known. If both player plays optimally, the first player wins iff the starting vertex belongs to all possible maximum matchings. I'll explain why at the end of the editorial.It turns out that the condition is exactly the same even if each vertex can be visited at most $$$1000$$$ times. Let us show why.First, calculate the maximum matching. Then we erase the starting vertex and calculate the maximum matching in the new graph. If two matchings have the same size, the vertex does not belong to all maximum matchings and vice versa.Now, we know that if we copy a cell $$$1000$$$ times and copy the edges as well, this problem is exactly the same as the model mentioned above. If we consider the initial bipartite graph, it's easy to see that we only need to check whether $$$(1,1)$$$ is in all maximum matchings of the initial graph, becuase the maximum matching remains unchanged in the other $$$999$$$ parts.So, we have shifted the problem to seeing if the initial cell belongs to all matchings. According to [K\u0151nig's theorem in graph theory](https://en.wikipedia.org/wiki/K Using $$$M$$$ to refer to the maximum matching, $$$I$$$ to refer to the maximum independet set, $$$V$$$ to refer to the set of vertices, we know that $$$|M|+|I|=|V|$$$So, if we erase one vertex and $$$|M|$$$ remains unchanged, then $$$|I|$$$ must be changed and vice versa.Now our issue is to calculate the maximum indenpendent set in this graph, with or without the initial cell.Let us sort $$$a_i$$$ and $$$b_i$$$ (notice that reordering rows and columns does not change the game at all). Now the white cells form a \"decreasing histogram\". We can still find the starting cell $$$(va,vb)$$$.First, let's compute the maximum independent set with the initial cell.Before that, consider following constraints: It's obvious that one column has at most one color of its cells in the independent set(we shall call it $$$I$$$), so does a row. Let's call a column white if only white cells of it are in $$$I$$$, other wise we shall calll it black.What is the maximum size of $$$I$$$, when we must have $$$i$$$ white columns and $$$j$$$ white rows? The answer is simple. We shall select the first $$$i$$$ columns to be white and the first $$$j$$$ rows to be white, rest of the columns and rows to be black. Then the independent set consists of black cells on black rows and black columns, and white cells on white columns and white rows. It's easy to prove this greedy strategy is correct.Now we fix the number of white columns as $$$i$$$, and try to find a $$$j$$$ that maximize $$$|I|$$$. If we make an array $$$da[i]$$$ satisfying $$$a_i+b_{da[i]}\\leq Z$$$ and $$$a_i + b_{da[i]+1} > Z$$$, and a similar array $$$db[j]$$$, we can easily calculate the change of $$$|I|$$$ when we turn row $$$j$$$ from black to white and vice versa, which is $$$n-max(i,db[j])-min(i,db[j])$$$, $$$-min(i,db[j])$$$ means remove the white part from $$$I$$$, $$$+n-max(i,db[j])$$$ meanw add the black part to $$$I$$$. For a fixed $$$i$$$, it's easy to see that the change increases with $$$j$$$.So you can maintain all positive changes of $$$|I|$$$, just decrease the $$$j$$$ with $$$i$$$ decreasing. Now you can calculate the maximum of $$$|I|$$$ in $$$O(n+m)$$$ time.It's easy to see that $$$da[i]$$$ and $$$db[i]$$$ are non-increasing, so they can be calculated in $$$O(n+m)$$$ time.For the maximum independent set without the initial cell, you just need to remove it when it is in $$$I$$$. Since the cell is always black, it is quite easy.Using binary search on the answer, you can solve the whole problem in $$$O((n+m)\\log A+n\\log n+m\\log m)$$$, where $$$A$$$ is the maximum value of the arrays $$$a$$$ and $$$b$$$.Let us conclude with the idea of the known game on bipartite graphs.Lemma: The first player can win if and only if all possible maximum matchings include the initial vertex $$$H$$$.Let's prove it when $$$H$$$ satisfies the constraint.The first player can just choose any matching $$$M$$$ and move to the vertex $$$P$$$ matching with current vertex, then any unvisited neighbor of $$$P$$$ still matches with other unvisited vertices. If $$$P$$$ has a neighbor unmatched in a certain matching $$$M$$$, we find an augmenting path and a matching $$$M'$$$ that doesn't include $$$H$$$, which is in conflict with the constraint. So no matter how the second player chooses to move, the first player always has a vertex to go after that.Otherwise, we add an vertex $$$P$$$ with the only edge $$$(P,H)$$$, move the initial cell to $$$P$$$, swap the two players, then it turns into the situation above."
}{
    "name": "Rewards",
    "code": [
        "448",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Bizon the Champion is called the Champion for a reason. Bizon the Champion has recently got a present \u2014 a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a1 first prize cups, a2 second prize cups and a3 third prize cups. Besides, he has b1 first prize medals, b2 second prize medals and b3 third prize medals. Naturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:  any shelf cannot contain both cups and medals at the same time;  no shelf can contain more than five cups;  no shelf can have more than ten medals. Help Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.",
    "editorial": ""
}{
    "name": "Almost Triple Deletions",
    "code": [
        "1699",
        "D"
    ],
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "difficulty": 2300,
    "statement": "You are given an integer $$$n$$$ and an array $$$a_1,a_2,\\ldots,a_n$$$.In one operation, you can choose an index $$$i$$$ ($$$1 \\le i \\lt n$$$) for which $$$a_i \\neq a_{i+1}$$$ and delete both $$$a_i$$$ and $$$a_{i+1}$$$ from the array. After deleting $$$a_i$$$ and $$$a_{i+1}$$$, the remaining parts of the array are concatenated.For example, if $$$a=[1,4,3,3,6,2]$$$, then after performing an operation with $$$i=2$$$, the resulting array will be $$$[1,3,6,2]$$$.What is the maximum possible length of an array of equal elements obtainable from $$$a$$$ by performing several (perhaps none) of the aforementioned operations?",
    "editorial": ""
}{
    "name": "Array",
    "code": [
        "57",
        "C"
    ],
    "tags": [
        "combinatorics",
        "math"
    ],
    "difficulty": 1900,
    "statement": "Chris the Rabbit has been interested in arrays ever since he was a child. At the moment he is researching arrays with the length of n, containing only integers from 1 to n. He is not good at math, that's why some simple things drive him crazy. For example, yesterday he grew keen on counting how many different beautiful arrays there are. Chris thinks that an array is beautiful if it meets one of the two conditions:   each elements, starting from the second one, is no more than the preceding one  each element, starting from the second one, is no less than the preceding one Having got absolutely mad at himself and at math, Chris came to Stewie and Brian to ask them for help. However, they only laughed at him and said that the answer is too simple and not interesting. Help Chris the Rabbit to find the answer at last.",
    "editorial": ""
}{
    "name": "Black and White Tree",
    "code": [
        "1626",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "greedy",
        "trees"
    ],
    "difficulty": 2400,
    "statement": "You are given a tree consisting of $$$n$$$ vertices. Some of the vertices (at least two) are black, all the other vertices are white.You place a chip on one of the vertices of the tree, and then perform the following operations:  let the current vertex where the chip is located is $$$x$$$. You choose a black vertex $$$y$$$, and then move the chip along the first edge on the simple path from $$$x$$$ to $$$y$$$. You are not allowed to choose the same black vertex $$$y$$$ in two operations in a row (i. e., for every two consecutive operations, the chosen black vertex should be different).You end your operations when the chip moves to the black vertex (if it is initially placed in a black vertex, you don't perform the operations at all), or when the number of performed operations exceeds $$$100^{500}$$$.For every vertex $$$i$$$, you have to determine if there exists a (possibly empty) sequence of operations that moves the chip to some black vertex, if the chip is initially placed on the vertex $$$i$$$.",
    "editorial": "I think there are some ways to solve this problem with casework, but let's try to come up with an intuitive and easy-to-implement approach.It's always possible to move closer to some black vertex, no matter in which vertex you are currently and which black vertex was used in the previous operation. However, sometimes if you try to move along an edge, you immediately get forced back. Let's analyze when we can move without being forced back.We can move along the edge $$$x \\rightarrow y$$$ so that our next action is not moving back if:  either $$$y$$$ is black (there is no next action);  or, if we remove the edge between $$$x$$$ and $$$y$$$, the number of black vertices in $$$y$$$'s component is at least $$$2$$$ (we can use one of them to go from $$$x$$$ to $$$y$$$, and another one to continue our path). Note that the cases $$$x \\rightarrow y$$$ and $$$y \\rightarrow x$$$ may be different (sometimes it will be possible to move in one direction, and impossible to move in the opposite direction).Let's treat this possible move $$$x \\rightarrow y$$$ as an arc in a directed graph. We can find all such arcs if we can answer the queries of the type \"count black vertices in a subtree of some vertex\", and this can be done by rooting the tree and calculating this information for each subtree with DFS.Now, if there is a way from some vertex $$$i$$$ to some black vertex along these arcs, the answer for the vertex $$$i$$$ is $$$1$$$. How can we find all such vertices? Let's transpose the graph (change the direction of each arc to opposite), now we need to find all vertices reachable from black ones \u2014 which is easily done with multisource BFS or DFS.The complexity of this solution is $$$O(n)$$$."
}{
    "name": "Petya and Post",
    "code": [
        "66",
        "E"
    ],
    "tags": [
        "data structures",
        "dp"
    ],
    "difficulty": 2000,
    "statement": "Little Vasya's uncle is a postman. The post offices are located on one circular road. Besides, each post office has its own gas station located next to it. Petya's uncle works as follows: in the morning he should leave the house and go to some post office. In the office he receives a portion of letters and a car. Then he must drive in the given car exactly one round along the circular road and return to the starting post office (the uncle can drive along the circle in any direction, counterclockwise or clockwise). Besides, since the car belongs to the city post, it should also be fuelled with gasoline only at the Post Office stations. The total number of stations equals to n. One can fuel the car at the i-th station with no more than ai liters of gasoline. Besides, one can fuel the car no more than once at each station. Also, the distance between the 1-st and the 2-nd station is b1 kilometers, the distance between the 2-nd and the 3-rd one is b2 kilometers, ..., between the (n - 1)-th and the n-th ones the distance is bn - 1 kilometers and between the n-th and the 1-st one the distance is bn kilometers. Petya's uncle's high-tech car uses only one liter of gasoline per kilometer. It is known that the stations are located so that the sum of all ai is equal to the sum of all bi. The i-th gas station and i-th post office are very close, so the distance between them is 0 kilometers.Thus, it becomes clear that if we start from some post offices, then it is not always possible to drive one round along a circular road. The uncle faces the following problem: to what stations can he go in the morning to be able to ride exactly one circle along the circular road and visit all the post offices that are on it?Petya, who used to attend programming classes, has volunteered to help his uncle, but his knowledge turned out to be not enough, so he asks you to help him write the program that will solve the posed problem.",
    "editorial": ""
}{
    "name": "GukiZ and Binary Operations",
    "code": [
        "551",
        "D"
    ],
    "tags": [
        "combinatorics",
        "implementation",
        "math",
        "matrices",
        "number theory"
    ],
    "difficulty": 2100,
    "statement": "We all know that GukiZ often plays with arrays. Now he is thinking about this problem: how many arrays a, of length n, with non-negative elements strictly less then 2l meet the following condition: ? Here operation  means bitwise AND (in Pascal it is equivalent to and, in C/C++/Java/Python it is equivalent to &), operation  means bitwise OR (in Pascal it is equivalent to , in C/C++/Java/Python it is equivalent to |). Because the answer can be quite large, calculate it modulo m. This time GukiZ hasn't come up with solution, and needs you to help him!",
    "editorial": ""
}{
    "name": "Best Permutation",
    "code": [
        "1728",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 800,
    "statement": "Let's define the value of the permutation $$$p$$$ of $$$n$$$ integers $$$1$$$, $$$2$$$, ..., $$$n$$$ (a permutation is an array where each element from $$$1$$$ to $$$n$$$ occurs exactly once) as follows:  initially, an integer variable $$$x$$$ is equal to $$$0$$$;  if $$$x < p_1$$$, then add $$$p_1$$$ to $$$x$$$ (set $$$x = x + p_1$$$), otherwise assign $$$0$$$ to $$$x$$$;  if $$$x < p_2$$$, then add $$$p_2$$$ to $$$x$$$ (set $$$x = x + p_2$$$), otherwise assign $$$0$$$ to $$$x$$$;  ...  if $$$x < p_n$$$, then add $$$p_n$$$ to $$$x$$$ (set $$$x = x + p_n$$$), otherwise assign $$$0$$$ to $$$x$$$;  the value of the permutation is $$$x$$$ at the end of this process. For example, for $$$p = [4, 5, 1, 2, 3, 6]$$$, the value of $$$x$$$ changes as follows: $$$0, 4, 9, 0, 2, 5, 11$$$, so the value of the permutation is $$$11$$$.You are given an integer $$$n$$$. Find a permutation $$$p$$$ of size $$$n$$$ with the maximum possible value among all permutations of size $$$n$$$. If there are several such permutations, you can print any of them.",
    "editorial": "Let $$$x_i$$$ be the value of the variable $$$x$$$ after $$$i$$$ steps. Note that $$$x_{n-1}$$$ should be less than $$$p_n$$$ for $$$x_n$$$ to be not equal to $$$0$$$. It means that $$$x_n$$$ does not exceed $$$2p_n - 1$$$. It turns out that for $$$n \\ge 4$$$ there is always a permutation such that $$$x_n$$$ is equal to $$$2n - 1$$$.The only thing left is to find out how to build such a permutation. There are many suitable permutations, let's consider one of the possible options. For an even $$$n$$$, a suitable permutation is $$$[2, 1, 4, 3, \\ dots, n - 2, n - 3, n - 1, n]$$$. You can see that $$$x$$$ in such a permutation changes as follows: $$$[0, 2, 0, 4, 0, \\dots, n - 2, 0, n - 1, 2n - 1]$$$. For an odd $$$n$$$, there is a similar permutation $$$[1, 3, 2, 5, 4, \\dots, n - 2, n - 3, n - 1, n]$$$, where $$$x$$$ changes as follows: $$$[0, 1, 4, 0, 5, 0, \\dots, n-2, 0, n - 1, 2n - 1]$$$."
}{
    "name": "Kevin and Permutation",
    "code": [
        "1754",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "difficulty": 800,
    "statement": "For his birthday, Kevin received the set of pairwise distinct numbers $$$1, 2, 3, \\ldots, n$$$ as a gift.He is going to arrange these numbers in a way such that the minimum absolute difference between two consecutive numbers be maximum possible. More formally, if he arranges numbers in order $$$p_1, p_2, \\ldots, p_n$$$, he wants to maximize the value $$$$$$\\min \\limits_{i=1}^{n - 1} \\lvert p_{i + 1} - p_i \\rvert,$$$$$$ where $$$|x|$$$ denotes the absolute value of $$$x$$$.Help Kevin to do that.",
    "editorial": "Let's prove that the minimum difference of consecutive elements is not greater than $$$\\lfloor \\frac{n}{2} \\rfloor$$$. To do it, let's prove that larger value is not achievable. Consider element of a permutation with value $$$\\lfloor \\frac{n}{2} \\rfloor + 1$$$. It will have at least one adjacent element in the constructed permutation. And the maximum absolute difference of this element with the adjacent elements is at most $$$\\lfloor \\frac{n}{2} \\rfloor$$$.Now we will construct the permutation with the minimum absolute difference of consecutive elements equals to $$$\\lfloor \\frac{n}{2} \\rfloor$$$. Assign $$$x = \\lfloor \\frac{n}{2} + 1 \\rfloor$$$. Now we can construct such permutation: $$$x, 1, x + 1, 2, x + 2, \\ldots$$$. It's easy to see that the minimum absolute difference of consecutive elements equals to $$$x - 1$$$."
}{
    "name": "Welcome home, Chtholly",
    "code": [
        "896",
        "E"
    ],
    "tags": [
        "data structures",
        "dsu"
    ],
    "difficulty": 3100,
    "statement": "\u2014 I... I survived.\u2014 Welcome home, Chtholly.\u2014 I kept my promise...\u2014 I made it... I really made it!After several days of fighting, Chtholly Nota Seniorious miraculously returned from the fierce battle.As promised, Willem is now baking butter cake for her.However, although Willem is skilled in making dessert, he rarely bakes butter cake.This time, Willem made a big mistake \u2014 he accidentally broke the oven!Fortunately, Chtholly decided to help him.Willem puts n cakes on a roll, cakes are numbered from 1 to n, the i-th cake needs ai seconds of baking.Willem needs Chtholly to do m operations to bake the cakes.Operation 1: 1 l r xWillem asks Chtholly to check each cake in the range [l, r], if the cake needs to be baked for more than x seconds, he would bake it for x seconds and put it back in its place. More precisely, for every i in range [l, r], if ai is strictly more than x, ai becomes equal ai - x.Operation 2: 2 l r xWillem asks Chtholly to count the number of cakes in the range [l, r] that needs to be cooked for exactly x seconds. More formally you should find number of such i in range [l, r], that ai = x.",
    "editorial": "Split the array into sqrt(n) blocks , each containing sqrt(n) numbers. In each block , for example block x , we use f[x][v] to represent the numbers of v in block x. We need to maintain each number in the block. This can be maintained by using a special DSU. We use r[x][v] to represent the root of DSU of number v in block x. By maintaining this , we can get the values of every number in a block in O( sqrt(n) ) time. For operation 1 We rebuild the two blocks which l and r are inside. For blocks numbered from l + 1 to r - 1: If x * 2 <= max value in block p We merge all the numbers in range [1,x] to [x+1,x*2] , and add x to tag[p] , tag[p] means that all the numbers in block p has decreased by tag[p]. If x * 2 > max value in block p We merge all the numbers in range [x+1,max value] to [1,max value - x]. For operation 2: We use O( sqrt(n) ) time to get the values of numbers in blocks containing l and r. For blocks l + 1 to r - 1 , r[i][x + tag[i]] is the number of x in block i.Proof of time complexity: There are sqrt(n) blocks. The difference of the max number and the min number in each block is initially n. So the sum of this in every block is nsqrt(n). For each operation 1 , We use O( x ) or O( max - x ) to make the difference of max and min element O( x ) or O( max - x ) smaller."
}{
    "name": "Stripe 2",
    "code": [
        "21",
        "C"
    ],
    "tags": [
        "binary search",
        "dp",
        "sortings"
    ],
    "difficulty": 2000,
    "statement": "Once Bob took a paper stripe of n squares (the height of the stripe is 1 square). In each square he wrote an integer number, possibly negative. He became interested in how many ways exist to cut this stripe into three pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece, and each piece contains positive integer amount of squares. Would you help Bob solve this problem?",
    "editorial": ""
}{
    "name": "Paths",
    "code": [
        "870",
        "F"
    ],
    "tags": [
        "data structures",
        "number theory"
    ],
    "difficulty": 2700,
    "statement": "You are given a positive integer n. Let's build a graph on vertices 1, 2, ..., n in such a way that there is an edge between vertices u and v if and only if . Let d(u, v) be the shortest distance between u and v, or 0 if there is no path between them. Compute the sum of values d(u, v) over all 1 \u2264 u < v \u2264 n.The gcd (greatest common divisor) of two positive integers is the maximum positive integer that divides both of the integers.",
    "editorial": "Integer 1 \u2264 x \u2264 n is bad is x = 1 or x is prime and x > n / 2. Otherwise integer is good.primex for 1 < x \u2264 n is minimal prime divisor of x.Path between two vertices doesn't exist if at least one of them is bad.Distance equals to zero if this two vertices are the same.Distance equals to one if their numbers have common divisor.Distance between vertices u and v equals to two if primeu\u00b7primev \u2264 n.Otherwise distance is three because path  always exists.It is easy to find number of pairs of vertices between which there is no path.Number of pairs with distance 1 equals to sum over all good x of expressions x - 1 - \u03c6(x).Number of pairs with distance 3 can be found if we subtract number of pairs without path and number of pairs with distances 0 and 1 from number of all pairs.So it only remains to find number of pairs with distance 2. Let's divide such pairs on three types1) Pairs of coprime composite numbers.2) Good prime p and good number x such as primep\u00b7primex \u2264 n and x is not divided by p.3) Two different good prime numbers, product of which is less or equal than n.Number of pairs with distance 2 equals to number of pairs of the first and the second types minus number of pairs of the third type.Number of pairs of the first type equals to sum over all composite 1 \u2264 x \u2264 n of expressions \u03c6(x) - ((number of noncomposite numbers which are less than x) - number of unique prime divisors of x).For the second type we should sum up over all prime p number of good numbers x such that primep\u00b7primex \u2264 n and subtract number of such numbers divided by p. The first we can calculate with some additional precalculations, for the second we can just check all numbers divided by p.Number of the pairs of the third type can be found trivially.For other details please see the author's code."
}{
    "name": "Odd Subarrays",
    "code": [
        "1686",
        "B"
    ],
    "tags": [
        "dp",
        "greedy"
    ],
    "difficulty": 800,
    "statement": "For an array $$$[b_1, b_2, \\ldots, b_m]$$$ define its number of inversions as the number of pairs $$$(i, j)$$$ of integers such that $$$1 \\le i < j \\le m$$$ and $$$b_i>b_j$$$. Let's call array $$$b$$$ odd if its number of inversions is odd. For example, array $$$[4, 2, 7]$$$ is odd, as its number of inversions is $$$1$$$, while array $$$[2, 1, 4, 3]$$$ isn't, as its number of inversions is $$$2$$$.You are given a permutation $$$[p_1, p_2, \\ldots, p_n]$$$ of integers from $$$1$$$ to $$$n$$$ (each of them appears exactly once in the permutation). You want to split it into several consecutive subarrays (maybe just one), so that the number of the odd subarrays among them is as large as possible. What largest number of these subarrays may be odd?",
    "editorial": "Consider any optimal splitting.Clearly, for any subarray $$$[b_1, b_2, \\ldots, b_m]$$$ which is not odd, we can just split it into $$$[b_1], [b_2], \\ldots, [b_m]$$$,For any odd subarray $$$[b_1, b_2, \\ldots, b_m]$$$ with $$$m \\ge 3$$$, there exists an $$$1 \\le i \\le m-1$$$ such that $$$b_i > b_{i+1}$$$ (otherwise $$$b$$$ is sorted and has no inversions). Then, we can split $$$b$$$ into $$$[b_1], [b_2], \\ldots, [b_{i-1}], [b_i, b_{i+1}], [b_{i+2}], \\ldots, [b_m]$$$, where we also have one odd subarray.So, if we can split $$$p$$$ into several subarrays such that there are $$$k$$$ odd subarrays, we can split it into several subarrays of length $$$\\le 2$$$ so that there are $$$k$$$ odd subarrays too. Then, let $$$dp_i$$$ denote the largest number of odd subarrays we can get from splitting $$$p[1:i]$$$. Then, $$$dp_i = max(dp_{i-1}, dp_{i-2} + (p_{i-1} > p_i))$$$. This $$$dp$$$ can be calculated in $$$O(n)$$$.It's also easy to show that the following greedy algorithm works: traverse the permutation from left to right, whenever you see two elements $$$p_{i-1}>p_i$$$, make a subarray $$$[p_{i-1}, p_i]$$$, and proceed from $$$p_{i+1}$$$."
}{
    "name": "Journey",
    "code": [
        "1336",
        "F"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "graphs",
        "trees"
    ],
    "difficulty": 3500,
    "statement": "In the wilds far beyond lies the Land of Sacredness, which can be viewed as a tree \u00a0\u2014 connected undirected graph consisting of $$$n$$$ nodes and $$$n-1$$$ edges. The nodes are numbered from $$$1$$$ to $$$n$$$. There are $$$m$$$ travelers attracted by its prosperity and beauty. Thereupon, they set off their journey on this land. The $$$i$$$-th traveler will travel along the shortest path from $$$s_i$$$ to $$$t_i$$$. In doing so, they will go through all edges in the shortest path from $$$s_i$$$ to $$$t_i$$$, which is unique in the tree.During their journey, the travelers will acquaint themselves with the others. Some may even become friends. To be specific, the $$$i$$$-th traveler and the $$$j$$$-th traveler will become friends if and only if there are at least $$$k$$$ edges that both the $$$i$$$-th traveler and the $$$j$$$-th traveler will go through. Your task is to find out the number of pairs of travelers $$$(i, j)$$$ satisfying the following conditions:   $$$1 \\leq i < j \\leq m$$$.  the $$$i$$$-th traveler and the $$$j$$$-th traveler will become friends. ",
    "editorial": "First, let's choose an arbitrary root for the tree. Then for all pairs of paths, their LCA (lowest common ancestor) can be either different or the same.Then, let's calculate the answer of pairs with different LCAs. In this case, if the intersection is not empty, it will be a vertical path as in the graph below.Here path $$$G-H$$$ and path $$$E-F$$$ intersects at path $$$B-G$$$.We can process all paths in decreasing order of the depth of their LCA. When processing a path $$$p$$$ we calculate the number of paths $$$q$$$, where $$$q$$$ is processed before $$$p$$$, and the edge-intersection of $$$p$$$ and $$$q$$$ is at least $$$k$$$. To do this we can plus one to the subtree of the nodes on the path $$$k$$$ edges away from the LCA (node $$$C$$$ and $$$D$$$ for path $$$G-H$$$ in the graph above), then we can query the value at the endpoints of the path (node $$$E$$$ and $$$F$$$ for path $$$E-F$$$). We can maintain this easily with BIT (binary indexed tree, or Fenwick tree).Next, we calculate pairs with the same LCA. This case is harder.For each node $$$u$$$ we calculate the number of pairs with the LCA $$$u$$$. For a pair of path $$$(x_1,y_1)$$$ and $$$(x_2, y_2)$$$, there are still two cases we need to handle.In the first case (the left one in the graph above), where the intervals $$$[dfn_{x_1},dfn_{y_1}]$$$ ($$$dfn_x$$$ is the index of $$$x$$$ in the DFS order) and $$$[dfn_{x_2},dfn_{y_2}]$$$ have no intersection. In this case the intersection of two paths is a vertical path where $$$(y_1,u)$$$ and $$$(x_2,u)$$$ intersects. This can be solved similarly to the case of different LCAs.In the next case (the right one in the graph above), an intersection of the two intervals exists. The intersection of two paths may cross over node $$$u$$$.For all paths $$$(x,y)$$$ (assume that $$$dfn_x$$$ < $$$dfn_y$$$) with the LCA $$$u$$$. We can build a virtual-tree over all $$$x$$$ of the paths, and on node $$$x$$$ we store the value of $$$y$$$. Let's do a dfs on the virtual-tree. On each node $$$a$$$ we calculate pairs $$$(x_1,y_1)$$$,$$$(x_2,y_2)$$$ that $$$\\operatorname{LCA}(x_1,x_2) = a$$$. For $$$x_1$$$ , let's go from $$$a$$$ to $$$y_1$$$ for $$$k$$$ edges, assume the node we reached is $$$b$$$, all legal $$$y_2$$$ should be in the subtree of $$$b$$$.We can use a segment tree on the DFS-order to maintain all $$$y$$$s in the subtree and merge them with the small-to-large trick, meanwhile, iterate over all $$$x_1$$$ in the smaller segment tree, count the valid $$$y_2$$$'s in the larger segment tree.In fact, you can use HLD (heavy-light decomposition) instead of virtual-tree, which seems to be easier to implement.The overall complexity of this solution is $$$O(m \\log^2 m + n\\log n)$$$."
}{
    "name": "Ehab's Last Theorem",
    "code": [
        "1325",
        "F"
    ],
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "greedy"
    ],
    "difficulty": 2500,
    "statement": "It's the year 5555. You have a graph, and you want to find a long cycle and a huge independent set, just because you can. But for now, let's just stick with finding either.Given a connected graph with $$$n$$$ vertices, you can choose to either:  find an independent set that has exactly $$$\\lceil\\sqrt{n}\\rceil$$$ vertices. find a simple cycle of length at least $$$\\lceil\\sqrt{n}\\rceil$$$. An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn't contain any vertex twice. I have a proof you can always solve one of these problems, but it's too long to fit this margin.",
    "editorial": ""
}{
    "name": "Vitaly and Cycle",
    "code": [
        "557",
        "D"
    ],
    "tags": [
        "combinatorics",
        "dfs and similar",
        "graphs",
        "math"
    ],
    "difficulty": 2000,
    "statement": "After Vitaly was expelled from the university, he became interested in the graph theory.Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once.Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t \u2014 the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w \u2014 the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.Two ways to add edges to the graph are considered equal if they have the same sets of added edges.Since Vitaly does not study at the university, he asked you to help him with this task.",
    "editorial": ""
}{
    "name": "Compression and Expansion",
    "code": [
        "1523",
        "C"
    ],
    "tags": [
        "brute force",
        "data structures",
        "greedy",
        "implementation",
        "trees"
    ],
    "difficulty": 1600,
    "statement": "  William is a huge fan of planning ahead. That is why he starts his morning routine by creating a nested list of upcoming errands.A valid nested list is any list which can be created from a list with one item \"1\" by applying some operations. Each operation inserts a new item into the list, on a new line, just after one of existing items $$$a_1 \\,.\\, a_2 \\,.\\, a_3 \\,.\\, \\,\\cdots\\, \\,.\\,a_k$$$ and can be one of two types:   Add an item $$$a_1 \\,.\\, a_2 \\,.\\, a_3 \\,.\\, \\cdots \\,.\\, a_k \\,.\\, 1$$$ (starting a list of a deeper level), or  Add an item $$$a_1 \\,.\\, a_2 \\,.\\, a_3 \\,.\\, \\cdots \\,.\\, (a_k + 1)$$$ (continuing the current level).  Operation can only be applied if the list does not contain two identical items afterwards. And also, if we consider every item as a sequence of numbers, then the sequence of items should always remain increasing in lexicographical order. Examples of valid and invalid lists that are shown in the picture can found in the \"Notes\" section.When William decided to save a Word document with the list of his errands he accidentally hit a completely different keyboard shortcut from the \"Ctrl-S\" he wanted to hit. It's not known exactly what shortcut he pressed but after triggering it all items in the list were replaced by a single number: the last number originally written in the item number.William wants you to help him restore a fitting original nested list.",
    "editorial": "Let's maintain the current depth of the list in a stack. Initially the stack is empty. For each new $$$a_i$$$ there are two options:  $$$a_i=1$$$. In this case we just add the given number to the end of the stack and it will point to a new subitem in the list.  $$$a_i > 1$$$. In this case we need to find the subitem, the last number of which will be one less than $$$a_i$$$. To do this we will remove the last elements from a stack until we find this number. After this at the end of each iteration we will print the resulting stack as a new item in the list. Note that due to outputting the whole list the complexity will be quadratic.Final complexity: $$$O(n^2)$$$."
}{
    "name": "Did you mean...",
    "code": [
        "858",
        "C"
    ],
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "difficulty": 1500,
    "statement": "Beroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.Beroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.For example:  the following words have typos: \"hellno\", \"hackcerrs\" and \"backtothefutttture\";  the following words don't have typos: \"helllllooooo\", \"tobeornottobe\" and \"oooooo\". When Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.Implement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.",
    "editorial": "We will solve the problem greedily. Let's find the leftmost typo. It will be three consecutive characters si - 1, si and si + 1 such that all of them are consonants and there are at least two diffirent letters. It is clear that we can cut this string after position i, because prefix will be correct and we will leave only one letter in the remaining part of the string. So each time we find the leftmost typo and cut out the prefix. Remember that after cutting the prefix you have to continue checking from index i + 2, not i + 1."
}{
    "name": "A Mist of Florescence",
    "code": [
        "989",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "graphs"
    ],
    "difficulty": 1800,
    "statement": " As the boat drifts down the river, a wood full of blossoms shows up on the riverfront.\"I've been here once,\" Mino exclaims with delight, \"it's breathtakingly amazing.\"\"What is it like?\"\"Look, Kanno, you've got your paintbrush, and I've got my words. Have a try, shall we?\" There are four kinds of flowers in the wood, Amaranths, Begonias, Centaureas and Dianthuses.The wood can be represented by a rectangular grid of $$$n$$$ rows and $$$m$$$ columns. In each cell of the grid, there is exactly one type of flowers.According to Mino, the numbers of connected components formed by each kind of flowers are $$$a$$$, $$$b$$$, $$$c$$$ and $$$d$$$ respectively. Two cells are considered in the same connected component if and only if a path exists between them that moves between cells sharing common edges and passes only through cells containing the same flowers.You are to help Kanno depict such a grid of flowers, with $$$n$$$ and $$$m$$$ arbitrarily chosen under the constraints given below. It can be shown that at least one solution exists under the constraints of this problem.Note that you can choose arbitrary $$$n$$$ and $$$m$$$ under the constraints below, they are not given in the input.",
    "editorial": "A picture is worth a thousand words.  There are enormous ways to solve this problem. What's yours? Fine-tune your input and parameters, depict your woods here and share with us in the comments! (Remember to clip and scale the image, though. You can surround the image with a spoiler tag to avoid taking up too much space.)Note: in case jscolor doesn't load properly (a pop-up should appear when the colour inputs are clicked on), try refreshing once.Shoutouts to Alexander Golovanov (Golovanov399) for his grid-drawing tool, on which our utility is based!"
}{
    "name": "Treasure Hunt",
    "code": [
        "1639",
        "A"
    ],
    "tags": [
        "graphs",
        "interactive"
    ],
    "difficulty": "",
    "statement": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \"Scoring\" section of the statement.This is an interactive problem.Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don't know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements.The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you'll find a treasure chest immediately and, consequently, you'll put a flag there immediately as well.When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction $$$v$$$ might be different each time you come in the junction $$$v$$$. However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to $$$v$$$ vertex.Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting!",
    "editorial": ""
}{
    "name": "Ilya and Escalator",
    "code": [
        "518",
        "D"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "math",
        "probabilities"
    ],
    "difficulty": 1700,
    "statement": "Ilya got tired of sports programming, left university and got a job in the subway. He was given the task to determine the escalator load factor. Let's assume that n people stand in the queue for the escalator. At each second one of the two following possibilities takes place: either the first person in the queue enters the escalator with probability p, or the first person in the queue doesn't move with probability (1 - p), paralyzed by his fear of escalators and making the whole queue wait behind him.Formally speaking, the i-th person in the queue cannot enter the escalator until people with indices from 1 to i - 1 inclusive enter it. In one second only one person can enter the escalator. The escalator is infinite, so if a person enters it, he never leaves it, that is he will be standing on the escalator at any following second. Ilya needs to count the expected value of the number of people standing on the escalator after t seconds. Your task is to help him solve this complicated task.",
    "editorial": ""
}{
    "name": "National Project",
    "code": [
        "1303",
        "B"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1400,
    "statement": "Your company was appointed to lay new asphalt on the highway of length $$$n$$$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.Skipping the repair is necessary because of the climate. The climate in your region is periodical: there are $$$g$$$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $$$b$$$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $$$g$$$ good days, $$$b$$$ bad days and so on.You can be sure that you start repairing at the start of a good season, in other words, days $$$1, 2, \\dots, g$$$ are good.You don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the $$$n = 5$$$ then at least $$$3$$$ units of the highway should have high quality; if $$$n = 4$$$ then at least $$$2$$$ units should have high quality.What is the minimum number of days is needed to finish the repair of the whole highway?",
    "editorial": "There are two conditions that should be met according to the statement. On the one hand, we should repair the whole highway, so we must spend at least $$$n$$$ days to do it. On the other hand, at least half of it should have high-quality pavement or at least $$$needG = \\left\\lceil \\frac{n}{2} \\right\\rceil$$$ units should be laid at good days.How to calculate the minimum number of days (name it as $$$totalG$$$) for the second condition to meet? Note that the first $$$totalG$$$ days can be represented as several (maybe zero) blocks of $$$g + b$$$ days, where exactly $$$g$$$ days in each block are good and some remaining days $$$1 \\le rem \\le g$$$. The $$$rem > 0$$$ because $$$totalG$$$ will not be minimum otherwise.There are plenty of ways to calculate $$$totalG$$$. One of them is the following: Firstly, let's calculate the number of $$$g + b$$$ cycles we need: $$$totatG = \\left\\lfloor \\frac{needG}{g} \\right\\rfloor \\cdot (g + b)$$$. Now, if $$$needG \\mod g > 0$$$ we just add it (since it's exactly the $$$rem$$$) or $$$totalG = totalG + (needG \\mod g)$$$. But if $$$needG \\mod g = 0$$$ we added to $$$totalG$$$ last $$$b$$$ block and should subtract it or $$$totalG = totalG - b$$$.The answer is $$$\\max(n, totalG)$$$."
}{
    "name": "Minimize the Permutation",
    "code": [
        "1256",
        "B"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1400,
    "statement": "You are given a permutation of length $$$n$$$. Recall that the permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2, 3, 1, 5, 4]$$$ is a permutation, but $$$[1, 2, 2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1, 3, 4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).You can perform at most $$$n-1$$$ operations with the given permutation (it is possible that you don't perform any operations at all). The $$$i$$$-th operation allows you to swap elements of the given permutation on positions $$$i$$$ and $$$i+1$$$. Each operation can be performed at most once. The operations can be performed in arbitrary order.Your task is to find the lexicographically minimum possible permutation obtained by performing some of the given operations in some order.You can see the definition of the lexicographical order in the notes section.You have to answer $$$q$$$ independent test cases.For example, let's consider the permutation $$$[5, 4, 1, 3, 2]$$$. The minimum possible permutation we can obtain is $$$[1, 5, 2, 4, 3]$$$ and we can do it in the following way:  perform the second operation (swap the second and the third elements) and obtain the permutation $$$[5, 1, 4, 3, 2]$$$;  perform the fourth operation (swap the fourth and the fifth elements) and obtain the permutation $$$[5, 1, 4, 2, 3]$$$;  perform the third operation (swap the third and the fourth elements) and obtain the permutation $$$[5, 1, 2, 4, 3]$$$.  perform the first operation (swap the first and the second elements) and obtain the permutation $$$[1, 5, 2, 4, 3]$$$; Another example is $$$[1, 2, 4, 3]$$$. The minimum possible permutation we can obtain is $$$[1, 2, 3, 4]$$$ by performing the third operation (swap the third and the fourth elements).",
    "editorial": "The following greedy solution works: let's take the minimum element and move it to the leftmost position we can. With this algorithm, all forbidden operations are form the prefix of operations: ($$$1, 2$$$), $$$(2, 3)$$$, ..., and so on. So we can carry the position of the leftmost operation we can perform $$$pos$$$. Initially, it is $$$1$$$. We repeat the algorithm until $$$pos \\ge n$$$. Let's find the position of the minimum element among elements $$$a_{pos}, a_{pos + 1}, \\dots, a_{n}$$$. Let this position be $$$nxt$$$. If $$$nxt = pos$$$ then let's increase $$$pos$$$ and continue the algorithm. Otherwise, we need to move the element from the position $$$nxt$$$ to the position $$$pos$$$ and then set $$$pos := nxt$$$.Time complexity: $$$O(n^2)$$$."
}{
    "name": "Kamal-ol-molk's Painting",
    "code": [
        "475",
        "C"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 2100,
    "statement": "Rumors say that one of Kamal-ol-molk's paintings has been altered. A rectangular brush has been moved right and down on the painting.Consider the painting as a n \u00d7 m rectangular grid. At the beginning an x \u00d7 y rectangular brush is placed somewhere in the frame, with edges parallel to the frame, (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m). Then the brush is moved several times. Each time the brush is moved one unit right or down. The brush has been strictly inside the frame during the painting. The brush alters every cell it has covered at some moment.You have found one of the old Kamal-ol-molk's paintings. You want to know if it's possible that it has been altered in described manner. If yes, you also want to know minimum possible area of the brush. ",
    "editorial": ""
}{
    "name": "Appleman and Complicated Task",
    "code": [
        "461",
        "D"
    ],
    "tags": [
        "dsu",
        "math"
    ],
    "difficulty": 2800,
    "statement": "Toastman came up with a very complicated task. He gives it to Appleman, but Appleman doesn't know how to solve it. Can you help him?Given a n \u00d7 n checkerboard. Each cell of the board has either character 'x', or character 'o', or nothing. How many ways to fill all the empty cells with 'x' or 'o' (each cell must contain only one character in the end) are there, such that for each cell the number of adjacent cells with 'o' will be even? Find the number of ways modulo 1000000007 (109 + 7). Two cells of the board are adjacent if they share a side.",
    "editorial": ""
}{
    "name": "MEXor Mixup",
    "code": [
        "1567",
        "B"
    ],
    "tags": [
        "bitmasks",
        "greedy"
    ],
    "difficulty": 1000,
    "statement": "Alice gave Bob two integers $$$a$$$ and $$$b$$$ ($$$a > 0$$$ and $$$b \\ge 0$$$). Being a curious boy, Bob wrote down an array of non-negative integers with $$$\\operatorname{MEX}$$$ value of all elements equal to $$$a$$$ and $$$\\operatorname{XOR}$$$ value of all elements equal to $$$b$$$.What is the shortest possible length of the array Bob wrote?Recall that the $$$\\operatorname{MEX}$$$ (Minimum EXcluded) of an array is the minimum non-negative integer that does not belong to the array and the $$$\\operatorname{XOR}$$$ of an array is the bitwise XOR of all the elements of the array.",
    "editorial": "First consider the MEX condition: the shortest array with MEX $$$a$$$ is the array $$$[0, 1, \\dots, a - 1]$$$, which has length $$$a$$$. Now we'll consider the XOR condition. Let the XOR of the array $$$[0, 1, \\dots, a - 1]$$$ be $$$x$$$. We have three cases.Case 1: $$$x = b$$$. Then we don't need to add any elements to the array, so the answer is $$$a$$$.Case 2: $$$x \\neq b$$$ and $$$x \\oplus b \\neq a$$$. Then we can add the element $$$x \\oplus b$$$ to the array since $$$x \\oplus b \\neq a$$$, so the MEX will still be $$$a$$$. The XOR of the array will then be $$$x \\oplus x \\oplus b = b$$$. The answer is $$$a + 1$$$.Case 3: $$$x \\neq b$$$ and $$$x \\oplus b = a$$$. Then we cannot add the element $$$x \\oplus b$$$ to the end of the array. We can just add $$$x \\oplus b \\oplus 1$$$ and $$$1$$$, so the XOR of the array will be $$$x \\oplus x \\oplus b \\oplus 1 \\oplus 1 = b$$$. The answer is $$$a + 2$$$.Time complexity: $$$\\mathcal{O}(n)$$$ precomputation and $$$\\mathcal{O}(1)$$$ per test case if you precalculate the XOR of the numbers from $$$0$$$ to $$$n-1$$$, or $$$\\mathcal{O}(1)$$$ if you use the well-known formula for it."
}{
    "name": "Sereja and Stairs",
    "code": [
        "381",
        "B"
    ],
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "difficulty": 1100,
    "statement": "Sereja loves integer sequences very much. He especially likes stairs.Sequence a1, a2, ..., a|a| (|a| is the length of the sequence) is stairs if there is such index i (1 \u2264 i \u2264 |a|), that the following condition is met: a1 < a2 < ... < ai - 1 < ai > ai + 1 > ... > a|a| - 1 > a|a|.For example, sequences [1, 2, 3, 2] and [4, 2] are stairs and sequence [3, 1, 2] isn't.Sereja has m cards with numbers. He wants to put some cards on the table in a row to get a stair sequence. What maximum number of cards can he put on the table?",
    "editorial": ""
}{
    "name": "Maria Breaks the Self-isolation",
    "code": [
        "1358",
        "B"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 1000,
    "statement": "Maria is the most active old lady in her house. She was tired of sitting at home. She decided to organize a ceremony against the coronavirus.She has $$$n$$$ friends who are also grannies (Maria is not included in this number). The $$$i$$$-th granny is ready to attend the ceremony, provided that at the time of her appearance in the courtyard there will be at least $$$a_i$$$ other grannies there. Note that grannies can come into the courtyard at the same time. Formally, the granny $$$i$$$ agrees to come if the number of other grannies who came earlier or at the same time with her is greater than or equal to $$$a_i$$$.Grannies gather in the courtyard like that.  Initially, only Maria is in the courtyard (that is, the initial number of grannies in the courtyard is $$$1$$$). All the remaining $$$n$$$ grannies are still sitting at home. On each step Maria selects a subset of grannies, none of whom have yet to enter the courtyard. She promises each of them that at the time of her appearance there will be at least $$$a_i$$$ other grannies (including Maria) in the courtyard. Maria can call several grannies at once. In this case, the selected grannies will go out into the courtyard at the same moment of time. She cannot deceive grannies, that is, the situation when the $$$i$$$-th granny in the moment of appearing in the courtyard, finds that now there are strictly less than $$$a_i$$$ other grannies (except herself, but including Maria), is prohibited. Please note that if several grannies appeared in the yard at the same time, then each of them sees others at the time of appearance. Your task is to find what maximum number of grannies (including herself) Maria can collect in the courtyard for the ceremony. After all, the more people in one place during quarantine, the more effective the ceremony!Consider an example: if $$$n=6$$$ and $$$a=[1,5,4,5,1,9]$$$, then:  at the first step Maria can call grannies with numbers $$$1$$$ and $$$5$$$, each of them will see two grannies at the moment of going out into the yard (note that $$$a_1=1 \\le 2$$$ and $$$a_5=1 \\le 2$$$);  at the second step, Maria can call grannies with numbers $$$2$$$, $$$3$$$ and $$$4$$$, each of them will see five grannies at the moment of going out into the yard (note that $$$a_2=5 \\le 5$$$, $$$a_3=4 \\le 5$$$ and $$$a_4=5 \\le 5$$$);  the $$$6$$$-th granny cannot be called into the yard \u00a0\u2014 therefore, the answer is $$$6$$$ (Maria herself and another $$$5$$$ grannies). ",
    "editorial": "Let $$$x$$$ be the maximum number of grannies that can go out to the yard. Then if Maria Ivanovna calls them all at the same time, then everyone will see $$$x$$$ grannies. Since $$$x$$$ is the maximum answer, then each granny of them satisfy $$$a_i \\le x$$$ (otherwise there's no way for these grannies to gather in the yard), that is, such call is correct. So it is always enough to call once.Note that if you order grannies by $$$a_i$$$, Maria Ivanovna will have to call $$$x$$$ first grannies from this list. She can take $$$x$$$ grannies if $$$a_x \\le x$$$ (otherwise, after all $$$x$$$ grannies arrived, the last one will leave). To find $$$x$$$ we can do a linear search.The overall compexity is $$$\\mathcal{O}(n\\log{n})$$$ per test."
}{
    "name": "Shoe Store",
    "code": [
        "166",
        "D"
    ],
    "tags": [
        "dp",
        "graph matchings",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "difficulty": 2500,
    "statement": "The warehouse in your shop has n shoe pairs. Each pair is characterized by two integers: its price ci and its size si. We know that on this very day all numbers si are different, that is, there is no more than one pair of each size.The shop has m customers who came at the same time. The customer number i has di money and the size of his feet equals li. The customer number i can buy the pair number j, if cj \u2264 di, and also if li = sj or li = sj - 1; that is, it is necessary that he has enough money to pay for the shoes. It is also necessary that the size of his feet equals to or is less by 1 than the size of the shoes he chooses.Your task is to sell some customers pairs of shoes (a pair per person) so as to maximize the sum of the sold pairs cj that is, the profit. It is guaranteed that each customer buys no more than one pair and each pair will be bought by no more than one customer.",
    "editorial": ""
}{
    "name": "K-beautiful Strings",
    "code": [
        "1493",
        "C"
    ],
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "greedy",
        "strings"
    ],
    "difficulty": 2000,
    "statement": "You are given a string $$$s$$$ consisting of lowercase English letters and a number $$$k$$$. Let's call a string consisting of lowercase English letters beautiful if the number of occurrences of each letter in that string is divisible by $$$k$$$. You are asked to find the lexicographically smallest beautiful string of length $$$n$$$, which is lexicographically greater or equal to string $$$s$$$. If such a string does not exist, output $$$-1$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:   $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;  in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$. ",
    "editorial": "First of all, let's notice that if the length of the string $$$n$$$ is not divisible by $$$k$$$, no beautiful string of such length exists. Otherwise the answer to the problem always exists (because the string $$$zz \\ldots z$$$ is the greatest string of length $$$n$$$ and is beautiful).If the string $$$s$$$ is beautiful, then $$$s$$$ itself is the answer. Otherwise, let's iterate over all the options of the maximal common prefix of the answer string and $$$s$$$, that way we will iterate from $$$n-1$$$ to $$$0$$$.Let's maintain an array $$$cnt_i$$$ \u2014 how many times does the $$$i$$$-th leter of English alphabet occur in the prefix we have fixed. We can recalculate that array totally in $$$0(n)$$$, because when we iterate to the smaller prefix we only need to change one value of $$$cnt$$$.Denote the length of common prefix as $$$pref$$$. Let's iterate over all possible letters at position $$$pref+1$$$ (numeration starts from one) in increasing order. We need to iterate over all letters that are strictly greater than $$$s_{pref+1}$$$, because otherwise either the answer will be less than $$$s$$$ or the length of common prefix won't be equal to $$$pref$$$.Now we need to learn how to check quickly if we can pick any suffix so that we will get a beautiful string. To do that you need to go through the array $$$cnt$$$ and to calculate for each letter which miminal number of times we need to write it more in order to get the amount of occurences divisible by $$$k$$$. For $$$i$$$-th leter it is $$$(k-cnt_i$$$ $$$\\%$$$ $$$k)$$$ $$$\\%$$$ $$$k$$$. Let $$$sum$$$ be the sum of such value over all $$$i$$$. If $$$sum$$$ isn't greater than the length of the suffix, then what's left is to find the minimal suffix.How to build the minimal suffix: let's denote the length of unknown suffix as $$$suff$$$ ($$$suff=n-pref-1$$$). We know that $$$sum \\le suff$$$. If $$$sum < suff$$$, then let's increase the amount of occurences of $$$a$$$ on suffix by $$$suff-sum$$$. Now we will place all letters $$$a$$$, then all letters $$$b$$$ and so on to $$$z$$$.A detail of realization: we will consider iterated letter at position $$$pref+1$$$ in the array $$$cnt$$$. We can maintain array $$$cnt$$$ on prefix of length $$$pref+1$$$ and take into account that $$$pref+1$$$-st symbol is the iterated symbol and not the symbol of string $$$s$$$.The complexity of solution is $$$O(n \\cdot C)$$$, where $$$C$$$ is the size of the alphabet ($$$26$$$). You can also write a solution in $$$O(n)$$$, by maintaining the sum $$$(k-cnt_i$$$ $$$\\%$$$ $$$k)$$$ $$$\\%$$$ $$$k$$$ in a variable."
}{
    "name": "Party",
    "code": [
        "177",
        "C1"
    ],
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "difficulty": 1500,
    "statement": "To celebrate the second ABBYY Cup tournament, the Smart Beaver decided to throw a party. The Beaver has a lot of acquaintances, some of them are friends with each other, and some of them dislike each other. To make party successful, the Smart Beaver wants to invite only those of his friends who are connected by friendship relations, and not to invite those who dislike each other. Both friendship and dislike are mutual feelings.More formally, for each invited person the following conditions should be fulfilled:   all his friends should also be invited to the party;  the party shouldn't have any people he dislikes;  all people who are invited to the party should be connected with him by friendship either directly or through a chain of common friends of arbitrary length. We'll say that people a1 and ap are connected through a chain of common friends if there exists a sequence of people a2, a3, ..., ap - 1 such that all pairs of people ai and ai + 1 (1 \u2264 i < p) are friends. Help the Beaver find the maximum number of acquaintances he can invite.",
    "editorial": ""
}{
    "name": "Madoka and Formal Statement",
    "code": [
        "1717",
        "C"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1300,
    "statement": "Given an array of integer $$$a_1, a_2, \\ldots, a_n$$$. In one operation you can make $$$a_i := a_i + 1$$$ if $$$i < n$$$ and $$$a_i \\leq a_{i + 1}$$$, or $$$i = n$$$ and $$$a_i \\leq a_1$$$.You need to check whether the array $$$a_1, a_2, \\ldots, a_n$$$ can become equal to the array $$$b_1, b_2, \\ldots, b_n$$$ in some number of operations (possibly, zero). Two arrays $$$a$$$ and $$$b$$$ of length $$$n$$$ are called equal if $$$a_i = b_i$$$ for all integers $$$i$$$ from $$$1$$$ to $$$n$$$.",
    "editorial": ""
}{
    "name": "The Child and Binary Tree",
    "code": [
        "438",
        "E"
    ],
    "tags": [
        "combinatorics",
        "divide and conquer",
        "fft",
        "number theory"
    ],
    "difficulty": 3100,
    "statement": "Our child likes computer science very much, especially he likes binary trees.Consider the sequence of n distinct positive integers: c1, c2, ..., cn. The child calls a vertex-weighted rooted binary tree good if and only if for every vertex v, the weight of v is in the set {c1, c2, ..., cn}. Also our child thinks that the weight of a vertex-weighted tree is the sum of all vertices' weights.Given an integer m, can you for all s (1 \u2264 s \u2264 m) calculate the number of good vertex-weighted rooted binary trees with weight s? Please, check the samples for better understanding what trees are considered different.We only want to know the answer modulo 998244353 (7 \u00d7 17 \u00d7 223 + 1, a prime number).",
    "editorial": ""
}{
    "name": "LCIS",
    "code": [
        "10",
        "D"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2800,
    "statement": "This problem differs from one which was on the online contest.The sequence a1, a2, ..., an is called increasing, if ai < ai + 1 for i < n.The sequence s1, s2, ..., sk is called the subsequence of the sequence a1, a2, ..., an, if there exist such a set of indexes 1 \u2264 i1 < i2 < ... < ik \u2264 n that aij = sj. In other words, the sequence s can be derived from the sequence a by crossing out some elements.You are given two sequences of integer numbers. You are to find their longest common increasing subsequence, i.e. an increasing sequence of maximum length that is the subsequence of both sequences.",
    "editorial": ""
}{
    "name": "Black Friday",
    "code": [
        "1431",
        "C"
    ],
    "tags": [
        "*special",
        "implementation"
    ],
    "difficulty": 1600,
    "statement": "There is a local shop in your area getting prepared for the great holiday of Black Friday. There are $$$n$$$ items with prices $$$p_1, p_2, \\dots, p_n$$$ on the display. They are ordered by price, so $$$p_1 \\le p_2 \\le \\dots \\le p_n$$$.The shop has a prechosen discount value $$$k$$$. The Black Friday discount is applied in the following way: for a single purchase of $$$x$$$ items, you get the cheapest $$$\\lfloor \\frac x k \\rfloor$$$ items of them for free ($$$\\lfloor \\frac x k \\rfloor$$$ is $$$x$$$ divided by $$$k$$$ rounded down to the nearest integer). You can include each item in your purchase no more than once.For example, if there are items with prices $$$[1, 1, 2, 2, 2, 3, 4, 5, 6]$$$ in the shop, and you buy items with prices $$$[1, 2, 2, 4, 5]$$$, and $$$k = 2$$$, then you get the cheapest $$$\\lfloor \\frac 5 2 \\rfloor = 2$$$ for free. They are items with prices $$$1$$$ and $$$2$$$.So you, being the naive customer, don't care about how much money you spend. However, you want the total price of the items you get for free to be as large as possible.What is the maximum total price of the items you can get for free on a single purchase?",
    "editorial": "Let's consider the most optimal set of items of some fixed size $$$x$$$. We want the cheapest items to be as expensive as possible, so it's easy to see that taking $$$x$$$ most expensive items overall works the best.The other observation that makes it easier to code is that you only have to consider such $$$x$$$ that are multiples of $$$k$$$. If you take some $$$x$$$ that is not multiple of $$$k$$$, then you will only make $$$\\lfloor \\frac x k \\rfloor$$$ cheapest items cheaper compared to the nearest multiple below it.So the solution is to iterate over multiples of $$$k$$$ and choose the best answer of them.Overall complexity: $$$O(n^2)$$$ per testcase."
}{
    "name": "Bandit in a City",
    "code": [
        "1436",
        "D"
    ],
    "tags": [
        "binary search",
        "dfs and similar",
        "graphs",
        "greedy",
        "trees"
    ],
    "difficulty": 1900,
    "statement": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can.The city consists of $$$n$$$ squares connected by $$$n-1$$$ roads in such a way that it is possible to reach any square from any other square. The square number $$$1$$$ is the main square.After Sunday walk all the roads were changed to one-way roads in such a way that it is possible to reach any square from the main square.At the moment when the bandit appeared on the main square there were $$$a_i$$$ citizens on the $$$i$$$-th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one-way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one-way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square.The bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?",
    "editorial": "First, let's assume that all the citizens are at the root of the tree. Then the answer to the problem will be $$$ \\lceil \\frac{a_1}{leaves} \\rceil $$$, where $$$leaves$$$ is the number of leaves in the tree. According to the Dirichlet principle, this would be the minimum possible number of caught citizens.The answer to the original problem is $$$ max_i {\\lceil \\frac{sum_{a_v}}{leafs_i} \\rceil} $$$, where $$$v$$$ lies in the subtree of $$$i$$$, $$$leaves_i$$$ is the number of leaves in the subtree $$$i$$$.Consider some vertex $$$i$$$, for which it is impossible to split the citizens equally. Then there will be a vertex $$$m$$$ in which in the optimal splitup will have the maximum number of citizens. Obviously, it is not profitable for us to send any citizen from vertex $$$i$$$ to $$$m$$$.In this case, we can go one level down in the tree in the direction of $$$m$$$. We will repeat this step until we can divide the citizens equally. Hence it is clear why the above formula is correct."
}{
    "name": "Letter Exchange",
    "code": [
        "1784",
        "B"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 1900,
    "statement": "A cooperative game is played by $$$m$$$ people. In the game, there are $$$3m$$$ sheets of paper: $$$m$$$ sheets with letter 'w', $$$m$$$ sheets with letter 'i', and $$$m$$$ sheets with letter 'n'.Initially, each person is given three sheets (possibly with equal letters).The goal of the game is to allow each of the $$$m$$$ people to spell the word \"win\" using their sheets of paper. In other words, everyone should have one sheet with letter 'w', one sheet with letter 'i', and one sheet with letter 'n'.To achieve the goal, people can make exchanges. Two people participate in each exchange. Both of them choose exactly one sheet of paper from the three sheets they own and exchange it with each other.Find the shortest sequence of exchanges after which everyone has one 'w', one 'i', and one 'n'.",
    "editorial": "For each person, there are three essential cases of what they could initially have:   Three distinct letters: \"win\". No need to take part in any exchanges.  Two equal letters and another letter, e.g. \"wii\". An extra 'i' must be exchanged with someone's 'n'.  Three equal letters, e.g. \"www\". One 'w' must be exchanged with someone's 'i', another 'w' must be exchanged with someone's 'n'. Let's create a graph on three vertices: 'w', 'i', 'n'. Whenever person $$$i$$$ has an extra letter $$$x$$$ and is lacking letter $$$y$$$, create a directed edge $$$x \\rightarrow y$$$ marked with $$$i$$$.Once the graph is built, whenever you have a cycle of length $$$2$$$, that is, $$$x \\xrightarrow{i} y \\xrightarrow{j} x$$$, it means person $$$i$$$ needs to exchange $$$x$$$ for $$$y$$$, while person $$$j$$$ needs to exchange $$$y$$$ for $$$x$$$. Thus, both of their needs can be satisfied with just one exchange.Finally, once there are no cycles of length $$$2$$$, note that the in-degree and the out-degree of every vertex are equal. If e.g. there are $$$p$$$ edges 'w' $$$\\rightarrow$$$ 'i', it follows that there are $$$p$$$ edges 'i' $$$\\rightarrow$$$ 'n' and $$$p$$$ edges 'n' $$$\\rightarrow$$$ 'w'. It means we can form $$$p$$$ cycles of length $$$3$$$. (The cycles could also go in the opposite direction: 'w' $$$\\rightarrow$$$ 'n' $$$\\rightarrow$$$ 'i' $$$\\rightarrow$$$ 'w'.) In any case, each cycle of length $$$3$$$ can be solved using $$$2$$$ exchanges. "
}{
    "name": "Rainbow Rectangles",
    "code": [
        "1396",
        "D"
    ],
    "tags": [
        "data structures",
        "sortings",
        "two pointers"
    ],
    "difficulty": 3300,
    "statement": "Shrimpy Duc is a fat and greedy boy who is always hungry. After a while of searching for food to satisfy his never-ending hunger, Shrimpy Duc finds M&M candies lying unguarded on a $$$L \\times L$$$ grid. There are $$$n$$$ M&M candies on the grid, the $$$i$$$-th M&M is currently located at $$$(x_i + 0.5, y_i + 0.5),$$$ and has color $$$c_i$$$ out of a total of $$$k$$$ colors (the size of M&Ms are insignificant).Shrimpy Duc wants to steal a rectangle of M&Ms, specifically, he wants to select a rectangle with integer coordinates within the grid and steal all candies within the rectangle. Shrimpy Duc doesn't need to steal every single candy, however, he would like to steal at least one candy for each color.In other words, he wants to select a rectangle whose sides are parallel to the coordinate axes and whose left-bottom vertex $$$(X_1, Y_1)$$$ and right-top vertex $$$(X_2, Y_2)$$$ are points with integer coordinates satisfying $$$0 \\le X_1 < X_2 \\le L$$$ and $$$0 \\le Y_1 < Y_2 \\le L$$$, so that for every color $$$1 \\le c \\le k$$$ there is at least one M&M with color $$$c$$$ that lies within that rectangle.How many such rectangles are there? This number may be large, so you only need to find it modulo $$$10^9 + 7$$$.",
    "editorial": "Let $$$xl, xr, yd, yu$$$ denote a rectangle with opposite corners $$$(xl, yd)$$$ and $$$(xr, yu)$$$. For convenience, assume $$$(xl \\le xr)$$$ and $$$(yd \\le yu)$$$.Let's try solving the problem if coordinates are in range $$$[1, n]$$$. We could easily do this by coordinates compression.First, let's look at the problem with $$$(yd, yu)$$$ fixed. We define $$$f_x$$$ to be the smallest integer such that $$$x \\le f_x$$$ and $$$(x, yd), (f_x, yu)$$$ is a $$$\\textbf{good}$$$ rectangle (If there is no such integer, let $$$f_x = inf$$$). It can be proven that $$$f_x$$$ is non-decreasing, i.e. if $$$x < y$$$, then $$$f_x \\le f_y$$$.Now, let's see how $$$f_x$$$ changes when we iterate $$$yd$$$ over a fixed $$$yu$$$. It is hard to add points to the set, so we will try to support deleting points operation. For point $$$i$$$, we have the following definitions:Let set $$$S = \\{ j | c_j = c_i, y_i < y_j \\le yu, x_j \\le x_i \\}$$$. Let $$$prv_i = j \\in S$$$ with the largest $$$x_j$$$.Let set $$$S' = \\{ j | c_j = c_i, y_i < y_j \\le yu, x_j \\ge x_i \\}$$$. Let $$$nxt_i = j \\in S'$$$ with the smallest $$$x_j$$$.(Note that $$$S$$$ or $$$S'$$$ might represent empty set).With these two functions, we could see how $$$f_x$$$ changes after we delete point $$$i$$$. It looks something like this: For every $$$xl \\in (x_{prv_i}, x_i]$$$ such that $$$f_{xl} \\ge x_i, f_{xl} = max(f_{xl}, x_{nxt_i})$$$;We could support this operation using segment tree with lazy propagation. The total time complexity is $$$O(n^2 \\cdot log_n)$$$."
}{
    "name": "Multihedgehog",
    "code": [
        "1067",
        "B"
    ],
    "tags": [
        "dfs and similar",
        "graphs",
        "shortest paths"
    ],
    "difficulty": 1800,
    "statement": "Someone give a strange birthday present to Ivan. It is hedgehog\u00a0\u2014 connected undirected graph in which one vertex has degree at least $$$3$$$ (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself $$$k$$$-multihedgehog.Let us define $$$k$$$-multihedgehog as follows: $$$1$$$-multihedgehog is hedgehog: it has one vertex of degree at least $$$3$$$ and some vertices of degree 1. For all $$$k \\ge 2$$$, $$$k$$$-multihedgehog is $$$(k-1)$$$-multihedgehog in which the following changes has been made for each vertex $$$v$$$ with degree 1: let $$$u$$$ be its only neighbor; remove vertex $$$v$$$, create a new hedgehog with center at vertex $$$w$$$ and connect vertices $$$u$$$ and $$$w$$$ with an edge. New hedgehogs can differ from each other and the initial gift. Thereby $$$k$$$-multihedgehog is a tree. Ivan made $$$k$$$-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed $$$k$$$-multihedgehog.",
    "editorial": "Solution 1: Firstly let's find all vertices with degree $$$1$$$. Now we can delete them and all, verticies which were incident to them must became verticies with degree $$$1$$$. And also for each new veretice with degree $$$1$$$ we must have already deleted not less then $$$3$$$ verticies. If initial graph was $$$k$$$-multihedgehog, after deleting vertices with degree $$$1$$$ it would became $$$k-1$$$-multihedgehog.It could be realised using bfs starting from all initial vertices with degree $$$1$$$.Complexity is $$$O(n)$$$.Solution 2: First of all let's find diametr of the graph. After that we can find middle vertex in diameter and check if it is a center of $$$k$$$-multihedgehog using simple dfs.Complexity is $$$O(n)$$$."
}{
    "name": "Long Number",
    "code": [
        "1157",
        "B"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1300,
    "statement": "You are given a long decimal number $$$a$$$ consisting of $$$n$$$ digits from $$$1$$$ to $$$9$$$. You also have a function $$$f$$$ that maps every digit from $$$1$$$ to $$$9$$$ to some (possibly the same) digit from $$$1$$$ to $$$9$$$.You can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $$$a$$$, and replace each digit $$$x$$$ from this segment with $$$f(x)$$$. For example, if $$$a = 1337$$$, $$$f(1) = 1$$$, $$$f(3) = 5$$$, $$$f(7) = 3$$$, and you choose the segment consisting of three rightmost digits, you get $$$1553$$$ as the result.What is the maximum possible number you can obtain applying this operation no more than once?",
    "editorial": "Let's find the first digit in $$$a$$$ that becomes strictly greater if we replace it (obviously, if there is no such digit, then the best solution is to leave $$$a$$$ unchanged). In the optimal solution we will replace this digit and maybe some digits after this. Why is it so? It is impossible to make any of the previous digits greater (since we found the first digit that can be replaced with a greater one). Then let's analyze all digits to the right of it. We should not replace any digit with a lower digit (because it is better not to replace it and all digits to the right of it at all), but there's nothing wrong with replacing any other digits.So, the segment we need to replace begins with the first digit that can become greater after replacing (and includes this digit) and goes to the right until the first digit that becomes less after replacing (and this digit is excluded)."
}{
    "name": "Tree Factory",
    "code": [
        "1225",
        "F"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "trees"
    ],
    "difficulty": 2500,
    "statement": "Bytelandian Tree Factory produces trees for all kinds of industrial applications. You have been tasked with optimizing the production of a certain type of tree for an especially large and important order.The tree in question is a rooted tree with $$$n$$$ vertices labelled with distinct integers from $$$0$$$ to $$$n - 1$$$. The vertex labelled $$$0$$$ is the root of the tree, and for any non-root vertex $$$v$$$ the label of its parent $$$p(v)$$$ is less than the label of $$$v$$$.All trees at the factory are made from bamboo blanks. A bamboo is a rooted tree such that each vertex has exactly one child, except for a single leaf vertex with no children. The vertices of a bamboo blank can be labelled arbitrarily before its processing is started.To process a bamboo into another tree a single type of operation can be made: choose an arbitrary non-root vertex $$$v$$$ such that its parent $$$p(v)$$$ is not a root either. The operation consists of changing the parent of $$$v$$$ to its parent's parent $$$p(p(v))$$$. Note that parents of all other vertices remain unchanged, in particular, the subtree of $$$v$$$ does not change.Efficiency is crucial, hence you have to minimize the number of operations to make the desired tree from a bamboo blank. Construct any optimal sequence of operations to produce the desired tree.Note that the labelling of the resulting tree has to coincide with the labelling of the desired tree. Formally, the labels of the roots have to be equal, and for non-root vertices with the same label the labels of their parents should be the same.It is guaranteed that for any test present in this problem an answer exists, and further, an optimal sequence contains at most $$$10^6$$$ operations. Note that any hack that does not meet these conditions will be invalid.",
    "editorial": "Let's solve the problem backwards: given a tree, transform it into a bamboo with reverse operations. A reverse operation in this context looks like this: given a vertex $$$v$$$ and its two distinct children $$$u$$$ and $$$w$$$, make $$$w$$$ the parent of $$$u$$$.What's the lower bound on the number of operations we need to make? We can see that the depth of the tree, i.e. the length of the longest vertical path starting from the root, can increase by at most one per operation. On the other hand, the depth of the bamboo is $$$n - 1$$$. Therefore, we'll need to make at least $$$n - 1 - (\\text{initial depth of the tree})$$$ operations.This number would always be enough if for any non-bamboo tree we could find an operation that would increase its depth. And indeed we can: consider a longest path starting from the root. If all its vertices have at most one children, the tree is a bamboo and we are done. Otherwise, take any vertex $$$v$$$ on the path with at least two children, its child $$$u$$$ on the longest path, and any other child $$$w$$$, then make $$$w$$$ the parent of $$$u$$$. One can see that there is a longer path now.One efficient way to do these operations successively is to keep track of the lowest candidate for $$$u$$$. After applying an operation, the candidate is either $$$u$$$ again, or one of its ancestors. With standard amortized analysis, we can now perform all these operations in $$$O(n)$$$ time.To output the answer, print the labelling of the final bamboo you obtain, followed by the reverse sequence of the operations you've made."
}{
    "name": "Equalize Prices Again",
    "code": [
        "1234",
        "A"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 800,
    "statement": "You are both a shop keeper and a shop assistant at a small nearby shop. You have $$$n$$$ goods, the $$$i$$$-th good costs $$$a_i$$$ coins.You got tired of remembering the price of each product when customers ask for it, thus you decided to simplify your life. More precisely you decided to set the same price for all $$$n$$$ goods you have.However, you don't want to lose any money so you want to choose the price in such a way that the sum of new prices is not less than the sum of the initial prices. It means that if you sell all $$$n$$$ goods for the new price, you will receive at least the same (or greater) amount of money as if you sell them for their initial prices.On the other hand, you don't want to lose customers because of big prices so among all prices you can choose you need to choose the minimum one.So you need to find the minimum possible equal price of all $$$n$$$ goods so if you sell them for this price, you will receive at least the same (or greater) amount of money as if you sell them for their initial prices.You have to answer $$$q$$$ independent queries.",
    "editorial": "In this problem, we need to find the minimum possible $$$price$$$ such that $$$price \\cdot n \\ge sum$$$, where $$$sum$$$ is the sum of all $$$a_i$$$. $$$price$$$ equals to $$$\\lceil \\frac{sum}{n} \\rceil$$$, where $$$\\lceil \\frac{x}{y} \\rceil$$$ is $$$x$$$ divided by $$$y$$$ rounded up."
}{
    "name": "Robot Rapping Results Report",
    "code": [
        "645",
        "D"
    ],
    "tags": [
        "binary search",
        "dp",
        "graphs"
    ],
    "difficulty": 1800,
    "statement": "While Farmer John rebuilds his farm in an unfamiliar portion of Bovinia, Bessie is out trying some alternative jobs. In her new gig as a reporter, Bessie needs to know about programming competition results as quickly as possible. When she covers the 2016 Robot Rap Battle Tournament, she notices that all of the robots operate under deterministic algorithms. In particular, robot i will beat robot j if and only if robot i has a higher skill level than robot j. And if robot i beats robot j and robot j beats robot k, then robot i will beat robot k. Since rapping is such a subtle art, two robots can never have the same skill level.Given the results of the rap battles in the order in which they were played, determine the minimum number of first rap battles that needed to take place before Bessie could order all of the robots by skill level.",
    "editorial": "The robots will become fully sorted if and only if there exists a path with n vertices in the graph of relations. We can compute the longest path in this directed acyclic graph (DAG) by dynamic programming / topologically sorting. After computing this longest path, it obviously must be unique. If the longest path has less than n vertices, then print  - 1.Otherwise, there is a path of length n - 1 edges. Therefore, the point at which we know the whole ordering is the latest time that an edge from this path is added.The time this takes is O(n).Alternatively, do the same approach as above but instead binary search on the number of relations needed. This might be easier to see, and takes "
}{
    "name": "Summer Earnings",
    "code": [
        "333",
        "E"
    ],
    "tags": [
        "binary search",
        "bitmasks",
        "brute force",
        "geometry",
        "sortings"
    ],
    "difficulty": 2500,
    "statement": "Many schoolchildren look for a job for the summer, and one day, when Gerald was still a schoolboy, he also decided to work in the summer. But as Gerald was quite an unusual schoolboy, he found quite unusual work. A certain Company agreed to pay him a certain sum of money if he draws them three identical circles on a plane. The circles must not interfere with each other (but they may touch each other). He can choose the centers of the circles only from the n options granted by the Company. He is free to choose the radius of the circles himself (all three radiuses must be equal), but please note that the larger the radius is, the more he gets paid. Help Gerald earn as much as possible.",
    "editorial": ""
}{
    "name": "Permutation Forgery",
    "code": [
        "1405",
        "A"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 800,
    "statement": "A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).Let $$$p$$$ be any permutation of length $$$n$$$. We define the fingerprint $$$F(p)$$$ of $$$p$$$ as the sorted array of sums of adjacent elements in $$$p$$$. More formally,$$$$$$F(p)=\\mathrm{sort}([p_1+p_2,p_2+p_3,\\ldots,p_{n-1}+p_n]).$$$$$$For example, if $$$n=4$$$ and $$$p=[1,4,2,3],$$$ then the fingerprint is given by $$$F(p)=\\mathrm{sort}([1+4,4+2,2+3])=\\mathrm{sort}([5,6,5])=[5,5,6]$$$.You are given a permutation $$$p$$$ of length $$$n$$$. Your task is to find a different permutation $$$p'$$$ with the same fingerprint. Two permutations $$$p$$$ and $$$p'$$$ are considered different if there is some index $$$i$$$ such that $$$p_i \\ne p'_i$$$.",
    "editorial": "Let $$$p'=\\mathrm{reverse}(p).$$$ Then  $$$p'$$$ is a permutation, since every value from $$$1$$$ to $$$n$$$ appears exactly once.  $$$p'\\ne p$$$ since $$$p'_1=p_n\\ne p_1$$$. (Here, we use $$$n\\ge 2$$$.)  $$$F(p')=F(p)$$$ since any two adjacent values in $$$p$$$ remain adjacent in $$$p'$$$. "
}{
    "name": "Equal Binary Subsequences",
    "code": [
        "1736",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "geometry",
        "greedy",
        "implementation",
        "strings"
    ],
    "difficulty": 2200,
    "statement": "Everool has a binary string $$$s$$$ of length $$$2n$$$. Note that a binary string is a string consisting of only characters $$$0$$$ and $$$1$$$. He wants to partition $$$s$$$ into two disjoint equal subsequences. He needs your help to do it.You are allowed to do the following operation exactly once.   You can choose any subsequence (possibly empty) of $$$s$$$ and rotate it right by one position. In other words, you can select a sequence of indices $$$b_1, b_2, \\ldots, b_m$$$, where $$$1 \\le b_1 < b_2 < \\ldots < b_m \\le 2n$$$. After that you simultaneously set $$$$$$s_{b_1} := s_{b_m},$$$$$$ $$$$$$s_{b_2} := s_{b_1},$$$$$$ $$$$$$\\ldots,$$$$$$ $$$$$$s_{b_m} := s_{b_{m-1}}.$$$$$$Can you partition $$$s$$$ into two disjoint equal subsequences after performing the allowed operation exactly once?A partition of $$$s$$$ into two disjoint equal subsequences $$$s^p$$$ and $$$s^q$$$ is two increasing arrays of indices $$$p_1, p_2, \\ldots, p_n$$$ and $$$q_1, q_2, \\ldots, q_n$$$, such that each integer from $$$1$$$ to $$$2n$$$ is encountered in either $$$p$$$ or $$$q$$$ exactly once, $$$s^p = s_{p_1} s_{p_2} \\ldots s_{p_n}$$$, $$$s^q = s_{q_1} s_{q_2} \\ldots s_{q_n}$$$, and $$$s^p = s^q$$$.If it is not possible to partition after performing any kind of operation, report $$$-1$$$. If it is possible to do the operation and partition $$$s$$$ into two disjoint subsequences $$$s^p$$$ and $$$s^q$$$, such that $$$s^p = s^q$$$, print elements of $$$b$$$ and indices of $$$s^p$$$, i.\u00a0e. the values $$$p_1, p_2, \\ldots, p_n$$$.",
    "editorial": "It is easy to see that a necessary condition for a solution to exist is that the number of $$$1$$$ in $$$s$$$ should be even. It turns out that this condition is sufficient too.Here is one valid construction:We make $$$n$$$ pairs of the form $$$(s[2i-1],s[2i])$$$ for $$$(1 \\leq i \\leq n)$$$.Assume we have $$$x$$$ pairs in which both elements are different and $$$n-x$$$ pairs in which both elements are same.Claim \u2014 $$$x$$$ should be even.Proof \u2014 Assume that among the $$$n-x$$$ pairs in which both elements are same, we have $$$y$$$ pairs in which both elements are $$$1$$$. So number of $$$1$$$ in $$$s$$$ is $$$x+2 \\cdot y$$$. We know that number of $$$1$$$ in $$$s$$$ is even, so for $$$x+2 \\cdot y$$$ to be even, $$$x$$$ should also be even.Now we will select $$$x$$$ indices; exactly one index from each of the $$$x$$$ pairs in which both elements are distinct. Take the index of $$$0$$$ from $$$i_{th}$$$ pair if $$$i$$$ is odd, else take the index of $$$1$$$. Thus our selected characters = $$${0,1,0,1, \\dots ,0,1}$$$Now on cyclically shifting the selected characters clockwise once, we can see that elements at selected indices got flipped.Since, elements in those $$$x$$$ pairs were distinct initially, and we flipped exactly one character from each of those $$$x$$$ pairs, both elements of those $$$x$$$ pairs are same now.Hence, in updated $$$s$$$, $$$s[2i-1]=s[2i]$$$.So, for $$$s_1$$$, we can select characters of all odd indices.Finally we'll have $$$s_1 = s_2$$$."
}{
    "name": "Sum the Fibonacci",
    "code": [
        "914",
        "G"
    ],
    "tags": [
        "bitmasks",
        "divide and conquer",
        "dp",
        "fft",
        "math"
    ],
    "difficulty": 2600,
    "statement": "You are given an array s of n non-negative integers.A 5-tuple of integers (a, b, c, d, e) is said to be valid if it satisfies the following conditions:   1 \u2264 a, b, c, d, e \u2264 n  (sa | sb) & sc & (sd ^ se) = 2i for some integer i  sa & sb = 0 Here, '|' is the bitwise OR, '&' is the bitwise AND and '^' is the bitwise XOR operation.Find the sum of f(sa|sb) * f(sc) * f(sd^se) over all valid 5-tuples (a, b, c, d, e), where f(i) is the i-th Fibonnaci number (f(0) = 0, f(1) = 1, f(i) = f(i - 1) + f(i - 2)).Since answer can be is huge output it modulo 109 + 7.",
    "editorial": "Apologies, we didn't expect an O(317) solution. The expected solution was as follows.Let A[i] be the number of pairs (x, y) in the array such that their bitwise OR is i and x&y = 0, multiplied by Fib[i]. This can be done using subset convolution. Let B[i] be the count of each element in array, multiplied by Fib[i]. Let C[i] be the number of pairs (x, y) such that their bitwise xor is i, multiplied by Fib[i]. This can be done using Xor convolution.Let D be the And Convolution of A, B, and C. Then the answer is given by the expression .Complexity: O(217 * (173))"
}{
    "name": "Beaver's Calculator 1.0",
    "code": [
        "207",
        "A1"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1600,
    "statement": "The Smart Beaver from ABBYY has once again surprised us! He has developed a new calculating device, which he called the \"Beaver's Calculator 1.0\". It is very peculiar and it is planned to be used in a variety of scientific problems.To test it, the Smart Beaver invited n scientists, numbered from 1 to n. The i-th scientist brought ki calculating problems for the device developed by the Smart Beaver from ABBYY. The problems of the i-th scientist are numbered from 1 to ki, and they must be calculated sequentially in the described order, since calculating each problem heavily depends on the results of calculating of the previous ones.Each problem of each of the n scientists is described by one integer ai, j, where i (1 \u2264 i \u2264 n) is the number of the scientist, j (1 \u2264 j \u2264 ki) is the number of the problem, and ai, j is the number of resource units the calculating device needs to solve this problem.The calculating device that is developed by the Smart Beaver is pretty unusual. It solves problems sequentially, one after another. After some problem is solved and before the next one is considered, the calculating device allocates or frees resources.The most expensive operation for the calculating device is freeing resources, which works much slower than allocating them. It is therefore desirable that each next problem for the calculating device requires no less resources than the previous one.You are given the information about the problems the scientists offered for the testing. You need to arrange these problems in such an order that the number of adjacent \"bad\" pairs of problems in this list is minimum possible. We will call two consecutive problems in this list a \"bad pair\" if the problem that is performed first requires more resources than the one that goes after it. Do not forget that the problems of the same scientist must be solved in a fixed order.",
    "editorial": ""
}{
    "name": "LIS or Reverse LIS?",
    "code": [
        "1682",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "difficulty": 1400,
    "statement": "You are given an array $$$a$$$ of $$$n$$$ positive integers. Let $$$\\text{LIS}(a)$$$ denote the length of longest strictly increasing subsequence of $$$a$$$. For example,  $$$\\text{LIS}([2, \\underline{1}, 1, \\underline{3}])$$$ = $$$2$$$.  $$$\\text{LIS}([\\underline{3}, \\underline{5}, \\underline{10}, \\underline{20}])$$$ = $$$4$$$.  $$$\\text{LIS}([3, \\underline{1}, \\underline{2}, \\underline{4}])$$$ = $$$3$$$.  We define array $$$a'$$$ as the array obtained after reversing the array $$$a$$$ i.e. $$$a' = [a_n, a_{n-1}, \\ldots , a_1]$$$.The beauty of array $$$a$$$ is defined as $$$min(\\text{LIS}(a),\\text{LIS}(a'))$$$.Your task is to determine the maximum possible beauty of the array $$$a$$$ if you can rearrange the array $$$a$$$ arbitrarily.",
    "editorial": "Let's make some small observations   $$$\\text{LIS(a')} = \\text{LDS(a)}$$$, where $$$\\text{LDS(a)}$$$ denote the length of longest strictly decreasing subsequence of $$$a$$$.  There can be atmost one element common between $$$\\text{LIS}$$$ of $$$a$$$ and $$$\\text{LDS}$$$ of $$$a$$$.If some element $$$x$$$ occurs $$$\\geq 2$$$ times, then one of its occurrences can be included in $$$\\text{LIS}$$$ and one in $$$\\text{LDS}$$$, and all of the remaining occurrences are of no use.If some element $$$x$$$ is singleton i.e. frequency of $$$x$$$ in $$$a$$$ is $$$1$$$, then it can have $$$3$$$ positions  Inside $$$\\text{LIS}$$$ only.  Inside $$$\\text{LDS}$$$ only.  Common element of $$$\\text{LIS}$$$ and $$$\\text{LDS}$$$. We can now see that it is always optimal to choose a common element singleton, and the rest of the elements can be divided greedily. Let $$$t$$$ be the number of elements having frequency greater than $$$1$$$ in $$$a$$$ and $$$s$$$ be the number of singletons in $$$a$$$. So answer would be $$$t + \\lceil \\frac{s}{2} \\rceil$$$. We can find $$$s$$$ and $$$t$$$ using some data structure like std::map in C++ in $$$\\mathcal{O}(n\\log(n))$$$."
}{
    "name": "Perfect Permutation",
    "code": [
        "1711",
        "A"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 800,
    "statement": "You are given a positive integer $$$n$$$.The weight of a permutation $$$p_1, p_2, \\ldots, p_n$$$ is the number of indices $$$1\\le i\\le n$$$ such that $$$i$$$ divides $$$p_i$$$. Find a permutation $$$p_1,p_2,\\dots, p_n$$$ with the minimum possible weight (among all permutations of length $$$n$$$).A permutation is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).",
    "editorial": "The minimal weight is at least $$$1$$$ since $$$1$$$ divides any integer (so $$$1$$$ divides $$$p_1$$$).Since $$$k+1$$$ does not divide $$$k$$$, a permutation with weight equal to $$$1$$$ is: $$$[n,1,2,\\cdots,n-1]$$$."
}{
    "name": "Fibonotci",
    "code": [
        "575",
        "A"
    ],
    "tags": [
        "data structures",
        "math",
        "matrices"
    ],
    "difficulty": 2700,
    "statement": "Fibonotci sequence is an integer recursive sequence defined by the recurrence relation  Fn = sn - 1\u00b7Fn - 1 + sn - 2\u00b7Fn - 2  with  F0 = 0, F1 = 1 Sequence s is an infinite and almost cyclic sequence with a cycle of length N. A sequence s is called almost cyclic with a cycle of length N if , for i \u2265 N, except for a finite number of values si, for which  (i \u2265 N).Following is an example of an almost cyclic sequence with a cycle of length 4:  s = (5,3,8,11,5,3,7,11,5,3,8,11,\u2026) Notice that the only value of s for which the equality  does not hold is s6 (s6 = 7 and s2 = 8). You are given s0, s1, ...sN - 1 and all the values of sequence s for which  (i \u2265 N).Find .",
    "editorial": ""
}{
    "name": "Ksenia and Pawns",
    "code": [
        "382",
        "D"
    ],
    "tags": [
        "dfs and similar",
        "graphs",
        "implementation",
        "trees"
    ],
    "difficulty": 2200,
    "statement": "Ksenia has a chessboard of size n \u00d7 m. Each cell of the chessboard contains one of the characters: \"<\", \">\", \"^\", \"v\", \"#\". The cells that contain character \"#\" are blocked. We know that all chessboard cells that touch the border are blocked.Ksenia is playing with two pawns on this chessboard. Initially, she puts the pawns on the chessboard. One cell of the chessboard can contain two pawns if and only if the cell is blocked. In other cases two pawns can not stand in one cell. The game begins when Ksenia put pawns on the board. In one move, Ksenia moves each pawn to a side adjacent cell in the direction of arrows painted on the cell on which the corresponding pawn sits (if the pawn sits on \"#\", it does not move). Assume that Ksenia moves pawns simultaneously (see the second test case). Of course, Ksenia plays for points. How can one calculate the points per game? Very simply! Let's count how many movements the first pawn made and how many movements the second pawn made, sum these two numbers \u2014 it will be the resulting score of the game. Ksenia wonders: what is the maximum number of points she can earn (for that, she should place the pawns optimally well early in the game). Help her and find that number. ",
    "editorial": ""
}{
    "name": "Ladder",
    "code": [
        "279",
        "C"
    ],
    "tags": [
        "dp",
        "implementation",
        "two pointers"
    ],
    "difficulty": 1700,
    "statement": "You've got an array, consisting of n integers a1, a2, ..., an. Also, you've got m queries, the i-th query is described by two integers li, ri. Numbers li, ri define a subsegment of the original array, that is, the sequence of numbers ali, ali + 1, ali + 2, ..., ari. For each query you should check whether the corresponding segment is a ladder. A ladder is a sequence of integers b1, b2, ..., bk, such that it first doesn't decrease, then doesn't increase. In other words, there is such integer x (1 \u2264 x \u2264 k), that the following inequation fulfills: b1 \u2264 b2 \u2264 ... \u2264 bx \u2265 bx + 1 \u2265 bx + 2... \u2265 bk. Note that the non-decreasing and the non-increasing sequences are also considered ladders.",
    "editorial": ""
}{
    "name": "Pretty Song",
    "code": [
        "509",
        "E"
    ],
    "tags": [
        "math",
        "strings"
    ],
    "difficulty": 2000,
    "statement": "When Sasha was studying in the seventh grade, he started listening to music a lot. In order to evaluate which songs he likes more, he introduced the notion of the song's prettiness. The title of the song is a word consisting of uppercase Latin letters. The prettiness of the song is the prettiness of its title.Let's define the simple prettiness of a word as the ratio of the number of vowels in the word to the number of all letters in the word.Let's define the prettiness of a word as the sum of simple prettiness of all the substrings of the word.More formally, let's define the function vowel(c) which is equal to 1, if c is a vowel, and to 0 otherwise. Let si be the i-th character of string s, and si..j be the substring of word s, staring at the i-th character and ending at the j-th character (sisi + 1... sj, i \u2264 j).Then the simple prettiness of s is defined by the formula:The prettiness of s equals Find the prettiness of the given song title.We assume that the vowels are I, E, A, O, U, Y.",
    "editorial": ""
}{
    "name": "Calendar",
    "code": [
        "58",
        "D"
    ],
    "tags": [
        "greedy",
        "strings"
    ],
    "difficulty": 2000,
    "statement": "BerOilGasDiamondBank has branches in n cities, at that n is an even number. The bank management wants to publish a calendar with the names of all those cities written in two columns: the calendar should consist of exactly n / 2 lines of strictly equal length, each of which contains exactly two names and exactly one separator character between them. The name of every city should be used in the calendar exactly once. For historical reasons the symbol d is used as the separator of words in the calendar. The BerOilGasDiamondBank management wants to show that all its branches are equally important to it, that's why the order of their appearance in the calendar should be following: if we \"glue\"(concatinate) all the n / 2 calendar lines (from top to bottom) to make a single line, then the lexicographically minimal line is obtained. No separator character will be used to separate calendar lines. For example, if the lines are \"bertown!berville\", \"newberville!bera\", then the resulting line is \"bertown!bervillenewberville!bera\". In some sense one has to find the lexicographically minimal calendar, where the comparison of calendars happens line by line.Help BerOilGasDiamondBank and construct the required calendar.",
    "editorial": ""
}{
    "name": "Distinguish Z from S",
    "code": [
        "1356",
        "A3"
    ],
    "tags": [
        "*special"
    ],
    "difficulty": "",
    "statement": "You are given an operation that implements a single-qubit unitary transformation: either the Z gate or the S gate. The operation will have Adjoint and Controlled variants defined.Your task is to perform necessary operations and measurements to figure out which unitary it was and to return 0 if it was the Z gate or 1 if it was the S gate. You are allowed to apply the given operation and its adjoint/controlled variants exactly twice.You have to implement an operation which takes a single-qubit operation as an input and returns an integer. Your code should have the following signature:namespace Solution {    open Microsoft.Quantum.Intrinsic;    operation Solve (unitary : (Qubit => Unit is Adj+Ctl)) : Int {        // your code here    }}",
    "editorial": ""
}{
    "name": "Palindrome Partition",
    "code": [
        "932",
        "G"
    ],
    "tags": [
        "dp",
        "string suffix structures",
        "strings"
    ],
    "difficulty": 2900,
    "statement": "Given a string s, find the number of ways to split s to substrings such that if there are k substrings (p1, p2, p3, ..., pk) in partition, then pi = pk - i + 1 for all i (1 \u2264 i \u2264 k) and k is even.Since the number of ways can be large, print it modulo 109 + 7.",
    "editorial": "Let n be the length of the string s. Consider the string t = s[0]s[n - 1]s[1]s[n - 2]s[2]s[n - 3]...s[n / 2 - 1]s[n / 2]. The problem can be reduced to finding the number of ways to partition string t into palindromic substrings of even length. Proof: Let k be the total number of partitions. Let pi = pk - i + 1 = x1x2x3...xm where m denotes length of pi and xj denotes jth character of pi. The part of string t corresponding to these two partitions is x1xmx2xm - 1...xm - 1x2xmx1 which is an even length palindrome. Similarly, the converse is also true. Dynamic programming can be used to solve the problem. Let dp[i] be the number of ways to partition t[1...i] into even length palindromes. Then,  where t[j + 1...i] is an even length palindrome. Of course for odd i, dp[i] = 0. As discussed in thisblog, we can use an eertree to implement the solution. On the other hand, we can avoid the use of any suffix structure by following the algorithm described in thispaper.Complexity: O(|s|log|s|) "
}{
    "name": "Nearest Beautiful Number (hard version)",
    "code": [
        "1560",
        "F2"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dfs and similar",
        "dp",
        "greedy"
    ],
    "difficulty": 2100,
    "statement": "It is a complicated version of problem F1. The difference between them is the constraints (F1: $$$k \\le 2$$$, F2: $$$k \\le 10$$$).You are given an integer $$$n$$$. Find the minimum integer $$$x$$$ such that $$$x \\ge n$$$ and the number $$$x$$$ is $$$k$$$-beautiful.A number is called $$$k$$$-beautiful if its decimal representation having no leading zeroes contains no more than $$$k$$$ different digits. E.g. if $$$k = 2$$$, the numbers $$$3434443$$$, $$$55550$$$, $$$777$$$ and $$$21$$$ are $$$k$$$-beautiful whereas the numbers $$$120$$$, $$$445435$$$ and $$$998244353$$$ are not.",
    "editorial": "Suppose the number $$$n$$$ contains $$$m$$$ digits and its decimal representation is $$$d_1d_2 \\dots d_m$$$. The desired number $$$x$$$ isn't greater than the number consisting of $$$m$$$ digits $$$9$$$. This number is $$$1$$$-beautiful whereas any $$$1$$$-beautiful number is at the same time $$$k$$$-beautiful, so $$$x$$$ contains at most $$$m$$$ digits. At the same time, $$$x \\ge n$$$ so $$$x$$$ contains at least $$$m$$$ digits. Therefore, the desired number contains exactly $$$m$$$ digits.Since we search for the minimum $$$x$$$, we need to minimize first of all the first digit, only then the second digit, etc. Therefore, we need to find a prefix of the decimal representation of $$$n$$$ such that is a prefix of the decimal representation of $$$x$$$. Let's do it greedily.Short solution, works in $$$O(m^2)$$$Let's find the maximum prefix of $$$n$$$ such that contains no more than $$$k$$$ distinct numbers. Suppose the prefix has the length $$$p$$$. If $$$p = m$$$, then $$$n$$$ is already $$$k$$$-beautiful, let's output it. Otherwise, let's increase the prefix like a number by $$$1$$$, e.g. if $$$n = 1294$$$ and $$$p = 3$$$, then we increase $$$129$$$ by $$$1$$$, the resulting prefix is $$$130$$$. All other digits ($$$d_{p + 2}, d_{p + 3}, \\dots, d_m$$$), let's set to zeroes (e.g. if $$$n = 1294$$$ and $$$p = 3$$$, then $$$n$$$ will be turned into $$$1300$$$). The answer for the old $$$n$$$ is the answer for the new $$$n$$$. To get the answer for the new $$$n$$$, let's start the described procedure once again preparing the new $$$n$$$.Long solution, works in $$$O(mk)$$$Let's find the maximum prefix of $$$n$$$ such that contains no more than $$$k$$$ distinct numbers. It's possible to do using a $$$map$$$ in which for each digit (the key) the number of its occurrences in the prefix is stored. For an empty prefix, the $$$map$$$ is empty. If we increase the prefix length by $$$1$$$, we need to check that $$$map$$$ contains no more than $$$k$$$ keys and add a new key with the value $$$1$$$ or increase the value of an existing key. If the length of the found prefix is equal to the length of the whole decimal representation, the given number is already $$$k$$$-beautiful so the answer is $$$n$$$.Otherwise, the found prefix may not be a prefix of the desired number. Let's change the digits of the decimal representation of $$$n$$$ to turn it into the desired number $$$x$$$. Let's start the following procedure: suppose we consider a prefix with the length equal to $$$p$$$. First, let's find out, is it possible to increase the first element out of the prefix (i. e. $$$d_{p + 1}$$$). We need to do it because if we consider the length $$$p$$$, then the prefix with the length $$$p + 1$$$ cannot be unchanged so the element $$$d_{p + 1}$$$ must be changed whereas it cannot be decreased because, in this case, we will get the number which is less than $$$n$$$. If we can increase the element $$$d_{p + 1}$$$ so that the prefix with the length $$$p + 1$$$ has at most $$$k$$$ distinct digits, the only thing that is remained to do is to fill the remaining digits $$$d_{p + 2}, d_{p + 3}, \\dots d_m$$$ somehow greedily and output the result. If we cannot increase the element $$$d_{p + 1}$$$, let's decrease the length of the considered prefix $$$p$$$ by $$$1$$$ updating the $$$map$$$ (let's decrease the value corresponding to the key $$$d_{p}$$$ by $$$1$$$, then, if it's equal to $$$0$$$, we remove the key $$$d_{p}$$$ from the $$$map$$$).Consider, how and under what conditions we can change $$$d_{p + 1}$$$ and the following digits:  If $$$d_{p + 1} = 9$$$, it's impossible.  Suppose the considered prefix contains less than $$$k$$$ distinct digits (the number of the keys in the $$$map$$$ is less than $$$k$$$). In this case, we can replace the digit $$$d_{p + 1}$$$ with the value $$$d_{p + 1} + 1$$$ so the prefix with the length $$$p + 1$$$ will not contain more than $$$k$$$ distinct elements because the prefix with the length $$$p$$$ doesn't contain more than $$$k - 1$$$ distinct elements. If the prefix with the length $$$p + 1$$$ still contains less than $$$k$$$ distinct numbers, let's replace the remaining digits ($$$d_{p + 2}$$$, $$$d_{p + 3}$$$, etc) with $$$0$$$. Otherwise, we can replace them with the minimum digit that occurs in the prefix with the length $$$p + 1$$$ (it may be $$$0$$$).  Suppose the considered prefix contains exactly $$$k$$$ distinct digits. So let's find the minimum digit that occurs in the prefix with the length $$$p$$$ and is greater than $$$d_{p + 1}$$$. If such digit exists, let's replace $$$d_{p + 1}$$$ with it, and all following digits with the minimum digit that occurs in the prefix with the length $$$p + 1$$$. Otherwise, the element $$$d_{p + 1}$$$ cannot be increased.The converted by the procedure $$$n$$$ is the answer."
}{
    "name": "Cross Coloring",
    "code": [
        "1644",
        "D"
    ],
    "tags": [
        "data structures",
        "implementation",
        "math"
    ],
    "difficulty": 1700,
    "statement": "There is a sheet of paper that can be represented with a grid of size $$$n \\times m$$$: $$$n$$$ rows and $$$m$$$ columns of cells. All cells are colored in white initially.$$$q$$$ operations have been applied to the sheet. The $$$i$$$-th of them can be described as follows:   $$$x_i$$$ $$$y_i$$$\u00a0\u2014 choose one of $$$k$$$ non-white colors and color the entire row $$$x_i$$$ and the entire column $$$y_i$$$ in it. The new color is applied to each cell, regardless of whether the cell was colored before the operation. The sheet after applying all $$$q$$$ operations is called a coloring. Two colorings are different if there exists at least one cell that is colored in different colors.How many different colorings are there? Print the number modulo $$$998\\,244\\,353$$$.",
    "editorial": "Let's take a look at a final coloring. Each cell has some color. There exist cells such that there were no operation in their row and their column. They are left white, and they don't affect the answer.All other cells are colored in one of $$$k$$$ colors. For each cell $$$(x, y)$$$ there is a query that has been the last one to color this cell (it covered row $$$x$$$, column $$$y$$$ or both of them). So all cells that have the same query as the last one will have the same color. Since the color for each query is chosen independently, the number of colorings will be $$$k$$$ to the power of the number of queries that have at least one cell belong to them.How to determine if a query has at least one cell. This is true unless one of these things happen afterwards:   both its row and its column are recolored;  all rows are recolored;  all columns are recolored. So the solution is to process the queries backwards. Maintain the set of colored rows and colored columns. For each query, check the conditions. If none hold, multiply the answer by $$$k$$$.Overall complexity: $$$O(q \\log (n + m))$$$ or $$$O(q)$$$ per testcase."
}{
    "name": "There Are Two Types Of Burgers",
    "code": [
        "1207",
        "A"
    ],
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "math"
    ],
    "difficulty": 800,
    "statement": "There are two types of burgers in your restaurant \u2014 hamburgers and chicken burgers! To assemble a hamburger you need two buns and a beef patty. To assemble a chicken burger you need two buns and a chicken cutlet. You have $$$b$$$ buns, $$$p$$$ beef patties and $$$f$$$ chicken cutlets in your restaurant. You can sell one hamburger for $$$h$$$ dollars and one chicken burger for $$$c$$$ dollars. Calculate the maximum profit you can achieve.You have to answer $$$t$$$ independent queries.",
    "editorial": "In this task you just can iterate over the numbers of hamburgers and chicken burgers you want to assemble, check that you have enough ingredients and update the answer.If you want to sell $$$x$$$ hamburgers and $$$y$$$ chicken burgers then you need $$$x$$$ beef patties, $$$y$$$ chicken cutlets and $$$2(x+y)$$$ buns."
}{
    "name": "XOR and OR",
    "code": [
        "282",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "difficulty": 1500,
    "statement": "The Bitlandians are quite weird people. They do everything differently. They have a different alphabet so they have a different definition for a string.A Bitlandish string is a string made only of characters \"0\" and \"1\".BitHaval (the mayor of Bitland) loves to play with Bitlandish strings. He takes some Bitlandish string a, and applies several (possibly zero) operations to it. In one operation the mayor may take any two adjacent characters of a string, define one of them as x and the other one as y. Then he calculates two values p and q: p = x\u00a0xor\u00a0y, q = x\u00a0or\u00a0y. Then he replaces one of the two taken characters by p and the other one by q.The xor operation means the bitwise excluding OR operation. The or operation is the bitwise OR operation.So for example one operation can transform string 11 to string 10 or to string 01. String 1 cannot be transformed into any other string.You've got two Bitlandish strings a and b. Your task is to check if it is possible for BitHaval to transform string a to string b in several (possibly zero) described operations.",
    "editorial": ""
}{
    "name": "President and Roads",
    "code": [
        "567",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "graphs",
        "hashing",
        "shortest paths"
    ],
    "difficulty": 2200,
    "statement": "Berland has n cities, the capital is located in city s, and the historic home town of the President is in city t (s \u2260 t). The cities are connected by one-way roads, the travel time for each of the road is a positive integer.Once a year the President visited his historic home town t, for which his motorcade passes along some path from s to t (he always returns on a personal plane). Since the president is a very busy man, he always chooses the path from s to t, along which he will travel the fastest.The ministry of Roads and Railways wants to learn for each of the road: whether the President will definitely pass through it during his travels, and if not, whether it is possible to repair it so that it would definitely be included in the shortest path from the capital to the historic home town of the President. Obviously, the road can not be repaired so that the travel time on it was less than one. The ministry of Berland, like any other, is interested in maintaining the budget, so it wants to know the minimum cost of repairing the road. Also, it is very fond of accuracy, so it repairs the roads so that the travel time on them is always a positive integer.",
    "editorial": "At first, let's find edges that do not belong to any shortest paths from s to t. Let's find two shortest path arrays d1 and d2 with any shortest-path-finding algorithm. First array stores shortest path length from s, and the second \u2014 from t. Edge (u, v) then will be on at least one shortest path from s to t if and only if d1[u] + w(u, v) + d2[v] == d1[t].Let's build shortest path graph, leaving only edges described above. If we consider shortest path from s to t as segment [0..D] and any edge (u, v) in shortest path graph as its subsegment [d1[u]..d1[v]], then if such subsegment do not share any common point with any other edge subsegment, except its leftest and rightest point (d1[u] and d1[v]), this edge belongs to every shortest path from s to t.Now we could surely answer \u00abYES\u00bb to such edges. Next part of the solution are much simple. If edge (u, v) do not belong to every shortest path, we could try decrease its weight. This edge will belong to every shortest path if and only if its weight will become d1[t] - d1[u] - d2[v] - 1. So, if this value are strictly positive, we should answer \u00abCAN\u00bb considering new edge weight. Otherwise we need to output \u00abNO\u00bb."
}{
    "name": "Diamond Miner",
    "code": [
        "1495",
        "A"
    ],
    "tags": [
        "geometry",
        "greedy",
        "math",
        "sortings"
    ],
    "difficulty": 1200,
    "statement": "Diamond Miner is a game that is similar to Gold Miner, but there are $$$n$$$ miners instead of $$$1$$$ in this game.The mining area can be described as a plane. The $$$n$$$ miners can be regarded as $$$n$$$ points on the y-axis. There are $$$n$$$ diamond mines in the mining area. We can regard them as $$$n$$$ points on the x-axis. For some reason, no miners or diamond mines can be at the origin (point $$$(0, 0)$$$). Every miner should mine exactly one diamond mine. Every miner has a hook, which can be used to mine a diamond mine. If a miner at the point $$$(a,b)$$$ uses his hook to mine a diamond mine at the point $$$(c,d)$$$, he will spend $$$\\sqrt{(a-c)^2+(b-d)^2}$$$ energy to mine it (the distance between these points). The miners can't move or help each other.The object of this game is to minimize the sum of the energy that miners spend. Can you find this minimum?",
    "editorial": "First, you can turn a point $$$(x,y)$$$ to $$$(|x|,|y|)$$$, while not changing the answer.After this operation, all points can be described as $$$(0,a)$$$ or $$$(b,0)$$$ ($$$a,b > 0$$$).In a triangle, if the length of the edges are $$$a$$$, $$$b$$$, $$$c$$$, it is obvious that $$$a+b > c$$$.So, if you connect all match-pairs with a segment and there are two segments intersecting each other, you must be able to change the matching ways to make the answer smaller.For example, if you match $$$A(a_1,0)$$$ with $$$B(0,b_1)$$$, $$$C(a_2,0)$$$ with $$$D(0,b_2)$$$, the answer will be $$$|AB|+|CD|$$$; if you match $$$A$$$ with $$$D$$$ and $$$B$$$ with $$$C$$$, the answer will be $$$|AD|+|BC| < |AO|+|DO|+|BO|+|CO| = |AB|+|CD|$$$.So in the best solution, there won't be two segments intersecting each other.Sort all the points on the x-axis and on the y-axis, then match the points in ascending order of $$$x$$$ or $$$y$$$, you can get the minimum.The time complexity is $$$O(n \\log n)$$$ for each test case."
}{
    "name": "Nauuo and ODT",
    "code": [
        "1172",
        "E"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 3300,
    "statement": "Nauuo is a girl who loves traveling.One day she went to a tree, Old Driver Tree, literally, a tree with an old driver on it.The tree is a connected graph consisting of $$$n$$$ nodes and $$$n-1$$$ edges. Each node has a color, and Nauuo will visit the ODT through a simple path on the tree in the old driver's car.Nauuo wants to visit see more different colors in her journey, but she doesn't know which simple path she will be traveling on. So, she wants to calculate the sum of the numbers of different colors on all different paths. Can you help her?What's more, the ODT is being redecorated, so there will be $$$m$$$ modifications, each modification will change a single node's color. Nauuo wants to know the answer after each modification too.Note that in this problem, we consider the simple path from $$$u$$$ to $$$v$$$ and the simple path from $$$v$$$ to $$$u$$$ as two different simple paths if and only if $$$u\\ne v$$$.",
    "editorial": "For each color, we can try to maintain the number of simple paths that do not contain such color.If we can maintain such information, we can easily calculate the number of simple paths that contain a certain color, thus get the answer.For each color, we delete all nodes that belong to such color, thus splitting the tree into some clusters (here we define a \"cluster\" as a connected subgraph of the original tree).By maintaining $$$\\sum\\text{cluster size}^2$$$, we can get the number of simple paths that do not contain such color.For each color we try to maintain the same information, add them together, and get the answer.So now the problem is: a white tree1. reverse the color of a node ( white <-> black )2. output $$$\\sum\\text{cluster size}^2$$$This problem can be solved by many data structures like top tree, link/cut tree or heavy path decomposition.Let's use the link/cut tree for example.You can maintain the size of each subtree and the sum of $$$\\text{size}^2$$$ of each node's sons. Link/cut one node with its father (choose a node as the root and make the tree a rooted-tree first) when its color changes. In this way, the real clusters are the ones that are still connected after deleting the top node of a cluster in the link/cut tree. Update $$$\\sum\\text{cluster size}^2$$$ while linking/cutting.link:cut:"
}{
    "name": "Math",
    "code": [
        "1505",
        "F"
    ],
    "tags": [
        "*special",
        "math"
    ],
    "difficulty": 2200,
    "statement": "    *The two images are equivalent, feel free to use either one.",
    "editorial": ""
}{
    "name": "Nastya and Time Machine",
    "code": [
        "1340",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "difficulty": 2600,
    "statement": " Denis came to Nastya and discovered that she was not happy to see him... There is only one chance that she can become happy. Denis wants to buy all things that Nastya likes so she will certainly agree to talk to him. The map of the city where they live has a lot of squares, some of which are connected by roads. There is exactly one way between each pair of squares which does not visit any vertex twice. It turns out that the graph of the city is a tree.Denis is located at vertex $$$1$$$ at the time $$$0$$$. He wants to visit every vertex at least once and get back as soon as possible.Denis can walk one road in $$$1$$$ time. Unfortunately, the city is so large that it will take a very long time to visit all squares. Therefore, Denis took a desperate step. He pulled out his pocket time machine, which he constructed in his basement. With its help, Denis can change the time to any non-negative time, which is less than the current time.But the time machine has one feature. If the hero finds himself in the same place and at the same time twice, there will be an explosion of universal proportions and Nastya will stay unhappy. Therefore, Denis asks you to find him a route using a time machine that he will get around all squares and will return to the first and at the same time the maximum time in which he visited any square will be minimal.Formally, Denis's route can be represented as a sequence of pairs: $$$\\{v_1, t_1\\}, \\{v_2, t_2\\}, \\{v_3, t_3\\}, \\ldots, \\{v_k, t_k\\}$$$, where $$$v_i$$$ is number of square, and $$$t_i$$$ is time in which the boy is now.The following conditions must be met:  The route starts on square $$$1$$$ at time $$$0$$$, i.e. $$$v_1 = 1, t_1 = 0$$$ and ends on the square $$$1$$$, i.e. $$$v_k = 1$$$.  All transitions are divided into two types:   Being in the square change the time: $$$\\{ v_i, t_i \\} \\to \\{ v_{i+1}, t_{i+1} \\} : v_{i+1} = v_i, 0 \\leq t_{i+1} < t_i$$$.  Walk along one of the roads: $$$\\{ v_i, t_i \\} \\to \\{ v_{i+1}, t_{i+1} \\}$$$. Herewith, $$$v_i$$$ and $$$v_{i+1}$$$ are connected by road, and $$$t_{i+1} = t_i + 1$$$   All pairs $$$\\{ v_i, t_i \\}$$$ must be different.  All squares are among $$$v_1, v_2, \\ldots, v_k$$$. You need to find a route such that the maximum time in any square will be minimal, that is, the route for which $$$\\max{(t_1, t_2, \\ldots, t_k)}$$$ will be the minimum possible.",
    "editorial": "Lemma: The maximum time that Denis will visit will be at least $$$\\max\\limits_{v = 1}^{n} \\deg v = T$$$Proof: consider an arbitrary vertex $$$ v $$$. We will visit her $$$ \\deg v - 1$$$ times when we will bypass all her neighbors and another $$$ 1 $$$ when we return to her ancestor. But we can't go to vertex at 0 time. So, we need $$$\\deg v$$$ moments more than 0.We construct a graph traversal with a maximum time equal to $$$T$$$. Let us now stand at $$$ v $$$ at a time $$$ t $$$ and $$$ v $$$ has an un visited son $$$ u $$$. We want to go to $$$ u $$$, go around its entire subtree and return to $$$ v $$$ at time $$$ t + 1 $$$. That is, the route will be something like this: $$$ (v, t) \\to (u, t + 1) \\to \\ldots \\to (u, t) \\to (v, t + 1) $$$.Let $$$ k = \\deg u - 1 $$$, for $$$ w_i $$$ we denote the $$$ i $$$ th son of $$$ u $$$. If $$$ t + 1 \\leq T - k $$$, then there are no problems, we will move back in time at the very end of the route: $$$(v, t)$$$ $$$\\to$$$ $$$(u, t + 1)$$$ $$$\\to$$$ $$$(w_1, t + 2)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(u, t + 2)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(w_k, t + k + 1)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(u, t + k)$$$ $$$\\to$$$ $$$(u, t)$$$ $$$\\to$$$ $$$(v, t + 1)$$$.Otherwise, you have to go back in time in the middle of the route (exactly when we get to T) so that after the last visit we will be in $$$ (v, t + 1) $$$, that is: $$$(v, t)$$$ $$$\\to$$$ $$$(u, t + 1)$$$ $$$\\to$$$ $$$(w_1, t + 2)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(u, t + 2)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(u, T)$$$ $$$\\to$$$ $$$(u, t')$$$ $$$\\to$$$ $$$\\ldots$$$ $$$(w_k, t + k + 1)$$$ $$$\\to$$$ $$$\\ldots$$$ $$$\\to$$$ $$$(u, t + k)$$$ $$$\\to$$$ $$$(u, t)$$$ $$$\\to$$$ $$$(v, t + 1)$$$ , where $$$ t'$$$ can be easily calculated by the number of not visited sons."
}{
    "name": "Railway System",
    "code": [
        "1687",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy",
        "interactive",
        "sortings"
    ],
    "difficulty": 1700,
    "statement": "As for the technology in the outside world, it is really too advanced for Gensokyo to even look up to.\u2014Yasaka Kanako, Symposium of Post-mysticismThis is an interactive problem.Under the direct supervision of Kanako and the Moriya Shrine, the railway system of Gensokyo is finally finished. GSKR (Gensokyo Railways) consists of $$$n$$$ stations with $$$m$$$ bidirectional tracks connecting them. The $$$i$$$-th track has length $$$l_i$$$ ($$$1\\le l_i\\le 10^6$$$). Due to budget limits, the railway system may not be connected, though there may be more than one track between two stations.The value of a railway system is defined as the total length of its all tracks. The maximum (or minimum) capacity of a railway system is defined as the maximum (or minimum) value among all of the currently functional system's full spanning forest.In brief, full spanning forest of a graph is a spanning forest with the same connectivity as the given graph.Kanako has a simulator only able to process no more than $$$2m$$$ queries. The input of the simulator is a string $$$s$$$ of length $$$m$$$, consisting of characters 0 and/or 1. The simulator will assume the $$$i$$$-th track functional if $$$s_i=$$$ 1. The device will then tell Kanako the maximum capacity of the system in the simulated state.Kanako wants to know the the minimum capacity of the system with all tracks functional with the help of the simulator.The structure of the railway system is fixed in advance. In other words, the interactor is not adaptive.",
    "editorial": "We can get the lengths of each edge using $$$m$$$ queries by asking the maximum capacity of each edge separately.Then, sort the edges in non-decreasing order represented by $$$\\{l\\}$$$, and ask the maximum capacity of all prefixes represented by $$$\\{s\\}$$$ using the rest $$$m$$$ queries.Consider the process of Kruskal's algorithm. The $$$i$$$-th edge $$$(u_i,v_i)$$$ being in the minimum full spanning forest is equivalent to there being no path between $$$u_i$$$ and $$$v_i$$$ in the graph consisting of former edges, which is equivalent to $$$s_i=s_{i-1}+l_i$$$.Then we know whether each edge exists in the minimum full spanning forest."
}{
    "name": "Closest Pair ",
    "code": [
        "1635",
        "F"
    ],
    "tags": [
        "data structures",
        "greedy"
    ],
    "difficulty": 2800,
    "statement": "There are $$$n$$$ weighted points on the $$$OX$$$-axis. The coordinate and the weight of the $$$i$$$-th point is $$$x_i$$$ and $$$w_i$$$, respectively. All points have distinct coordinates and positive weights. Also, $$$x_i < x_{i + 1}$$$ holds for any $$$1 \\leq i < n$$$. The weighted distance between $$$i$$$-th point and $$$j$$$-th point is defined as $$$|x_i - x_j| \\cdot (w_i + w_j)$$$, where $$$|val|$$$ denotes the absolute value of $$$val$$$.You should answer $$$q$$$ queries, where the $$$i$$$-th query asks the following: Find the minimum weighted distance among all pairs of distinct points among the points in subarray $$$[l_i,r_i]$$$.",
    "editorial": "First of all, let's solve the problem for the whole array.Define $$$L_i$$$ as the biggest $$$j$$$ satisfying $$$j < i$$$ and $$$w_j \\leq w_i$$$, and $$$R_i$$$ as the smallest $$$j$$$ satisfying $$$j > i$$$ and $$$w_j \\leq w_i$$$. Then, we consider $$$2n$$$ pairs of points: $$$(L_i, i)$$$ and $$$(i, R_i)$$$ for each $$$1 \\leq i \\leq n$$$. In conclusion, the closest pair (the pair with the minimum weighted distance) must be among them.Proof: Assume that $$$(a, b)$$$ is the closest pair and $$$a < b$$$. If $$$w_a \\leq w_b$$$ holds, then $$$a = L_b$$$ must holds, otherwise $$$(a, L_b)$$$ would obviously be a better pair.Similarly, if $$$w_a > w_b$$$ holds, then $$$b = R_a$$$ must holds, otherwise $$$(R_a, b)$$$ would obviously be a better pair.The lemma above also applies to range queries by the exact same proof. So now, we first need to find $$$L_i$$$ and $$$R_i$$$ for each $$$1 \\leq i \\leq n$$$, this could be simply done with a stack. Then, imagine we draw lines between the endpoints of each pair, and the problem could be reduced to: given $$$2n$$$ weighted segments, for each query $$$i$$$ find the one with the minimum weight that is totally covered by $$$[l_i, r_i]$$$. This is actually a classic problem, which could be solved by sweep line trick + any data structure able to maintain prefix-minimum with single point updates, like BIT or segment tree.Total Complexity: $$$\\mathcal{O}((n+q)\\log n)$$$."
}{
    "name": "Up the hill",
    "code": [
        "491",
        "A"
    ],
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "Hiking club \"Up the hill\" just returned from a walk. Now they are trying to remember which hills they've just walked through.It is known that there were N stops, all on different integer heights between 1 and N kilometers (inclusive) above the sea level. On the first day they've traveled from the first stop to the second stop, on the second day they've traveled from the second to the third and so on, and on the last day they've traveled from the stop N - 1 to the stop N and successfully finished their expedition.They are trying to find out which heights were their stops located at. They have an entry in a travel journal specifying how many days did they travel up the hill, and how many days did they walk down the hill.Help them by suggesting some possible stop heights satisfying numbers from the travel journal.",
    "editorial": ""
}{
    "name": "Frog Fights",
    "code": [
        "625",
        "E"
    ],
    "tags": [
        "data structures",
        "greedy"
    ],
    "difficulty": 2800,
    "statement": "Ostap Bender recently visited frog farm and was inspired to create his own frog game.Number of frogs are places on a cyclic gameboard, divided into m cells. Cells are numbered from 1 to m, but the board is cyclic, so cell number 1 goes right after the cell number m in the direction of movement. i-th frog during its turn can jump for ai cells.Frogs move in turns, game starts with a move by frog 1. On its turn i-th frog moves ai cells forward, knocking out all the frogs on its way. If there is a frog in the last cell of the path of the i-th frog, that frog is also knocked out. After this the value ai is decreased by the number of frogs that were knocked out during this turn. If ai is zero or goes negative, then i-th frog doesn't make moves anymore.After frog number 1 finishes its turn, frog number 2 starts to move, then frog number 3 and so on. After the frog number n makes its move, frog 1 starts to move again, then frog 2 and so on this process goes forever. If some frog was already knocked out from the board, we consider that it skips all its moves.Help Ostap to identify, what frogs will stay on the board at the end of a game?",
    "editorial": ""
}{
    "name": "Vasya's Function",
    "code": [
        "837",
        "E"
    ],
    "tags": [
        "binary search",
        "implementation",
        "math"
    ],
    "difficulty": 2100,
    "statement": "Vasya is studying number theory. He has denoted a function f(a, b) such that:  f(a, 0) = 0;  f(a, b) = 1 + f(a, b - gcd(a, b)), where gcd(a, b) is the greatest common divisor of a and b. Vasya has two numbers x and y, and he wants to calculate f(x, y). He tried to do it by himself, but found out that calculating this function the way he wants to do that might take very long time. So he decided to ask you to implement a program that will calculate this function swiftly.",
    "editorial": "One important fact is that when we subtract gcd(x, y) from y, new gcd(x, y) will be divisible by old gcd(x, y). And, of course, x is always divisible by gcd(x, y).Let's factorize x. Consider the moment when gcd(x, y) changes. If we denote old value of gcd(x, y) by g, the new value of gcd(x, y) will be divisible by some k\u00b7g, where k is a prime divisor of x. Let's check all prime divisors of x and for each of these divisors find the number of times we need to subtract g from y to get gcd(x, y) divisible by k\u00b7g; that is just  (don't forget that x also has to be divisible by k\u00b7g). Among all prime divisors of x pick one with the minimum required number of operations (let this number of operations be m), add m to answer, subtract m\u00b7g from y and repeat the process."
}{
    "name": "Timofey and cubes",
    "code": [
        "764",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "difficulty": 900,
    "statement": "Young Timofey has a birthday today! He got kit of n cubes as a birthday present from his parents. Every cube has a number ai, which is written on it. Timofey put all the cubes in a row and went to unpack other presents.In this time, Timofey's elder brother, Dima reordered the cubes using the following rule. Suppose the cubes are numbered from 1 to n in their order. Dima performs several steps, on step i he reverses the segment of cubes from i-th to (n - i + 1)-th. He does this while i \u2264 n - i + 1.After performing the operations Dima went away, being very proud of himself. When Timofey returned to his cubes, he understood that their order was changed. Help Timofey as fast as you can and save the holiday\u00a0\u2014 restore the initial order of the cubes using information of their current location.",
    "editorial": "Note that Dima's operations are reversible. If we apply them to the current order, we will get the initial. Also note that all the elements on even positions will remain on their places. Such numbers are affected an even number of times, so nothing will change. Similarly all elements on odd positions will change places with simmetrial ones relatively the centre. So, we change elements on odd places with their pairs. This works for O(n) time.Author's solution: http://pastebin.com/X8R0i9vM"
}{
    "name": "Fault-tolerant Network",
    "code": [
        "1651",
        "C"
    ],
    "tags": [
        "brute force",
        "data structures",
        "implementation"
    ],
    "difficulty": 1500,
    "statement": "There is a classroom with two rows of computers. There are $$$n$$$ computers in each row and each computer has its own grade. Computers in the first row has grades $$$a_1, a_2, \\dots, a_n$$$ and in the second row\u00a0\u2014 $$$b_1, b_2, \\dots, b_n$$$.Initially, all pairs of neighboring computers in each row are connected by wire (pairs $$$(i, i + 1)$$$ for all $$$1 \\le i < n$$$), so two rows form two independent computer networks.Your task is to combine them in one common network by connecting one or more pairs of computers from different rows. Connecting the $$$i$$$-th computer from the first row and the $$$j$$$-th computer from the second row costs $$$|a_i - b_j|$$$.You can connect one computer to several other computers, but you need to provide at least a basic fault tolerance: you need to connect computers in such a way that the network stays connected, despite one of its computer failing. In other words, if one computer is broken (no matter which one), the network won't split in two or more parts.That is the minimum total cost to make a fault-tolerant network?",
    "editorial": "There is a criterion when the given network becomes fault-tolerant: the network becomes fault-tolerant if and only if each of corner computers (let's name them $$$A_1$$$, $$$A_n$$$, $$$B_1$$$ and $$$B_n$$$) is connected to the other row.From the one side: if, WLOG, $$$A_1$$$ is not connected to other row then if $$$A_2$$$ is broken\u00a0\u2014 $$$A_1$$$ loses connection to the other network (since $$$A_1$$$ is connected only with $$$A_2$$$).From the other side: suppose, WLOG, $$$A_i$$$ is broken, then the row $$$A$$$ is falling in at most two parts: $$$A_1 - \\dots - A_{i - 1}$$$ and $$$A_{i + 1} - \\dots - A_n$$$. But since both $$$A_1$$$ and $$$A_n$$$ are connected to row $$$B$$$ and $$$B$$$ is still connected, then the resulting network is still connected.Now the question is: how to connect all corner computers? Because sometimes it's optimal not to connect corners directly. One of the approaches is described below.Let's look at $$$A_1$$$. Essentially, there are three ways to connect it to row $$$B$$$: to $$$B_1$$$, $$$B_n$$$ or $$$\\mathrm{best}_B(A_1)$$$ (where $$$\\mathrm{best}_B(A_1)$$$ is $$$B_j$$$ with minimum possible $$$|a_i - b_j|$$$). The same applies to $$$A_n$$$.So, let's just iterate over all these $$$3 \\times 3$$$ variants. For each of these variants,   if we didn't cover $$$B_1$$$ then we should also add one more connection between $$$B_1$$$ and $$$\\mathrm{best}_A(B_1)$$$;  if we didn't cover $$$B_n$$$ then we should also add one more connection between $$$B_n$$$ and $$$\\mathrm{best}_A(B_n)$$$; As a result, we choose the best variant."
}{
    "name": "Nastya and a Wardrobe",
    "code": [
        "992",
        "C"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1600,
    "statement": "Nastya received a gift on New Year\u00a0\u2014 a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).Unfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. Nastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.Nastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 109 + 7, because it is easy to see that it is always integer.",
    "editorial": "Let's present we have initially  dresses.What does occur in the first month? Initially the number of dresses is multiplied by 2, that is becomes . Then with probability  the wardrobe eats a dress, that is expected value of the number of dresses becomes . The same way after the second month expected value becomes . It's easy to notice that after -th month(if ) expected value equals . Eventually it will be only doubled(as the wardrobe doesn't eat a dress in the last month), that is will be equal .Thus, answer of the problem is . Expressing it with , we get: = . = .Thus, we need to calculate degree of 2 right up to . Complexity of the soltion is .Let's notice that the case  we need to calculate separately, because wardrobe can't eat a dress when it doesn't exist. If  it's easy to proof that the number of dresses is never negative, that is the formula works."
}{
    "name": "Selling Souvenirs",
    "code": [
        "808",
        "E"
    ],
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "ternary search"
    ],
    "difficulty": 2300,
    "statement": "After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.Help Petya to determine maximum possible total cost.",
    "editorial": "There are lots of different solutions for this problem.We can iterate on the number of 3-elements we will take (in this editorial k-element is a souvenir with weight k). When fixing the number of 3-elements (let it be x), we want to know the best possible answer for the weight m - 3x, while taking into account only 1-elements and 2-elements.To answer these queries, we can precalculate the values dp[w] \u2014 triples (cost, cnt1, cnt2), where cost is the best possible answer for the weight w, and cnt1 and cnt2 is the number of 1-elements and 2-elements we are taking to get this answer. Of course, dp[0] = (0, 0, 0), and we can update dp[i + 1] and dp[i + 2] using value of dp[i]. After precalculating dp[w] for each possible w we can iterate on the number of 3-elements.There are also several binary/ternary search solutions."
}{
    "name": "Choosing Ads",
    "code": [
        "643",
        "G"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 3200,
    "statement": "One social network developer recently suggested a new algorithm of choosing ads for users.There are n slots which advertisers can buy. It is possible to buy a segment of consecutive slots at once. The more slots you own, the bigger are the chances your ad will be shown to users.Every time it is needed to choose ads to show, some segment of slots is picked by a secret algorithm. Then some advertisers are chosen. The only restriction is that it should be guaranteed for advertisers which own at least p% of slots composing this segment that their ad will be shown.From the other side, users don't like ads. So it was decided to show no more than  ads at once. You are asked to develop a system to sell segments of slots and choose ads in accordance with the rules described above.",
    "editorial": ""
}{
    "name": "Minimum  Varied Number",
    "code": [
        "1714",
        "C"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 800,
    "statement": "Find the minimum number with the given sum of digits $$$s$$$ such that all digits in it are distinct (i.e. all digits are unique).For example, if $$$s=20$$$, then the answer is $$$389$$$. This is the minimum number in which all digits are different and the sum of the digits is $$$20$$$ ($$$3+8+9=20$$$).For the given $$$s$$$ print the required number.",
    "editorial": "Let's use the greedy solution: we will go through the digits in decreasing order. If the sum of $$$s$$$ we need to dial is greater than the current digit, we add the current digit to the end of the line with the answer. Note that in this way we will always get an answer consisting of the minimum possible number of digits, because we are going through the digits in descending order. Suppose that the resulting number is not optimal. Then some digit can be reduced, and some digit that comes after it can be increased, in order to save the sum (we can not increase the digit before it, as then we get a number greater than the current one). Two variants are possible.   We want to increase the digit $$$x$$$ to $$$x+1$$$, but then it becomes equal to the digit following it, or exceeds the value $$$9$$$. Then we can't increment that digit.  Otherwise, in the first step, we can get $$$x+1$$$ instead of $$$x$$$, but since we are going through the digits in decreasing order, we cannot get the value of $$$x$$$ in that case. Contradiction. "
}{
    "name": "Towers",
    "code": [
        "229",
        "D"
    ],
    "tags": [
        "dp",
        "greedy",
        "two pointers"
    ],
    "difficulty": 2100,
    "statement": "The city of D consists of n towers, built consecutively on a straight line. The height of the tower that goes i-th (from left to right) in the sequence equals hi. The city mayor decided to rebuild the city to make it beautiful. In a beautiful city all towers are are arranged in non-descending order of their height from left to right.The rebuilding consists of performing several (perhaps zero) operations. An operation constitutes using a crane to take any tower and put it altogether on the top of some other neighboring tower. In other words, we can take the tower that stands i-th and put it on the top of either the (i - 1)-th tower (if it exists), or the (i + 1)-th tower (of it exists). The height of the resulting tower equals the sum of heights of the two towers that were put together. After that the two towers can't be split by any means, but more similar operations can be performed on the resulting tower. Note that after each operation the total number of towers on the straight line decreases by 1.Help the mayor determine the minimum number of operations required to make the city beautiful.",
    "editorial": ""
}{
    "name": "Big Segment",
    "code": [
        "242",
        "B"
    ],
    "tags": [
        "implementation",
        "sortings"
    ],
    "difficulty": 1100,
    "statement": "A coordinate line has n segments, the i-th segment starts at the position li and ends at the position ri. We will denote such a segment as [li, ri].You have suggested that one of the defined segments covers all others. In other words, there is such segment in the given set, which contains all other ones. Now you want to test your assumption. Find in the given set the segment which covers all other segments, and print its number. If such a segment doesn't exist, print -1.Formally we will assume that segment [a, b] covers segment [c, d], if they meet this condition a \u2264 c \u2264 d \u2264 b. ",
    "editorial": ""
}{
    "name": "Mister B and Astronomers",
    "code": [
        "819",
        "D"
    ],
    "tags": [
        "number theory"
    ],
    "difficulty": 2900,
    "statement": "After studying the beacons Mister B decided to visit alien's planet, because he learned that they live in a system of flickering star Moon. Moreover, Mister B learned that the star shines once in exactly T seconds. The problem is that the star is yet to be discovered by scientists.There are n astronomers numerated from 1 to n trying to detect the star. They try to detect the star by sending requests to record the sky for 1 second. The astronomers send requests in cycle: the i-th astronomer sends a request exactly ai second after the (i - 1)-th (i.e. if the previous request was sent at moment t, then the next request is sent at moment t + ai); the 1-st astronomer sends requests a1 seconds later than the n-th. The first astronomer sends his first request at moment 0.Mister B doesn't know the first moment the star is going to shine, but it's obvious that all moments at which the star will shine are determined by the time of its shine moment in the interval [0, T). Moreover, this interval can be split into T parts of 1 second length each of form [t, t + 1), where t = 0, 1, 2, ..., (T - 1).Mister B wants to know how lucky each astronomer can be in discovering the star first.For each astronomer compute how many segments of form [t, t + 1) (t = 0, 1, 2, ..., (T - 1)) there are in the interval [0, T) so that this astronomer is the first to discover the star if the first shine of the star happens in this time interval.",
    "editorial": "Let's construct slow but clear solution and then, speed it up.Let's denote . We can see, that, at first, all operation with time are modulo T and the i - th astronomer checks moments sti, (sti + s)%T, (sti + 2s)%T ..., where . More over, every astronomer, who checks moment t will check moment (t + S)%T by next time.So we now constructed functional graph with T vertices. But this graph has very special type, since it can be divided on some cycles. More specifically, This graph consists of gcd(T, s) oriented cycles and each cycle has length exactly . Even more, vertices u and v belong to same cycle iff u \u2261 v (mod gcd(T, s)).So we can work with cycles independently.Let's look closely on one cycle. It's obviously, that all astronomers will walk on their cycles from their starting positions sti % T. But what the answer for them.Answer for the i - th astronomer is number of vertices, including starting vertex, to the nearest starting vertex of any other astronomer if count along the orientation of cycle, because if two astronomers came to same vertex, lucky is one, who came first. Other astronomer has this vertex as start, his time is stj, i - th time is sti + k\u00b7s, k \u2265 1 and sti + k\u00b7s > stj. If sti \u2261  stj (mod T) and sti < stj then answer for the j - th astronomer is always 0.So we must effectively calculate distance between two positions on cycle.For that, let's numerate vertices along the orientation of cycle using vertex with minimal label as 0. If we will know position of sti% T for every astronomer calculation of distance between consecutive is trivial (sort, or set or other).For the i - th astronomer let's denote vertex with label 0 in his cycle as zi. zi = sti % gcd(T, s). But cycles very specific, because vertex with label 0 is zi, vertex with label 1 is (zi + s) % T, vertex with label 2 is (zi + 2s) % T. In other words, vertex with label k is (zi + k\u00b7s) % T.If we want to know position k of sti, we need to find v such, that v \u2261  (v% gcd(T, s)) + k\u00b7s(mod T) which is diofant equation and can be calculated in O(log(T)) time.Result complexity is O(n\u00b7log(T))."
}{
    "name": "A Compatible Pair",
    "code": [
        "934",
        "A"
    ],
    "tags": [
        "brute force",
        "games"
    ],
    "difficulty": 1400,
    "statement": "Nian is a monster which lives deep in the oceans. Once a year, it shows up on the land, devouring livestock and even people. In order to keep the monster away, people fill their villages with red colour, light, and cracking noise, all of which frighten the monster out of coming.Little Tommy has n lanterns and Big Banban has m lanterns. Tommy's lanterns have brightness a1, a2, ..., an, and Banban's have brightness b1, b2, ..., bm respectively.Tommy intends to hide one of his lanterns, then Banban picks one of Tommy's non-hidden lanterns and one of his own lanterns to form a pair. The pair's brightness will be the product of the brightness of two lanterns.Tommy wants to make the product as small as possible, while Banban tries to make it as large as possible.You are asked to find the brightness of the chosen pair if both of them choose optimally.",
    "editorial": "We can do as what we are supposed to do\u00a0\u2014 hide one of the Tommy's lantern, and then take one non-hidden lantern from Tommy and one lantern from Banban so that the product of their brightness is maximized and the minimum between all cases becomes our answer. This is a straightforward O(n2m) solution. Also, there are many other ways to solve the problem but needs overall consideration.By the way, there were 10 pretests at first where most of contestants failed on the last one. However, considering not to make the judger running with heavy loads, I took away 3 pretests and the pretest 10 was taken by mistake. I must apologize for the extremely weak pretests that make tons of hacks now. But it looks not so bad from the result..."
}{
    "name": "Rotary Laser Lock",
    "code": [
        "1428",
        "H"
    ],
    "tags": [
        "binary search",
        "interactive"
    ],
    "difficulty": 3500,
    "statement": "This is an interactive problem.To prevent the mischievous rabbits from freely roaming around the zoo, Zookeeper has set up a special lock for the rabbit enclosure. This lock is called the Rotary Laser Lock.  The lock consists of $$$n$$$ concentric rings numbered from $$$0$$$ to $$$n-1$$$. The innermost ring is ring $$$0$$$ and the outermost ring is ring $$$n-1$$$. All rings are split equally into $$$nm$$$ sections each. Each of those rings contains a single metal arc that covers exactly $$$m$$$ contiguous sections. At the center of the ring is a core and surrounding the entire lock are $$$nm$$$ receivers aligned to the $$$nm$$$ sections. The core has $$$nm$$$ lasers that shine outward from the center, one for each section. The lasers can be blocked by any of the arcs. A display on the outside of the lock shows how many lasers hit the outer receivers.   In the example above, there are $$$n=3$$$ rings, each covering $$$m=4$$$ sections. The arcs are colored in green (ring $$$0$$$), purple (ring $$$1$$$), and blue (ring $$$2$$$) while the lasers beams are shown in red. There are $$$nm=12$$$ sections and $$$3$$$ of the lasers are not blocked by any arc, thus the display will show $$$3$$$ in this case. Wabbit is trying to open the lock to free the rabbits, but the lock is completely opaque, and he cannot see where any of the arcs are. Given the relative positions of the arcs, Wabbit can open the lock on his own.  To be precise, Wabbit needs $$$n-1$$$ integers $$$p_1,p_2,\\ldots,p_{n-1}$$$ satisfying $$$0 \\leq p_i < nm$$$ such that for each $$$i$$$ $$$(1 \\leq i < n)$$$, Wabbit can rotate ring $$$0$$$ clockwise exactly $$$p_i$$$ times such that the sections that ring $$$0$$$ covers perfectly aligns with the sections that ring $$$i$$$ covers. In the example above, the relative positions are $$$p_1 = 1$$$ and $$$p_2 = 7$$$. To operate the lock, he can pick any of the $$$n$$$ rings and rotate them by $$$1$$$ section either clockwise or anti-clockwise. You will see the number on the display after every rotation.Because his paws are small, Wabbit has asked you to help him to find the relative positions of the arcs after all of your rotations are completed. You may perform up to $$$15000$$$ rotations before Wabbit gets impatient.",
    "editorial": "Algorithm AnalysisFlatten the circle such that it becomes $$$n$$$ rows of length $$$nm$$$ with vertical sections numbered from $$$0$$$ to $$$nm-1$$$ that loops on the end. We say that the position of an arc is $$$x$$$ if the left endpoint of the arc is at section $$$x$$$. Indices are taken modulo $$$nm$$$ at all times. Moving arcs right is equivalent to rotating them clockwise, and moving arcs left is equivalent to rotating them counter-clockwise. Notice that if we shift arc 0 right and the display increases, then the leftmost section of arc 0 had no other arcs in the same section. Thus, if we shift arc 0 right again and the display does not increase, we are certain that there was another arc at that position, so we shift arc 0 left. We now enter the detection stage to find any arc that coincides with arc 0 (of which there exists at least 1) at this position. Let's note down this positions as $$$x$$$. Let $$$S$$$ be the set of arcs that we do not know the positions of yet (this set initially contains all arcs from 1 to $$$N-1$$$) and $$$T$$$ and $$$F$$$ be an empty sets. $$$T$$$ will be the set of all candidate arcs (those that may coincide here) and $$$F$$$ will contain all arcs that we have shifted leftwards. Take all elements in $$$S$$$ and put them in $$$T$$$, and pick half of the elements in $$$S$$$ and add them to the set $$$F$$$. We now shift all elements in $$$F$$$ left.  We move arc 0 left to check if any arc is at position $$$x-1$$$. If there is, then we know that an arc that initially coincided at $$$x$$$ lies in $$$F$$$. In this case, we set $$$T$$$ to $$$T \\cap F$$$ (elements of $$$T$$$ that are in $$$F$$$), pick half of the elements in $$$T$$$ to move right and remove those from $$$F$$$. If no arc is at position $$$x-1$$$, then the arc we are looking for lies in $$$T \\ \\backslash \\ F$$$ (elements in $$$T$$$ that are not in $$$F$$$). We set $$$T$$$ to be $$$T \\ \\backslash \\ F$$$ and pick half of $$$T$$$ to move left and add those to $$$F$$$. We then shift arc 0 right and recurse. When we have narrowed $$$T$$$ to exactly 1 arc, we know where exactly that arc is now. We shift that arc left such that its right endpoint is at $$$x-2$$$ so that it does not cover position $$$x-1$$$, which we may still need for future tests. Now we remove the arc found from $$$S$$$ and leave the detection stage and continue searching for the other arcs. Once we have found all $$$n-1$$$ other arcs, we find the relative position to arc 0 and print them as the final output. Query AnalysisWhenever we shift arc 0 right and are not in the detection stage, we use 1 shift. This occurs at most $$$2nm-m$$$ times because it takes up to $$$nm-m$$$ shifts right to find the first position where arc 0 coincides, and another $$$nm$$$ to traverse the entire circle again to find all of the arcs. Whenever we enter the detection stage, we find one arc and use $$$2$$$ shifts initially when we move arc 0 right then left, yielding a total of $$$2n-2$$$ such shifts. Each binary search requires $$$2 \\log |T|$$$ shifts of arc 0 (left and right), so across the $$$n-1$$$ detection stages this is at most $$$2n\\log n$$$ when summed across all stages.  The way we perform the binary search is quite important here. Performing it in a naive manner (e.g. shifting half left, test and shifting them back) can use up to $$$n^2$$$ queries. Instead, we set the number of elements that move in / out of $$$F$$$ at each iteration of the binary search to be the smaller half. This way we can guarantee that the number of shifts done by the candidate arcs is at most the total number of candidate arcs in the first place. This becomes $$$\\frac{n(n-1)}{2}$$$ since we start with $$$n-1$$$ candidate arcs and reduce that number by 1 after each detection stage. When we shift each of the arcs left by $$$m$$$ or $$$m+1$$$ (depending on whether they were in $$$F$$$ when we narrowed it down to 1 arc), we use at most $$$(n-1)(m+1) = nm+n-m-1$$$ shifts. Thus in total, we use at most $$$2nm-m+2n-2+2n\\log n + \\frac{n(n-1)}{2} + nm+n-m-1$$$ shifts. For $$$n=100,m=20$$$, this is less than $$$13000$$$, which is much lower than the query limit of $$$15000$$$. Other CommentsThe limit was set higher than the provable bound to allow for other possible solutions. At least $$$1$$$ tester found a different solution that used around $$$13500$$$ queries. Some other optimizations that empirically improve the number of queries:   Instead of using arc $$$0$$$ as the detector, we can randomly pick one of the $$$n$$$ arcs as the detector arcs.  At the very beginning, we perform some constant number of random shifts of the arcs (e.g. $$$300$$$ to $$$400$$$ random shifts). This helps to break up long groups of arcs that overlap, which speeds up the initial $$$nm$$$ search. The official solution, augmented with these optimizations uses well below $$$11500$$$ queries and is very consistent for non-handcrafted test cases."
}{
    "name": "Professor GukiZ's Robot",
    "code": [
        "620",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 800,
    "statement": "Professor GukiZ makes a new robot. The robot are in the point with coordinates (x1, y1) and should go to the point (x2, y2). In a single step the robot can change any of its coordinates (maybe both of them) by one (decrease or increase). So the robot can move in one of the 8 directions. Find the minimal number of steps the robot should make to get the finish position.",
    "editorial": ""
}{
    "name": "Sum of Two Numbers",
    "code": [
        "1788",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math",
        "probabilities"
    ],
    "difficulty": 1100,
    "statement": "The sum of digits of a non-negative integer $$$a$$$ is the result of summing up its digits together when written in the decimal system. For example, the sum of digits of $$$123$$$ is $$$6$$$ and the sum of digits of $$$10$$$ is $$$1$$$. In a formal way, the sum of digits of $$$\\displaystyle a=\\sum_{i=0}^{\\infty} a_i \\cdot 10^i$$$, where $$$0 \\leq a_i \\leq 9$$$, is defined as $$$\\displaystyle\\sum_{i=0}^{\\infty}{a_i}$$$.Given an integer $$$n$$$, find two non-negative integers $$$x$$$ and $$$y$$$ which satisfy the following conditions.  $$$x+y=n$$$, and  the sum of digits of $$$x$$$ and the sum of digits of $$$y$$$ differ by at most $$$1$$$. It can be shown that such $$$x$$$ and $$$y$$$ always exist.",
    "editorial": "Let's assume that there is no carry while adding $$$x$$$ and $$$y$$$. Denote $$$n=a_9 \\cdots a_1a_0$$$, $$$x=b_9 \\cdots b_1b_0$$$, $$$y=c_9 \\cdots c_1c_0$$$ in decimal system. The condition can be changed as the following condition.- $$$a_i=b_i+c_i$$$ for all $$$0 \\leq i \\leq 9$$$. - Sum of $$$b_i$$$ and sum of $$$c_i$$$ should differ by at most $$$1$$$.If $$$a_i$$$ is even, let $$$b_i=c_i=a_i/2$$$. Otherwise, let $$$b_i$$$ and $$$c_i$$$ be $$$\\frac{a_i+1}{2}$$$ or $$$\\frac{a_i-1}{2}$$$. By alternating between $$$(b_i, c_i)=(\\frac{a_i+1}{2}, \\frac{a_i-1}{2})$$$ and $$$(b_i, c_i)=(\\frac{a_i-1}{2}, \\frac{a_i+1}{2})$$$, we can satisfy the condition where sum of $$$b_i$$$ and sum of $$$c_i$$$ differ by at most $$$1$$$.There is an alternative solution. If $$$n$$$ is even, divide it into ($$$\\frac{n}{2}, \\frac{n}{2}$$$). If remainder of $$$n$$$ divided by $$$10$$$ is not $$$9$$$, divide it into ($$$\\frac{n+1}{2}, \\frac{n-1}{2}$$$). If remainder of $$$n$$$ divided by $$$10$$$ is $$$9$$$, recursively find an answer for $$$\\lfloor \\frac{n}{10} \\rfloor$$$ which is ($$$x', y'$$$) and the answer will be ($$$10x'+4, 10y'+5$$$) or ($$$10x'+5, 10y'+4$$$) depending on what number has a bigger sum of digits.The following solution has a countertest.1. Trying to find $$$x$$$ and $$$y$$$ by bruteforce from ($$$1, n-1$$$). 2. Trying to find $$$x$$$ and $$$y$$$ by bruteforce from ($$$\\frac{n+1}{2}, \\frac{n-1}{2}$$$)A solution that randomly finds ($$$x, y$$$) passes."
}{
    "name": "Number Game",
    "code": [
        "1749",
        "C"
    ],
    "tags": [
        "binary search",
        "data structures",
        "games",
        "greedy",
        "implementation"
    ],
    "difficulty": 1400,
    "statement": "Alice and Bob are playing a game. They have an array of positive integers $$$a$$$ of size $$$n$$$.Before starting the game, Alice chooses an integer $$$k \\ge 0$$$. The game lasts for $$$k$$$ stages, the stages are numbered from $$$1$$$ to $$$k$$$. During the $$$i$$$-th stage, Alice must remove an element from the array that is less than or equal to $$$k - i + 1$$$. After that, if the array is not empty, Bob must add $$$k - i + 1$$$ to an arbitrary element of the array. Note that both Alice's move and Bob's move are two parts of the same stage of the game. If Alice can't delete an element during some stage, she loses. If the $$$k$$$-th stage ends and Alice hasn't lost yet, she wins.Your task is to determine the maximum value of $$$k$$$ such that Alice can win if both players play optimally. Bob plays against Alice, so he tries to make her lose the game, if it's possible.",
    "editorial": "Note that if Bob has increased some element, then Alice can't remove it on the next stages. Obviously, it is more profitable for Bob to \"prohibit\" the smallest element of the array. Using this fact, we can iterate over the value of $$$k$$$, and then simulate the game process. To simulate the game, we can maintain the set of elements that Alice can remove. On the $$$i$$$-th stage, Alice removes the maximum element $$$x$$$, such that $$$x \\le k - i + 1$$$, if there are no such elements, then Alice lost. Bob always removes the minimum element of the set.Thus, the complexity of the solution is $$$O(n^2\\log{n})$$$ for each test case.There is another possible solution: we can notice that, if Alice wins, Bob will \"prohibit\" the elements on positions $$$1, 2, \\dots, k-1$$$ of the sorted array. So, Alice has to delete the next $$$k$$$ elements. So, if the segment $$$[k \\dots 2k-1]$$$ of the sorted array can be deleted by Alice during the game phases, she wins with this value of $$$k$$$."
}{
    "name": "Hexagonal numbers",
    "code": [
        "130",
        "A"
    ],
    "tags": [
        "*special",
        "implementation"
    ],
    "difficulty": 900,
    "statement": "Hexagonal numbers are figurate numbers which can be calculated using the formula hn = 2n2 - n. You are given n; calculate n-th hexagonal number.",
    "editorial": ""
}{
    "name": "GCD Partition",
    "code": [
        "1780",
        "B"
    ],
    "tags": [
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "difficulty": 1100,
    "statement": "While at Kira's house, Josuke saw a piece of paper on the table with a task written on it.The task sounded as follows. There is an array $$$a$$$ of length $$$n$$$. On this array, do the following:  select an integer $$$k > 1$$$;  split the array into $$$k$$$ subsegments $$$^\\dagger$$$;  calculate the sum in each of $$$k$$$ subsegments and write these sums to another array $$$b$$$ (where the sum of the subsegment $$$(l, r)$$$ is $$${\\sum_{j = l}^{r}a_j}$$$);  the final score of such a split will be $$$\\gcd(b_1, b_2, \\ldots, b_k)^\\ddagger$$$. The task is to find such a partition that the score is maximum possible. Josuke is interested in this task but is not strong in computer science. Help him to find the maximum possible score.$$$^\\dagger$$$ A division of an array into $$$k$$$ subsegments is $$$k$$$ pairs of numbers $$$(l_1, r_1), (l_2, r_2), \\ldots, (l_k, r_k)$$$ such that $$$l_i \\le r_i$$$ and for every $$$1 \\le j \\le k - 1$$$ $$$l_{j + 1} = r_j + 1$$$, also $$$l_1 = 1$$$ and $$$r_k = n$$$. These pairs represent the subsegments.$$$^\\ddagger$$$ $$$\\gcd(b_1, b_2, \\ldots, b_k)$$$ stands for the greatest common divisor (GCD) of the array $$$b$$$.",
    "editorial": "Let's note that it doesn't make sense for us to divide into more than $$$k = 2$$$ subsegments. Let's prove it.Let us somehow split the array $$$a$$$ into $$$m > 2$$$ subsegments : $$$b_1, b_2, \\ldots, b_m$$$. Note that $$$\\gcd(b_1, b_2, \\ldots, b_m) \\le \\gcd(b_1 + b_2, b_3, \\ldots, b_m)$$$, since if $$$b_1$$$ and $$$b_2$$$ were multiples of $$$\\gcd(b_1, b_2 , \\ldots, b_m)$$$, so $$$b_1 + b_2$$$ is also a multiple of $$$\\gcd(b_1, b_2, \\ldots, b_m)$$$. This means that we can use $$$b_1 + b_2$$$ instead of $$$b_1$$$ and $$$b_2$$$, and the answer will not worsen, thus it is always beneficial to use no more than $$$k = 2$$$ subsegments.How to find the answer? Let $$$s$$$ be the array $$$a$$$. Let's say $$$pref_i = {\\sum_{j = 1}^{i} a_j}$$$, then the answer is $$$\\max\\limits_{1 \\le i < n}(\\gcd(pref_i, s - pref_i)$$$."
}{
    "name": "Petya and File System",
    "code": [
        "66",
        "C"
    ],
    "tags": [
        "data structures",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "Recently, on a programming lesson little Petya showed how quickly he can create files and folders on the computer. But he got soon fed up with this activity, and he decided to do a much more useful thing. He decided to calculate what folder contains most subfolders (including nested folders, nested folders of nested folders, and so on) and what folder contains most files (including the files in the subfolders).More formally, the subfolders of the folder are all its directly nested folders and the subfolders of these nested folders. The given folder is not considered the subfolder of itself. A file is regarded as lying in a folder, if and only if it either lies directly in this folder, or lies in some subfolder of the folder.For a better understanding of how to count subfolders and files for calculating the answer, see notes and answers to the samples.You are given a few files that Petya has managed to create. The path to each file looks as follows:diskName:\\folder1\\folder2\\...\\ foldern\\fileName  diskName is single capital letter from the set {C,D,E,F,G}. folder1, ..., foldern are folder names. Each folder name is nonempty sequence of lowercase Latin letters and digits from 0 to 9. (n \u2265 1) fileName is a file name in the form of name.extension, where the name and the extension are nonempty sequences of lowercase Latin letters and digits from 0 to 9. It is also known that there is no file whose path looks like diskName:\\fileName. That is, each file is stored in some folder, but there are no files directly in the root. Also let us assume that the disk root is not a folder.Help Petya to find the largest number of subfolders, which can be in some folder, and the largest number of files that can be in some folder, counting all its subfolders.",
    "editorial": ""
}{
    "name": "Permutation Sort",
    "code": [
        "1525",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 900,
    "statement": "You are given a permutation $$$a$$$ consisting of $$$n$$$ numbers $$$1$$$, $$$2$$$, ..., $$$n$$$ (a permutation is an array in which each element from $$$1$$$ to $$$n$$$ occurs exactly once).You can perform the following operation: choose some subarray (contiguous subsegment) of $$$a$$$ and rearrange the elements in it in any way you want. But this operation cannot be applied to the whole array.For example, if $$$a = [2, 1, 4, 5, 3]$$$ and we want to apply the operation to the subarray $$$a[2, 4]$$$ (the subarray containing all elements from the $$$2$$$-nd to the $$$4$$$-th), then after the operation, the array can become $$$a = [2, 5, 1, 4, 3]$$$ or, for example, $$$a = [2, 1, 5, 4, 3]$$$.Your task is to calculate the minimum number of operations described above to sort the permutation $$$a$$$ in ascending order.",
    "editorial": "To solve the problem, it is enough to consider several cases:  if the array is already sorted, the answer is $$$0$$$;  if $$$a[1] = 1$$$ (or $$$a[n] = n$$$), then you can sort the array in one operation by selecting the subarray $$$[1, n-1]$$$ (or $$$[2, n]$$$);  if $$$a[1] = n$$$ and $$$a[n] = 1$$$, you can perform the sequence of operations $$$[1, n-1]$$$, $$$[2, n]$$$ and $$$[1, n-1]$$$ and sort the array on each of them (you can't do it faster since you can't move both $$$n$$$ to position $$$n$$$ and $$$1$$$ to position $$$1$$$ in only $$$2$$$ operations);  otherwise, the array can be sorted in $$$2$$$ operations. "
}{
    "name": "Minimum spanning tree for each edge",
    "code": [
        "609",
        "E"
    ],
    "tags": [
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 2100,
    "statement": "Connected undirected weighted graph without self-loops and multiple edges is given. Graph contains n vertices and m edges.For each edge (u, v) find the minimal possible weight of the spanning tree that contains the edge (u, v).The weight of the spanning tree is the sum of weights of all edges included in spanning tree.",
    "editorial": ""
}{
    "name": "Enchanted Matrix",
    "code": [
        "1493",
        "F"
    ],
    "tags": [
        "bitmasks",
        "interactive",
        "number theory"
    ],
    "difficulty": 2600,
    "statement": "This is an interactive problem.There exists a matrix $$$a$$$ of size $$$n \\times m$$$ ($$$n$$$ rows and $$$m$$$ columns), you know only numbers $$$n$$$ and $$$m$$$. The rows of the matrix are numbered from $$$1$$$ to $$$n$$$ from top to bottom, and columns of the matrix are numbered from $$$1$$$ to $$$m$$$ from left to right. The cell on the intersection of the $$$x$$$-th row and the $$$y$$$-th column is denoted as $$$(x, y)$$$.You are asked to find the number of pairs $$$(r, c)$$$ ($$$1 \\le r \\le n$$$, $$$1 \\le c \\le m$$$, $$$r$$$ is a divisor of $$$n$$$, $$$c$$$ is a divisor of $$$m$$$) such that if we split the matrix into rectangles of size $$$r \\times c$$$ (of height $$$r$$$ rows and of width $$$c$$$ columns, each cell belongs to exactly one rectangle), all those rectangles are pairwise equal.You can use queries of the following type:   ? $$$h$$$ $$$w$$$ $$$i_1$$$ $$$j_1$$$ $$$i_2$$$ $$$j_2$$$ ($$$1 \\le h \\le n$$$, $$$1 \\le w \\le m$$$, $$$1 \\le i_1, i_2 \\le n$$$, $$$1 \\le j_1, j_2 \\le m$$$) \u2014 to check if non-overlapping subrectangles of height $$$h$$$ rows and of width $$$w$$$ columns of matrix $$$a$$$ are equal or not. The upper left corner of the first rectangle is $$$(i_1, j_1)$$$. The upper left corner of the second rectangle is $$$(i_2, j_2)$$$. Subrectangles overlap, if they have at least one mutual cell. If the subrectangles in your query have incorrect coordinates (for example, they go beyond the boundaries of the matrix) or overlap, your solution will be considered incorrect. You can use at most $$$ 3 \\cdot \\left \\lfloor{ \\log_2{(n+m)} } \\right \\rfloor$$$ queries. All elements of the matrix $$$a$$$ are fixed before the start of your program and do not depend on your queries.",
    "editorial": "Te problem can be solved in various ways but the main idea is that if we want to check, if the $$$x$$$ consecutive blocks are equal to each other, then we can do it using $$$\\left \\lceil \\log_2 x \\right \\rceil$$$ queries. Let's suppose we want to check the equality of $$$x$$$ blocks, then we will check if the first and second $$$\\left \\lfloor \\frac {x} {2} \\right \\rfloor$$$ blocks are equal. If they are not equal, then $$$x$$$ blocks are not equal to each other, otherwise we need to check if the last $$$\\left \\lceil \\frac {x} {2} \\right \\rceil$$$ blocks are equal.Notice that the problem can be solved independently for rows and columns.Let's solve the problem for $$$n$$$ rows and let's find all $$$r$$$ such that the matrix can be split into equal rectangles of $$$r$$$ rows. If $$$r$$$ is the answer, then the numbers that are divisible by $$$r$$$ are also the answers. If $$$r$$$ is not the answer, then all divisors of $$$r$$$ are not the answers. If $$$r1$$$ and $$$r2$$$ are the answers, then $$$\\operatorname{gcd}(r1, r2)$$$ is the answer as well.Let's make a dynamic $$$dp_r$$$. If $$$dp_r = 1$$$, then the matrix can be divided into $$$r$$$ rows, otherwise $$$dp_r = 0$$$ and the matrix cannot be divided that way. We will iterate over $$$r$$$ in descending order. Let's suppose we want to calculate $$$dp_r$$$. Then we know for sure that for every $$$x$$$ that are divisors of $$$n$$$ and are divisible by $$$r$$$, $$$dp_x=1$$$ (because otherwise $$$dp_r=0$$$ and we don't have to calculate it). Let's find such minimal $$$x$$$ and check the equality of $$$\\frac{x}{r}$$$ blocks using the idea described in the beginning of the editorial.Let's calculate the sum of $$$dp_r$$$ \u2014 that is the amount of suitable $$$r$$$. Then we will solve the problem similarly for columns and output the product of suitable $$$r$$$ and suitable $$$c$$$.It is guaranteed that with any initial field the described solution will ask less than $$$3 \\cdot \\left \\lfloor{ \\log_2{(n+m)} } \\right \\rfloor$$$ queries. An accurate estimation of number of queries will be shown later.An accurate eastimation of number of queries: let us have the least $$$r$$$ such that we can split the matrix into $$$r$$$ rows (in order to get equal subrectangles) and all remaining $$$r$$$ are divided by it. Using that dynamic we maintain a minimal suitable $$$r$$$, and after that we try to decrease it using the algorithm from the editorial. The worst case is when we divide current minimal $$$r$$$ by $$$3$$$ with $$$2$$$ queries. Then we need $$$2 \\cdot \\log_3 n$$$ queries, which is equal to $$$\\log_3 4 \\cdot \\log_2 n$$$. "
}{
    "name": "Empty Rectangles",
    "code": [
        "364",
        "E"
    ],
    "tags": [
        "divide and conquer",
        "two pointers"
    ],
    "difficulty": 3000,
    "statement": "You've got an n \u00d7 m table (n rows and m columns), each cell of the table contains a \"0\" or a \"1\".Your task is to calculate the number of rectangles with the sides that are parallel to the sides of the table and go along the cell borders, such that the number one occurs exactly k times in the rectangle. ",
    "editorial": ""
}{
    "name": "Berland Army",
    "code": [
        "883",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "graphs",
        "greedy"
    ],
    "difficulty": 2600,
    "statement": "There are n military men in the Berland army. Some of them have given orders to other military men by now. Given m pairs (xi, yi), meaning that the military man xi gave the i-th order to another military man yi.It is time for reform! The Berland Ministry of Defence plans to introduce ranks in the Berland army. Each military man should be assigned a rank \u2014 integer number between 1 and k, inclusive. Some of them have been already assigned a rank, but the rest of them should get a rank soon.Help the ministry to assign ranks to the rest of the army so that:  for each of m orders it is true that the rank of a person giving the order (military man xi) is strictly greater than the rank of a person receiving the order (military man yi);  for each rank from 1 to k there is at least one military man with this rank. ",
    "editorial": ""
}{
    "name": "Sleeping Schedule",
    "code": [
        "1324",
        "E"
    ],
    "tags": [
        "dp",
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "Vova had a pretty weird sleeping schedule. There are $$$h$$$ hours in a day. Vova will sleep exactly $$$n$$$ times. The $$$i$$$-th time he will sleep exactly after $$$a_i$$$ hours from the time he woke up. You can assume that Vova woke up exactly at the beginning of this story (the initial time is $$$0$$$). Each time Vova sleeps exactly one day (in other words, $$$h$$$ hours).Vova thinks that the $$$i$$$-th sleeping time is good if he starts to sleep between hours $$$l$$$ and $$$r$$$ inclusive.Vova can control himself and before the $$$i$$$-th time can choose between two options: go to sleep after $$$a_i$$$ hours or after $$$a_i - 1$$$ hours.Your task is to say the maximum number of good sleeping times Vova can obtain if he acts optimally.",
    "editorial": "This is a very standard dynamic programming problem. Let $$$dp_{i, j}$$$ be the maximum number of good sleeping times if Vova had a sleep $$$i$$$ times already and the number of times he goes to sleep earlier by one hour is exactly $$$j$$$. Then the value $$$\\max\\limits_{j=0}^{n} dp_{n, j}$$$ will be the answer. Initially, all $$$dp_{i, j} = -\\infty$$$ and $$$dp_{0, 0} = 0$$$.What about transitions? Let the current state of the dynamic programming be $$$dp_{i, j}$$$ and $$$s = \\sum\\limits_{k=0}^{i} a_k$$$. Then we can don't go to sleep earlier and make the first transition: $$$dp_{i + 1, j} = max(dp_{i + 1, j}, dp_{i, j} + |(s - j) \\% h \\in [l; r]|)$$$. The sign $$$\\%$$$ is modulo operation and the notation $$$|f|$$$ is the boolean result of the expression $$$f$$$ ($$$1$$$ if $$$f$$$ is true and $$$0$$$ otherwise). And the second transition if we go to sleep earlier: $$$dp_{i + 1, j + 1} = max(dp_{i + 1, j + 1}, dp_{i, j} + |(s - j - 1) \\% h \\in [l; r]|)$$$.Don't forget to don't make transitions from unreachable states.Time complexity: $$$O(n^2)$$$."
}{
    "name": "Dasha and friends",
    "code": [
        "761",
        "B"
    ],
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "difficulty": 1300,
    "statement": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:The track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. Her friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively.  Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. There are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. Write the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. ",
    "editorial": "Let's add distances between pairs of adjacent barriers of both tracks in arrays and check if it possible to get one of them from another using cycling shift of the elements."
}{
    "name": "Karen and Morning",
    "code": [
        "816",
        "A"
    ],
    "tags": [
        "brute force",
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "Karen is getting ready for a new school day!  It is currently hh:mm, given in a 24-hour format. As you know, Karen loves palindromes, and she believes that it is good luck to wake up when the time is a palindrome.What is the minimum number of minutes she should sleep, such that, when she wakes up, the time is a palindrome?Remember that a palindrome is a string that reads the same forwards and backwards. For instance, 05:39 is not a palindrome, because 05:39 backwards is 93:50. On the other hand, 05:50 is a palindrome, because 05:50 backwards is 05:50.",
    "editorial": "This is a rather straightforward implementation problem.The only observation here is that there are only 1440 different possible times. It is enough to iterate through all of them until we encounter a palindromic time, and count the number of times we had to check before we reached a palindromic time.How do we iterate through them? The most straightforward way is to simply convert the given string into two integers h and m. We can do this manually or maybe use some functions specific to your favorite language. It is good to be familiar with how your language deals with strings. It is also possible, though inadvisable, to try to work with the string directly.To go to the next time, we simply increment m. If m becomes 60, then make it 0 and increment h. If h becomes 24, then make it 0.To check whether a given time is palindromic, we simply need to check if the tens digit of h is the same as the ones digit of m, and if the ones digit of h is the same as the tens digit of m. This can be done like so: check if  and .Another way is to simply cross-check against a list of palindromic times. Just be careful not to miss any of them, and not to add any extraneous values. There are 16 palindromic times, namely: 00: 00, 01: 10, 02: 20, 03: 30, 04: 40, 05: 50, 10: 01, 11: 11, 12: 21, 13: 31, 14: 41, 15: 51, 20: 02, 21: 12, 22: 22 and 23: 32."
}{
    "name": "Mr. Kitayuta's Colorful Graph",
    "code": [
        "506",
        "D"
    ],
    "tags": [
        "brute force",
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "difficulty": 2400,
    "statement": "Mr. Kitayuta has just bought an undirected graph with n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi.Mr. Kitayuta wants you to process the following q queries.In the i-th query, he gives you two integers - ui and vi.Find the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.",
    "editorial": ""
}{
    "name": "Strange Instructions",
    "code": [
        "1621",
        "F"
    ],
    "tags": [
        "data structures",
        "greedy",
        "implementation"
    ],
    "difficulty": 2700,
    "statement": "Dasha has $$$10^{100}$$$ coins. Recently, she found a binary string $$$s$$$ of length $$$n$$$ and some operations that allows to change this string (she can do each operation any number of times):  Replace substring 00 of $$$s$$$ by 0 and receive $$$a$$$ coins.  Replace substring 11 of $$$s$$$ by 1 and receive $$$b$$$ coins.  Remove 0 from any position in $$$s$$$ and pay $$$c$$$ coins. It turned out that while doing this operations Dasha should follow the rule:  It is forbidden to do two operations with the same parity in a row. Operations are numbered by integers $$$1$$$-$$$3$$$ in the order they are given above. Please, calculate what is the maximum profit Dasha can get by doing these operations and following this rule.",
    "editorial": "From the rule $$$4$$$ it follows that the sequence of types of operations looks like $$$\\ldots$$$, ($$$1$$$ or $$$3$$$), $$$2$$$, ($$$1$$$ or $$$3$$$), $$$2$$$, ($$$1$$$ or $$$3$$$), $$$\\ldots$$$.One can suppose that operation $$$1$$$ is \"better\" than operation $$$3$$$ so we can (in optimal solution) do all operations of type $$$3$$$ after all operations of type $$$1$$$. However it is now always the truth: for example for $$$s = 00101$$$ with large $$$a$$$ and $$$b$$$ and small $$$c$$$ it is optimal to do operations of types $$$3$$$, $$$2$$$ and $$$1$$$ in this order to get profit of $$$a+b-c$$$ ($$$00101 \\rightarrow 0011 \\rightarrow 011 \\rightarrow 01$$$). But it turns out that it is the only case when we should do operation of type $$$1$$$ after the operation of the type $$$3$$$: we can do no more than one such operation $$$1$$$ and we can do it in the end. I will prove it later.Now we know how does the operation sequence look like. Let's now think what zeroes and ones we will remove on each step. Obviously, the only case we should use operation of type $$$3$$$ is to remove the last $$$0$$$ in the block (block of zeroes or ones is the unextendable substring constisting only of zeroes or ones) otherwise we can use the operation of type $$$1$$$. Let's now think that string is a sequence of blocks. Obiviously, all zeroes/ones in one block are indistinguishable. Let's look how does the number of possible operations of type $$$2$$$ changes after each operation. It is the number of ones minus the number of blocks of ones. After the operation of type $$$1$$$ the blocks structure doesn't changes; after the operation of type $$$2$$$ the blocks structure also doesn't change but the number of ones reduces by one; after the operation of type of $$$3$$$ the number of ones doesn't change, but two blocks of ones are merged together (if we removed not the first or last block). So, the number of possible operations of type $$$2$$$ decreaces by one after the operation of type $$$2$$$ and can increase by one after the operation of type $$$3$$$. Also we can see that the operation of type $$$2$$$ can't affect any block of zeroes in any way. From here it follows that all operations of type $$$2$$$ are indistinguishable and we should only care about the amount of possible such operations. Also it follows that using operation $$$3$$$ to remove one of the middle blocks is always better than using operation $$$3$$$ to remove the block from the side. Also it follows that if we have no possible operation of type $$$2$$$ remaining the only way to not stop doing operations it to do operation of type $$$3$$$ with one of the middle blocks. However, after it we will do operation of type $$$2$$$ and will come back to this situation again. Here, in cases $$$b < c$$$ or no operation of type $$$3$$$ available we can do operation of type $$$1$$$ (if it is possible) and stop. I claim that the case above is the only case when we should do the operation of type $$$1$$$ after the operation $$$3$$$. Assume it is not. Then we have consecutive operations of types $$$3$$$, $$$2$$$, $$$1$$$, $$$2$$$ in this order. Then we had possible operations of type $$$2$$$ before the first of these operations and operations of types $$$1$$$ and $$$3$$$ are applied to the different blocks. Thus we can make the same operations in the order $$$1$$$, $$$2$$$, $$$3$$$, $$$2$$$ and don't change the answer (we don't care what block to we apply the type $$$2$$$ operation). So there is an optimal sequence of operations without consecutive operations $$$3$$$, $$$2$$$, $$$1$$$, $$$2$$$. Well, we know much enough about operations of types $$$2$$$ and $$$3$$$. Now let's go to the operation of type $$$1$$$. When we will start making operations of type $$$3$$$? There are two cases: we cannot make any operation of type $$$1$$$ or we have no possible operations of type $$$2$$$. In the first case we will make all possible operations of type $$$1$$$ so it doesn't matter in what order we will do them. In the second case we will never come back to the operations of type $$$1$$$ except the last operation, so we should prepare as much blocks of length $$$1$$$ as possible. The best way to do this is to remove zeroes from the shortest block except the corner blocks on each operation, and then remove zeroes from the corner blocks.I claim that this is enough to solve the problem. It seems that there are too many cases but all of them are covered by the algorithm below.Let's fix the parity of the first operation type to simplify the implementation, so on each step we will know the parity of the type of operation we should do next.Now the algorithm is (after each operation we should try to update the answer):   If we should do the operation of type $$$2$$$:   If we can do it, we do it.  Otherwise, we should terminate.   If we should do the operation of type $$$1$$$ or $$$3$$$:   If there are no possible operations of type $$$2$$$:   If we can do operation of type $$$1$$$, we should try to do it (but don't actually do it) and update the answer. It it the last operation in this case.  If we can do operation of type $$$3$$$ and remove one of the center blocks, we should do it.  Otherwise, we should terminate.   If there are possible operations of type $$$2$$$:   If we can do operation of type $$$1$$$ on one of the middle blocks, we should do it on the one of the shortest middle blocks.  Otherwise, if we can do operation of type $$$1$$$ on one of the corner blocks, we should do it.  Otherwise, if we can do operation of type $$$3$$$ on one of the middle blocks, we should do it.  Otherwise, if we can do operation of type $$$3$$$ on one of the corner blocks, we should do it.  Otherwise, we should terminate.   It covers all the cases and works in $$$\\mathcal{O}(n)$$$. Total complexity is $$$\\mathcal{O}(n \\log n)$$$ because of sorting.Bonus: $$$s$$$ is given, calculate answers for $$$q$$$ queries with $$$a$$$, $$$b$$$, $$$c$$$ faster than in $$$\\mathcal{O}(nq)$$$."
}{
    "name": "Getting an A",
    "code": [
        "991",
        "B"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 900,
    "statement": "Translator's note: in Russia's most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system.The term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically \u00a0\u2014 he would calculate the simple average (arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student\u00a0\u2014 $$$4.5$$$ would be rounded up to $$$5$$$ (as in example 3), but $$$4.4$$$ would be rounded down to $$$4$$$.This does not bode well for Vasya who didn't think those lab works would influence anything, so he may receive a grade worse than $$$5$$$ (maybe even the dreaded $$$2$$$). However, the professor allowed him to redo some of his works of Vasya's choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get $$$5$$$ for the course. Of course, Vasya will get $$$5$$$ for the lab works he chooses to redo.Help Vasya\u00a0\u2014 calculate the minimum amount of lab works Vasya has to redo.",
    "editorial": "\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0436\u0430\u0434\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c. \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0412\u0430\u0441\u0435 \u0432\u044b\u0433\u043e\u0434\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0447\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u043d\u0430 5, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u043d\u043e\u0432\u043e (\u0438\u0442\u043e\u0433\u043e, \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 $$$O(N^{2})$$$) \u0438\u043b\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043e\u0446\u0435\u043d\u043e\u043a, \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430 $$$O(1)$$$ \u0441 \u043e\u0431\u0449\u0435\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e $$$O(N)$$$, \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 (\u0441\u043c. B_1.cpp).\u0420\u0430\u0437\u0443\u043c\u0435\u0435\u0442\u0441\u044f, \u043e\u0431\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043b\u0435\u0433\u043a\u043e \u0443\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438."
}{
    "name": "Printer",
    "code": [
        "253",
        "E"
    ],
    "tags": [
        "binary search",
        "data structures",
        "implementation",
        "sortings"
    ],
    "difficulty": 2200,
    "statement": "Let's consider a network printer that functions like that. It starts working at time 0. In each second it can print one page of a text. At some moments of time the printer receives printing tasks. We know that a printer received n tasks. Let's number the tasks by consecutive integers from 1 to n. Then the task number i is characterised by three integers: ti is the time when the task came, si is the task's volume (in pages) and pi is the task's priority. The priorities of all tasks are distinct.When the printer receives a task, the task goes to the queue and remains there until all pages from this task are printed. The printer chooses a page to print each time when it either stops printing some page or when it is free and receives a new task. Among all tasks that are in the queue at this moment, the printer chooses the task with the highest priority and next second prints an unprinted page from this task. You can assume that a task goes to the queue immediately, that's why if a task has just arrived by time t, the printer can already choose it for printing.You are given full information about all tasks except for one: you don't know this task's priority. However, we know the time when the last page from this task was finished printing. Given this information, find the unknown priority value and determine the moments of time when the printer finished printing each task.",
    "editorial": ""
}{
    "name": "Chat",
    "code": [
        "928",
        "B"
    ],
    "tags": [
        "*special",
        "dp"
    ],
    "difficulty": 1400,
    "statement": "There are times you recall a good old friend and everything you've come through together. Luckily there are social networks\u00a0\u2014 they store all your message history making it easy to know what you argued over 10 years ago.More formal, your message history is a sequence of messages ordered by time sent numbered from 1 to n where n is the total number of messages in the chat.Each message might contain a link to an earlier message which it is a reply to. When opening a message x or getting a link to it, the dialogue is shown in such a way that k previous messages, message x and k next messages are visible (with respect to message x). In case there are less than k messages somewhere, they are yet all shown.Digging deep into your message history, you always read all visible messages and then go by the link in the current message x (if there is one) and continue reading in the same manner.Determine the number of messages you'll read if your start from message number t for all t from 1 to n. Calculate these numbers independently. If you start with message x, the initial configuration is x itself, k previous and k next messages. Messages read multiple times are considered as one.",
    "editorial": "Let's use the dynamic. We will calculate the answer for the messages in the order of increasing their numbers. Let the current message has number x, then the answer was calculated for each y from 1 to (x - 1) and equals to cnty.If there is no a link in the message y then the answer for this message \u2014 is a length of the segment [y - k, y + k] (it is necessary not to forget that the left boundary of the segment should be positive, and the right boundary should not exceed n). In the other case, the message y contains the link to the message z. We know that z < y, so the cntz has been already calculated. All messages which were counted for message z should be counted in the answer for message y. Also new messages should be added \u2014 it is messages from the segment [y - k, y + k] which do not included in the segment [z - k, y + k]. Also we remember that the left boundary of the segment should be positive, and the right boundary should not exceed n. After we considered all messages \u2014 simply print the array cnt."
}{
    "name": "PE Lesson",
    "code": [
        "316",
        "D2"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2300,
    "statement": "Smart Beaver decided to be not only smart, but also a healthy beaver! And so he began to attend physical education classes at school X. In this school, physical education has a very creative teacher. One of his favorite warm-up exercises is throwing balls. Students line up. Each one gets a single ball in the beginning. The balls are numbered from 1 to n (by the demand of the inventory commission).   Figure 1. The initial position for n = 5.  After receiving the balls the students perform the warm-up exercise. The exercise takes place in a few throws. For each throw the teacher chooses any two arbitrary different students who will participate in it. The selected students throw their balls to each other. Thus, after each throw the students remain in their positions, and the two balls are swapped.   Figure 2. The example of a throw.  In this case there was a throw between the students, who were holding the 2-nd and the 4-th balls. Since the warm-up has many exercises, each of them can only continue for little time. Therefore, for each student we know the maximum number of throws he can participate in. For this lessons maximum number of throws will be 1 or 2.Note that after all phases of the considered exercise any ball can end up with any student. Smart Beaver decided to formalize it and introduced the concept of the \"ball order\". The ball order is a sequence of n numbers that correspond to the order of balls in the line. The first number will match the number of the ball of the first from the left student in the line, the second number will match the ball of the second student, and so on. For example, in figure 2 the order of the balls was (1, 2, 3, 4, 5), and after the throw it was (1, 4, 3, 2, 5). Smart beaver knows the number of students and for each student he knows the maximum number of throws in which he can participate. And now he is wondering: what is the number of distinct ways of ball orders by the end of the exercise.",
    "editorial": ""
}{
    "name": "Vasya and Beautiful Arrays",
    "code": [
        "354",
        "C"
    ],
    "tags": [
        "brute force",
        "dp",
        "number theory"
    ],
    "difficulty": 2100,
    "statement": "Vasya's got a birthday coming up and his mom decided to give him an array of positive integers a of length n.Vasya thinks that an array's beauty is the greatest common divisor of all its elements. His mom, of course, wants to give him as beautiful an array as possible (with largest possible beauty). Unfortunately, the shop has only one array a left. On the plus side, the seller said that he could decrease some numbers in the array (no more than by k for each number).The seller can obtain array b from array a if the following conditions hold: bi > 0;\u20020 \u2264 ai - bi \u2264 k for all 1 \u2264 i \u2264 n.Help mom find the maximum possible beauty of the array she will give to Vasya (that seller can obtain).",
    "editorial": ""
}{
    "name": "Turing Tape",
    "code": [
        "132",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1300,
    "statement": "INTERCAL is the oldest of esoteric programming languages. One of its many weird features is the method of character-based output, known as Turing Tape method. It converts an array of unsigned 8-bit integers into a sequence of characters to print, using the following method.The integers of the array are processed one by one, starting from the first. Processing i-th element of the array is done in three steps:1. The 8-bit binary notation of the ASCII-code of the previous printed character is reversed. When the first element of the array is processed, the result of this step is considered to be 0.2. The i-th element of the array is subtracted from the result of the previous step modulo 256.3. The binary notation of the result of the previous step is reversed again to produce ASCII-code of the i-th character to be printed.You are given the text printed using this method. Restore the array used to produce this text.",
    "editorial": ""
}{
    "name": "Christmas Game",
    "code": [
        "1498",
        "F"
    ],
    "tags": [
        "bitmasks",
        "data structures",
        "dfs and similar",
        "dp",
        "games",
        "math",
        "trees"
    ],
    "difficulty": 2500,
    "statement": "Alice and Bob are going to celebrate Christmas by playing a game with a tree of presents. The tree has $$$n$$$ nodes (numbered $$$1$$$ to $$$n$$$, with some node $$$r$$$ as its root). There are $$$a_i$$$ presents are hanging from the $$$i$$$-th node.Before beginning the game, a special integer $$$k$$$ is chosen. The game proceeds as follows: Alice begins the game, with moves alternating each turn; in any move, the current player may choose some node (for example, $$$i$$$) which has depth at least $$$k$$$. Then, the player picks some positive number of presents hanging from that node, let's call it $$$m$$$ $$$(1 \\le m \\le a_i)$$$; the player then places these $$$m$$$ presents on the $$$k$$$-th ancestor (let's call it $$$j$$$) of the $$$i$$$-th node (the $$$k$$$-th ancestor of vertex $$$i$$$ is a vertex $$$j$$$ such that $$$i$$$ is a descendant of $$$j$$$, and the difference between the depth of $$$j$$$ and the depth of $$$i$$$ is exactly $$$k$$$). Now, the number of presents of the $$$i$$$-th node $$$(a_i)$$$ is decreased by $$$m$$$, and, correspondingly, $$$a_j$$$ is increased by $$$m$$$; Alice and Bob both play optimally. The player unable to make a move loses the game.For each possible root of the tree, find who among Alice or Bob wins the game.Note: The depth of a node $$$i$$$ in a tree with root $$$r$$$ is defined as the number of edges on the simple path from node $$$r$$$ to node $$$i$$$. The depth of root $$$r$$$ itself is zero.",
    "editorial": ""
}{
    "name": "Classical?",
    "code": [
        "1285",
        "F"
    ],
    "tags": [
        "binary search",
        "combinatorics",
        "number theory"
    ],
    "difficulty": 2900,
    "statement": "Given an array $$$a$$$, consisting of $$$n$$$ integers, find:$$$$$$\\max\\limits_{1 \\le i < j \\le n} LCM(a_i,a_j),$$$$$$where $$$LCM(x, y)$$$ is the smallest positive integer that is divisible by both $$$x$$$ and $$$y$$$. For example, $$$LCM(6, 8) = 24$$$, $$$LCM(4, 12) = 12$$$, $$$LCM(2, 3) = 6$$$.",
    "editorial": "Since $$$LCM(x,y)=\\frac{x*y}{GCD(x,y)}$$$, it makes sense to try and fix $$$GCD(x,y)$$$. Let's call it $$$g$$$. Now, let's only care about the multiples of $$$g$$$ in the input. Assume we divide them all by $$$g$$$. We now want the maximum product of 2 coprime numbers in this new array.Let's sort the numbers and iterate from the biggest to the smallest, keeping a stack. Assume the current number you're iterating on is $$$x$$$. While there is a number in the stack coprime to $$$x$$$, you can actually pop the top of the stack; you'll never need it again. That's because this number together with a number smaller than $$$x$$$ can never give a better product than that of a greater, or equal, number together with $$$x$$$! Now, we just need to figure out whether there's a number coprime to $$$x$$$ in the stack. This could be easily done with inclusion-exclusion. Assume the number of multiples of $$$d$$$ in the stack is $$$cnt_d$$$; the number of elements in the stack coprime to $$$x$$$ is: $$$$$$\\sum_{d|x} \\mu(d)*cnt_d$$$$$$ Where $$$\\mu$$$ is the Mobius function. So we'll just iterate on the integers from greatest to smallest, and while there's a number coprime to $$$x$$$ in the stack, we'll keep maximizing the answer, popping, and updating the array $$$cnt$$$. Then, we'll push $$$x$$$ to the stack and also update $$$cnt$$$.The complexity is $$$O(\\sum\\limits_{i=1}^{n} \\sigma_{0}(i)^2)$$$ where $$$\\sigma_{0}$$$ is the divisor count function. That's because each number enters the routine of calculating the maximum product of a coprime pair $$$\\sigma_{0}$$$ times, and we iterate through its divisors in this routine."
}{
    "name": "Edge Queries",
    "code": [
        "1763",
        "F"
    ],
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 3000,
    "statement": "You are given an undirected, connected graph of $$$n$$$ nodes and $$$m$$$ edges. All nodes $$$u$$$ of the graph satisfy the following:  Let $$$S_u$$$ be the set of vertices in the longest simple cycle starting and ending at $$$u$$$.  Let $$$C_u$$$ be the union of the sets of vertices in any simple cycle starting and ending at $$$u$$$.  $$$S_u = C_u$$$. You need to answer $$$q$$$ queries.For each query, you will be given node $$$a$$$ and node $$$b$$$. Out of all the edges that belong to any simple path from $$$a$$$ to $$$b$$$, count the number of edges such that if you remove that edge, $$$a$$$ and $$$b$$$ are reachable from each other.",
    "editorial": ""
}{
    "name": "pSort",
    "code": [
        "28",
        "B"
    ],
    "tags": [
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "difficulty": 1600,
    "statement": "One day n cells of some array decided to play the following game. Initially each cell contains a number which is equal to it's ordinal number (starting from 1). Also each cell determined it's favourite number. On it's move i-th cell can exchange it's value with the value of some other j-th cell, if |i - j| = di, where di is a favourite number of i-th cell. Cells make moves in any order, the number of moves is unlimited.The favourite number of each cell will be given to you. You will also be given a permutation of numbers from 1 to n. You are to determine whether the game could move to this state.",
    "editorial": ""
}{
    "name": "Min Max Swap",
    "code": [
        "1631",
        "A"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 800,
    "statement": "You are given two arrays $$$a$$$ and $$$b$$$ of $$$n$$$ positive integers each. You can apply the following operation to them any number of times:  Select an index $$$i$$$ ($$$1\\leq i\\leq n$$$) and swap $$$a_i$$$ with $$$b_i$$$ (i.\u00a0e. $$$a_i$$$ becomes $$$b_i$$$ and vice versa). Find the minimum possible value of $$$\\max(a_1, a_2, \\ldots, a_n) \\cdot \\max(b_1, b_2, \\ldots, b_n)$$$ you can get after applying such operation any number of times (possibly zero). ",
    "editorial": "Let $$$m_1 = \\max(a_1, a_2, ..., a_n, b_1, b_2, ..., b_n)$$$. The answer will always be $$$m_1 \\cdot m_2$$$ where $$$m_2$$$ is the maximum of the array that does not contain $$$m_1$$$.Since $$$m_1$$$ is fixed, the problem can be reduced to minimize $$$m_2$$$, that is, minimize the maximum of the array that does not contain the global maximum.WLOG assume that the global maximum will be in the array $$$b$$$, we can swap elements at each index $$$x$$$ such that $$$a_x > b_x$$$, ending with $$$a_i \\leq b_i$$$ for all $$$i$$$. It can be shown that the maximum of array $$$a$$$ is minimized in this way.Time complexity: $$$O(n)$$$"
}{
    "name": "May Holidays",
    "code": [
        "925",
        "E"
    ],
    "tags": [
        "data structures",
        "trees"
    ],
    "difficulty": 2900,
    "statement": "It's May in Flatland, and there are $$$m$$$ days in this month. Despite the fact that May Holidays are canceled long time ago, employees of some software company still have a habit of taking short or long vacations in May.Of course, not all managers of the company like this. There are $$$n$$$ employees in the company that form a tree-like structure of subordination: each employee has a unique integer id $$$i$$$ between $$$1$$$ and $$$n$$$, and each employee with id $$$i$$$ (except the head manager whose id is 1) has exactly one direct manager with id $$$p_i$$$. The structure of subordination is not cyclic, i.e. if we start moving from any employee to his direct manager, then we will eventually reach the head manager. We define that an employee $$$u$$$ is a subordinate of an employee $$$v$$$, if $$$v$$$ is a direct manager of $$$u$$$, or the direct manager of $$$u$$$ is a subordinate of $$$v$$$. Let $$$s_i$$$ be the number of subordinates the $$$i$$$-th employee has (for example, $$$s_1 = n - 1$$$, because all employees except himself are subordinates of the head manager).Each employee $$$i$$$ has a bearing limit of $$$t_i$$$, which is an integer between $$$0$$$ and $$$s_i$$$. It denotes the maximum number of the subordinates of the $$$i$$$-th employee being on vacation at the same moment that he can bear. If at some moment strictly more than $$$t_i$$$ subordinates of the $$$i$$$-th employee are on vacation, and the $$$i$$$-th employee himself is not on a vacation, he becomes displeased.In each of the $$$m$$$ days of May exactly one event of the following two types happens: either one employee leaves on a vacation at the beginning of the day, or one employee returns from a vacation in the beginning of the day. You know the sequence of events in the following $$$m$$$ days. Your task is to compute for each of the $$$m$$$ days the number of displeased employees on that day.",
    "editorial": "In terms of trees we have a rooted tree whose vertices may be activated and deactivated, and each vertex has a limit for the number of deactivated vertices among its descendants. We are required to switch the state of some vertex, and after each query we report the number of activated vertices unsatisfied vertices. Let the balance of a vertex be equal to the difference between its limit of deactivated descendants and the actual number of deactivated vertices among its descendants. In such terms we are interested in the number of activated vertices with the negative balance.Let's utilize the idea of sqrt-optimization. Consider a block of $$$k$$$ consecutive queries, let us answer all of them. Suppose this query affects the state of vertices $$$v_1, v_2, \\ldots, v_l$$$ ($$$l \\leq k$$$), let us call such vertices interesting. Then, during the current query block, the balance will change only for the vertices that have at least one interesting vertex in its subtree.Let's perform a classical trick of building the condensed tree containing the given interesting vertices. Namely, sort all the interesting vertices in order of their visit when doing DFS, and add all vertices of form $$$lca(v_i, v_{i+1})$$$ for all $$$1 \\leq i < l$$$ to the set of interesting vertices. After such procedure all vertices whose balance may change may be splitted into $$$O(k)$$$ vertical paths each of which ends in an interesting vertex. Now we are going to consider separately the interesting vertices and the interior vertices of all paths between interesting vertices. In each of the paths the balance of all vertices is changed simultaneously, thus we may sort all the vertices in each path by balance and then group all vertices having the same balance together. Introduce a pointer that initially stands at the first satisfied group (with non-negative balance). When the balance of all groups is changed by 1, instead of actually changing the value of balance we may just shift the pointer by at most one position to the left or to the right (artificially changing the origin) and accounting at most one group the pointer has passed in the answer. On each query we have to perform such an operation with every path and interesting vertex that is located above the queried vertex. Since each vertex and each path is processed in $$$O(1)$$$, processing a single query takes $$$O(k)$$$ time and processing all queries inside a block takes $$$O(k^2)$$$ time. It is possible to build all paths and groups in running time of a single DFS plus sort time (std::sort or counting sort) for grouping vertices of equal balance. This part of solution takes $$$O(n)$$$ per each query block or $$$O(n \\log n)$$$ depending on used sorting algorithm.If we use count sort, the resulting complexity will be $$$O(\\frac{m}{k} \\left(k^2 + n\\right))$$$, finally we can take $$$k = \\Theta(\\sqrt{n})$$$ and get $$$O(m \\sqrt{n})$$$ running time."
}{
    "name": "Range and Partition",
    "code": [
        "1630",
        "B"
    ],
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "greedy",
        "two pointers"
    ],
    "difficulty": 1800,
    "statement": "Given an array $$$a$$$ of $$$n$$$ integers, find a range of values $$$[x, y]$$$ ($$$x \\le y$$$), and split $$$a$$$ into exactly $$$k$$$ ($$$1 \\le k \\le n$$$) subarrays in such a way that:  Each subarray is formed by several continuous elements of $$$a$$$, that is, it is equal to $$$a_l, a_{l+1}, \\ldots, a_r$$$ for some $$$l$$$ and $$$r$$$ ($$$1 \\leq l \\leq r \\leq n$$$).  Each element from $$$a$$$ belongs to exactly one subarray.  In each subarray the number of elements inside the range $$$[x, y]$$$ (inclusive) is strictly greater than the number of elements outside the range. An element with index $$$i$$$ is inside the range $$$[x, y]$$$ if and only if $$$x \\le a_i \\le y$$$.  Print any solution that minimizes $$$y - x$$$.",
    "editorial": "Focus on how to solve the problem for a fixed interval $$$[x,y]$$$:Let us define an array $$$b$$$ such that $$$b_i = 1$$$ if $$$x \\le a_i \\le y$$$ or $$$b_i = -1$$$ otherwise, for all $$$1\\le i\\le n$$$.Let's define $$$psum_i$$$ as $$$b_1 + b_2 + ... + b_i$$$.We need to find a partition on $$$k$$$ subarrays with positive sum of $$$b_i$$$.The sum of a subarray $$$[l,r]$$$ is $$$b_l+b_{l+1}+...+b_r = psum_r-psum_{l-1}$$$. Then a subarray is valid if $$$psum_r > psum_{l-1}$$$.We need to find an increasing sequence of $$$psum$$$ of length $$$k+1$$$ starting at $$$0$$$ and ending at $$$n$$$.Let's define $$$firstocc_x$$$ to be the first occurrence of the integer $$$x$$$ in $$$psum$$$.If $$$psum_n < k$$$ there will be no valid sequence, otherwise the sequence $$$0, firstocc_1, firstocc_2, ..., firstocc_{k-1}, n$$$ will satisfy all constraints. Note that, since $$$|psum_i-psum_{i-1}| = 1$$$, for $$$i>0$$$, then $$$firstocc_v$$$ exists and $$$firstocc_v < firstocc_{v+1}$$$ for $$$0\\leq v \\leq psum_n$$$.This solves the problem for a fixed interval.It remains to find the smallest interval $$$[x,y]$$$ such that $$$psum_n \\geq k$$$.For a given interval $$$[x,y]$$$, since $$$psum_n = b_1 + b_2 + ... + b_n$$$, $$$psum_n$$$ will be equal to the number of elements of $$$a$$$ inside the interval minus the number of elements outside.Then for each $$$x$$$, it is possible to find the smallest $$$y$$$ such that $$$psum_n \\geq k$$$ using binary search or two pointers.It is also possible to note that: $$$$$$psum_n \\geq k$$$$$$ $$$$$$\\sum\\limits_{i=1}^n b_i \\geq k$$$$$$ $$$$$$\\sum\\limits_{i=1}^n (-1 + 2\\cdot [x\\le a_i\\le y]) \\geq k$$$$$$ $$$$$$\\sum\\limits_{i=1}^n [x\\le a_i\\le y] \\geq \\lceil{\\frac{k+n}{2}}\\rceil$$$$$$We need to find the smallest interval with at least $$$\\lceil{\\frac{k+n}{2}}\\rceil$$$ inside, let $$$A$$$ be the array $$$a$$$ sorted, the answer is the minimum interval among all intervals $$$[A_i, A_{i+\\lceil{\\frac{k+n}{2}}\\rceil-1}]$$$ for $$$1 \\leq i \\leq n - \\lceil{\\frac{k+n}{2}}\\rceil+1$$$.Complexity: $$$O(n\\log{n})$$$ if solved with the previous formula or binary search, or $$$O(n)$$$ is solved with two pointers."
}{
    "name": "Reberland Linguistics",
    "code": [
        "666",
        "A"
    ],
    "tags": [
        "dp",
        "implementation",
        "strings"
    ],
    "difficulty": 1800,
    "statement": "First-rate specialists graduate from Berland State Institute of Peace and Friendship. You are one of the most talented students in this university. The education is not easy because you need to have fundamental knowledge in different areas, which sometimes are not related to each other. For example, you should know linguistics very well. You learn a structure of Reberland language as foreign language. In this language words are constructed according to the following rules. First you need to choose the \"root\" of the word \u2014 some string which has more than 4 letters. Then several strings with the length 2 or 3 symbols are appended to this word. The only restriction \u2014  it is not allowed to append the same string twice in a row. All these strings are considered to be suffixes of the word (this time we use word \"suffix\" to describe a morpheme but not the few last characters of the string as you may used to). Here is one exercise that you have found in your task list. You are given the word s. Find all distinct strings with the length 2 or 3, which can be suffixes of this word according to the word constructing rules in Reberland language. Two strings are considered distinct if they have different length or there is a position in which corresponding characters do not match. Let's look at the example: the word abacabaca is given. This word can be obtained in the following ways: , where the root of the word is overlined, and suffixes are marked by \"corners\". Thus, the set of possible suffixes for this word is {aca, ba, ca}. ",
    "editorial": "A decision is a dynamic programming. We can take any large root. Therefore we unfold the string and support dp2, 3[n] \u2014 if it is possible to divide prefix with the length equals n into strings with the length equals 2 and 3 so that the last string was with a certain length. Recalculation \u2014 . Similarly . If dpk[n] = 1, add the corresponding string into a multitude of answers. "
}{
    "name": "Palisection",
    "code": [
        "17",
        "E"
    ],
    "tags": [
        "strings"
    ],
    "difficulty": 2900,
    "statement": "In an English class Nick had nothing to do at all, and remembered about wonderful strings called palindromes. We should remind you that a string is called a palindrome if it can be read the same way both from left to right and from right to left. Here are examples of such strings: \u00abeye\u00bb, \u00abpop\u00bb, \u00ablevel\u00bb, \u00ababa\u00bb, \u00abdeed\u00bb, \u00abracecar\u00bb, \u00abrotor\u00bb, \u00abmadam\u00bb. Nick started to look carefully for all palindromes in the text that they were reading in the class. For each occurrence of each palindrome in the text he wrote a pair \u2014 the position of the beginning and the position of the ending of this occurrence in the text. Nick called each occurrence of each palindrome he found in the text subpalindrome. When he found all the subpalindromes, he decided to find out how many different pairs among these subpalindromes cross. Two subpalindromes cross if they cover common positions in the text. No palindrome can cross itself.Let's look at the actions, performed by Nick, by the example of text \u00abbabb\u00bb. At first he wrote out all subpalindromes:\u2022 \u00abb\u00bb \u2014 1..1 \u2022 \u00abbab\u00bb \u2014 1..3 \u2022 \u00aba\u00bb \u2014 2..2 \u2022 \u00abb\u00bb \u2014 3..3 \u2022 \u00abbb\u00bb \u2014 3..4 \u2022 \u00abb\u00bb \u2014 4..4 Then Nick counted the amount of different pairs among these subpalindromes that cross. These pairs were six: 1. 1..1 cross with 1..3  2. 1..3 cross with 2..2  3. 1..3 cross with 3..3  4. 1..3 cross with 3..4  5. 3..3 cross with 3..4  6. 3..4 cross with 4..4 Since it's very exhausting to perform all the described actions manually, Nick asked you to help him and write a program that can find out the amount of different subpalindrome pairs that cross. Two subpalindrome pairs are regarded as different if one of the pairs contains a subpalindrome that the other does not.",
    "editorial": ""
}{
    "name": "Multiplication Table",
    "code": [
        "448",
        "D"
    ],
    "tags": [
        "binary search",
        "brute force"
    ],
    "difficulty": 1800,
    "statement": "Bizon the Champion isn't just charming, he also is very smart.While some of us were learning the multiplication table, Bizon the Champion had fun in his own manner. Bizon the Champion painted an n \u00d7 m multiplication table, where the element on the intersection of the i-th row and j-th column equals i\u00b7j (the rows and columns of the table are numbered starting from 1). Then he was asked: what number in the table is the k-th largest number? Bizon the Champion always answered correctly and immediately. Can you repeat his success?Consider the given multiplication table. If you write out all n\u00b7m numbers from the table in the non-decreasing order, then the k-th number you write out is called the k-th largest number.",
    "editorial": ""
}{
    "name": "Representative Edges",
    "code": [
        "1616",
        "C"
    ],
    "tags": [
        "brute force",
        "geometry",
        "implementation",
        "math"
    ],
    "difficulty": 1500,
    "statement": "An array $$$a_1, a_2, \\ldots, a_n$$$ is good if and only if for every subsegment $$$1 \\leq l \\leq r \\leq n$$$, the following holds: $$$a_l + a_{l + 1} + \\ldots + a_r = \\frac{1}{2}(a_l + a_r) \\cdot (r - l + 1)$$$. You are given an array of integers $$$a_1, a_2, \\ldots, a_n$$$. In one operation, you can replace any one element of this array with any real number. Find the minimum number of operations you need to make this array good.",
    "editorial": "Note that if the array is good $$$a_{k+2}-a_{k+1}=a_{k+1}-a_k$$$. In other words, the array form an arithmetic progression. We can either fix an arbitrary element and set all other elements equal to it (giving us the lower bound $$$n-1$$$ on the answer). Or, to solve the remaining case, we can fix any two elements that are in the answer, derive the formula for an arbitrary element of the arithmetic progression, and check the number of elements that we have to change."
}{
    "name": "Smile House",
    "code": [
        "147",
        "B"
    ],
    "tags": [
        "binary search",
        "graphs",
        "matrices"
    ],
    "difficulty": 2500,
    "statement": "A smile house is created to raise the mood. It has n rooms. Some of the rooms are connected by doors. For each two rooms (number i and j), which are connected by a door, Petya knows their value cij \u2014 the value which is being added to his mood when he moves from room i to room j.Petya wondered whether he can raise his mood infinitely, moving along some cycle? And if he can, then what minimum number of rooms he will need to visit during one period of a cycle?",
    "editorial": ""
}{
    "name": "PizzaForces",
    "code": [
        "1555",
        "A"
    ],
    "tags": [
        "brute force",
        "math"
    ],
    "difficulty": 900,
    "statement": "PizzaForces is Petya's favorite pizzeria. PizzaForces makes and sells pizzas of three sizes: small pizzas consist of $$$6$$$ slices, medium ones consist of $$$8$$$ slices, and large pizzas consist of $$$10$$$ slices each. Baking them takes $$$15$$$, $$$20$$$ and $$$25$$$ minutes, respectively.Petya's birthday is today, and $$$n$$$ of his friends will come, so he decided to make an order from his favorite pizzeria. Petya wants to order so much pizza that each of his friends gets at least one slice of pizza. The cooking time of the order is the total baking time of all the pizzas in the order.Your task is to determine the minimum number of minutes that is needed to make pizzas containing at least $$$n$$$ slices in total. For example:   if $$$12$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$12$$$ slices in total. He can order two small pizzas, containing exactly $$$12$$$ slices, and the time to bake them is $$$30$$$ minutes;  if $$$15$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$15$$$ slices in total. He can order a small pizza and a large pizza, containing $$$16$$$ slices, and the time to bake them is $$$40$$$ minutes;  if $$$300$$$ friends come to Petya's birthday, he has to order pizzas containing at least $$$300$$$ slices in total. He can order $$$15$$$ small pizzas, $$$10$$$ medium pizzas and $$$13$$$ large pizzas, in total they contain $$$15 \\cdot 6 + 10 \\cdot 8 + 13 \\cdot 10 = 300$$$ slices, and the total time to bake them is $$$15 \\cdot 15 + 10 \\cdot 20 + 13 \\cdot 25 = 750$$$ minutes;  if only one friend comes to Petya's birthday, he can order a small pizza, and the time to bake it is $$$15$$$ minutes. ",
    "editorial": "Note that the \"speed\" of cooking $$$1$$$ slice of pizza is the same for all sizes\u00a0\u2014 $$$1$$$ slice of pizza for $$$2.5$$$ minutes.If $$$n$$$ is odd, then we will increase it by $$$1$$$ (since the pizza is cooked only with an even number of pieces). Now the value of $$$n$$$ is always even. If $$$n < 6$$$, then for such $$$n$$$ the answer is equal to the answer for $$$n=6$$$, so we can say that $$$n = \\max(n, 6)$$$. While $$$n \\ge 12$$$ we can order a small pizza. Eventually the value of $$$n$$$ will be equal to $$$6$$$, $$$8$$$ or $$$10$$$. This means that for any $$$n$$$ there will be a set of pizzas with exactly $$$n$$$ slices. Then the answer is $$$n * 2.5$$$ (in the solution, it is better to use the formula $$$n / 2 * 5$$$)."
}{
    "name": "Line Empire",
    "code": [
        "1659",
        "C"
    ],
    "tags": [
        "binary search",
        "brute force",
        "dp",
        "greedy",
        "implementation",
        "math"
    ],
    "difficulty": 1500,
    "statement": "You are an ambitious king who wants to be the Emperor of The Reals. But to do that, you must first become Emperor of The Integers.Consider a number axis. The capital of your empire is initially at $$$0$$$. There are $$$n$$$ unconquered kingdoms at positions $$$0<x_1<x_2<\\ldots<x_n$$$. You want to conquer all other kingdoms.There are two actions available to you:   You can change the location of your capital (let its current position be $$$c_1$$$) to any other conquered kingdom (let its position be $$$c_2$$$) at a cost of $$$a\\cdot |c_1-c_2|$$$.  From the current capital (let its current position be $$$c_1$$$) you can conquer an unconquered kingdom (let its position be $$$c_2$$$) at a cost of $$$b\\cdot |c_1-c_2|$$$. You cannot conquer a kingdom if there is an unconquered kingdom between the target and your capital. Note that you cannot place the capital at a point without a kingdom. In other words, at any point, your capital can only be at $$$0$$$ or one of $$$x_1,x_2,\\ldots,x_n$$$. Also note that conquering a kingdom does not change the position of your capital.Find the minimum total cost to conquer all kingdoms. Your capital can be anywhere at the end.",
    "editorial": "Clearly, we should always move from left to right. Also, assume $$$x_0=0$$$ for simplicity.Let us analyze what our cost would look like. It will be composed of a part due to moving capitals, and a part due to conquering kingdoms. If we shift our capital from $$$x_i$$$ to $$$x_j$$$, the cost is $$$a\\cdot(x_j-x_i)$$$. If we conquer kingdoms from $$$(i,j]$$$ with capital $$$x_i$$$, the cost is $$$b\\cdot((x_{i+1}-x_i)+(x_{i+2}-x_i)+\\ldots+(x_j-x_i))$$$, which can be written as $$$b\\cdot(p_j-p_i-(j-i)\\cdot x_i)$$$, where $$$p_i=x_0+x_1+\\ldots+x_i$$$.Now, notice that $$$x_j-x_i$$$ and $$$p_j-p_i$$$ are linear. Also, if we isolate the parts involving $$$x_j-x_i$$$, the sum will be like $$$(x_{j_1}-x_0)+(x_{j_2}-x_{j_1})+\\ldots+(x_{j_f}-x_{j_{f-1}})=x_{j_f}-x_0$$$. This means we can simply write the final sum of this part as $$$a\\cdot x_f$$$, where $$$x_f$$$ is the final position of the capital. We can say the same thing about $$$p_j-p_i$$$, except that the final kingdom conquered is always $$$x_n$$$. So the final sum of this part is always $$$b\\cdot p_n$$$ ($$$x_0=p_0=0$$$, so they weren't written explicitly).Our final cost, then, looks like $$$T=a\\cdot x_f+b\\cdot (p_n-C)$$$, where $$$C$$$ is composed of terms like $$$(j-i)\\cdot x_i$$$. If we want to minimise $$$T$$$, we want to maximise $$$C$$$. That is achieved if we always increase $$$x_i$$$! Then we can write $$$$$$C=x_0+x_1+\\ldots+x_{f-1}+\\underbrace{x_f+\\ldots+x_f}_{n-f\\text{ }\\mathrm{times}}=p_f+(n-f-1)\\cdot x_f$$$$$$ We cannot increase beyond $$$x_f$$$ since that is the final position of our capital.Hence, our final answer is given by $$$$$$\\min_{f \\in [0,n]}{(a\\cdot x_f+b\\cdot (p_n-p_f-(n-f-1)\\cdot x_f))}$$$$$$Time complexity: $$$\\mathcal{O}(n)$$$"
}{
    "name": "Number of Simple Paths",
    "code": [
        "1454",
        "E"
    ],
    "tags": [
        "combinatorics",
        "dfs and similar",
        "graphs",
        "trees"
    ],
    "difficulty": 2000,
    "statement": "You are given an undirected graph consisting of $$$n$$$ vertices and $$$n$$$ edges. It is guaranteed that the given graph is connected (i.\u00a0e. it is possible to reach any vertex from any other vertex) and there are no self-loops and multiple edges in the graph.Your task is to calculate the number of simple paths of length at least $$$1$$$ in the given graph. Note that paths that differ only by their direction are considered the same (i.\u00a0e. you have to calculate the number of undirected paths). For example, paths $$$[1, 2, 3]$$$ and $$$[3, 2, 1]$$$ are considered the same.You have to answer $$$t$$$ independent test cases.Recall that a path in the graph is a sequence of vertices $$$v_1, v_2, \\ldots, v_k$$$ such that each pair of adjacent (consecutive) vertices in this sequence is connected by an edge. The length of the path is the number of edges in it. A simple path is such a path that all vertices in it are distinct.",
    "editorial": "Because our graph is just a tree with an additional edge, consider it as a cycle with trees hanged on cycle vertices.Consider some tree hung on a vertex $$$v$$$ on a cycle. There is only one path between each pair of its vertices (including the root which is a vertex $$$v$$$). So, if the tree has $$$cnt_v$$$ vertices, then $$$\\frac{cnt_v(cnt_v-1)}{2}$$$ paths are added to the answer. What about paths that go out of a tree? Let's assume that there are $$$cnt_v \\cdot (n - cnt_v)$$$ such paths (yeah, we counted only a half of actual paths from this component but this is fine). When we consider other trees, we will take into account the other half of paths.This information can lead us to the conclusion that the only information we need to know about trees hanged on cycle vertices is the number of vertices in these trees. So, if we know $$$cnt_v$$$ for each vertex on a cycle, we can just calculate the answer as $$$\\sum\\limits_{v \\in cycle} \\frac{cnt_v(cnt_v-1)}{2} + cnt_v \\cdot (n - cnt_v)$$$. So how to find values $$$cnt_v$$$?Of course, there is a simple and straight-forward solution \"just extract and mark all cycle vertices and run dfs from every vertex of a cycle\", but there is another approach without any graph algorithms that works very well for such kind of graphs. Initially, let $$$cnt_v = 1$$$ for each $$$v$$$ from $$$1$$$ to $$$n$$$. Let's create a queue containing all leafs of the graph. Let's take the leaf $$$x$$$, get its parent $$$p$$$, add $$$cnt_p := cnt_p + cnt_x$$$ and remove the vertex $$$x$$$ with all edges incident to it. After that, if $$$p$$$ became a leaf, let's add it to the queue.We can see that after processing all leafs only cycle vertices remain in the graph, and $$$cnt_v$$$ is exactly the number of the vertices in a tree (and we can just calculate the answer using the formula above).This approach can be implemented in $$$O(n \\log n)$$$ or in $$$O(n)$$$, there is almost no difference, but $$$O(n \\log n)$$$ one can be written a bit simpler than a linear one."
}{
    "name": "Preparation for International Women's Day",
    "code": [
        "1133",
        "B"
    ],
    "tags": [
        "math",
        "number theory"
    ],
    "difficulty": 1200,
    "statement": "International Women's Day is coming soon! Polycarp is preparing for the holiday.There are $$$n$$$ candy boxes in the shop for sale. The $$$i$$$-th box contains $$$d_i$$$ candies.Polycarp wants to prepare the maximum number of gifts for $$$k$$$ girls. Each gift will consist of exactly two boxes. The girls should be able to share each gift equally, so the total amount of candies in a gift (in a pair of boxes) should be divisible by $$$k$$$. In other words, two boxes $$$i$$$ and $$$j$$$ ($$$i \\ne j$$$) can be combined as a gift if $$$d_i + d_j$$$ is divisible by $$$k$$$.How many boxes will Polycarp be able to give? Of course, each box can be a part of no more than one gift. Polycarp cannot use boxes \"partially\" or redistribute candies between them. ",
    "editorial": "Let $$$cnt_i$$$ be the number of boxes with $$$i$$$ candies modulo $$$k$$$.Firstly, the number of pairs of boxes we can obtain using two boxes with remainder $$$0$$$ modulo $$$k$$$ is $$$\\lfloor\\frac{cnt_0}{2}\\rfloor$$$.Secondly, if $$$k$$$ is even then we also can obtain pairs of boxes using two boxes with remainder $$$\\frac{k}{2}$$$ modulo $$$k$$$ and its number is $$$\\lfloor\\frac{cnt_{\\frac{k}{2}}}{2}\\rfloor$$$.And for any other remainder $$$i$$$ from $$$1$$$ to $$$\\lfloor\\frac{k}{2}\\rfloor$$$ the number of pairs of boxes is $$$min(cnt_{i}, cnt_{k - i - 1})$$$.So, if we sum up all these values, the answer is this sum multiplied by two (because we have to print the number of boxes, not pairs)."
}{
    "name": "Block Towers",
    "code": [
        "626",
        "C"
    ],
    "tags": [
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "difficulty": 1600,
    "statement": "Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.The students don\u2019t want to use too many blocks, but they also want to be unique, so no two students\u2019 towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.",
    "editorial": ""
}{
    "name": "Tree Queries",
    "code": [
        "1606",
        "F"
    ],
    "tags": [
        "brute force",
        "dp",
        "trees"
    ],
    "difficulty": 2800,
    "statement": "You are given a tree consisting of $$$n$$$ vertices. Recall that a tree is an undirected connected acyclic graph. The given tree is rooted at the vertex $$$1$$$.You have to process $$$q$$$ queries. In each query, you are given a vertex of the tree $$$v$$$ and an integer $$$k$$$.To process a query, you may delete any vertices from the tree in any order, except for the root and the vertex $$$v$$$. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of $$$c(v) - m \\cdot k$$$ (where $$$c(v)$$$ is the resulting number of children of the vertex $$$v$$$, and $$$m$$$ is the number of vertices you have deleted). Print the maximum possible value you can obtain.The queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries.",
    "editorial": "A naive solution to this problem would be to implement a recursive function which answers each query: let $$$f(v, k)$$$ be the answer to the query \"$$$v$$$ $$$k$$$\", we can calculate it as $$$\\sum\\limits_{u \\in children(v)} \\max(1, f(u, k) - k)$$$, since for each child $$$u$$$ of vertex $$$v$$$, we either delete it and change the score by $$$f(u, k) - k$$$, or choose to let it remain, and this increases the score by $$$1$$$. Unfortunately, it is too slow.Let's try to optimize it. First of all, $$$f(v, k-1) \\ge f(v, k)$$$ since if we choose the exact same subset of vertices to delete for the query \"$$$v$$$ $$$k-1$$$\" as we've chosen for the query \"$$$v$$$ $$$k$$$\", our score won't decrease. Using this fact, we can show that if it's optimal to remove some vertex in the query \"$$$v$$$ $$$k$$$\", it's also optimal to remove a vertex in the query \"$$$v$$$ $$$k-1$$$\" because it's optimal to remove vertex $$$u$$$ if $$$f(u, k) - k > 1$$$, and if this condition holds for some value of $$$k$$$, then it holds for each smaller value of $$$k$$$.Let $$$opt(u)$$$ be the maximum value of $$$k$$$ when it's optimal to remove the vertex $$$u$$$. We will calculate these values for all vertices of the tree using an event processing method: we'll process the values of $$$k$$$ from $$$200000$$$ to $$$0$$$ and use a set or a priority queue to store events of the form \"at the value $$$i$$$, vertex $$$u$$$ becomes optimal to delete\". This set/priority queue should sort the events in descending order of the value of $$$k$$$, and in case of ties, in descending order of depths of the vertices (to make sure that vertices with the same value of $$$opt(u)$$$ are processed from bottom to up). Let's analyze the implementation of this process more in detail. For each vertex, we will store two values \u2014 the number of vertices we should remove from its subtree, and the number of children this vertex will optimally have. Using these two values, we can easily calculate the value of $$$opt$$$ for a vertex. When a vertex is \"removed\" (that is, the event corresponding to this vertex is processed), these values for this vertex should be added to its current parent (we can use DSU to find the current parent easily, for example; and don't forget that the number of vertices we have to remove for this new parent also increases by $$$1$$$); then we recalculate the value of $$$opt$$$ for the current parent and change the event corresponding to this current parent (note that the value of $$$opt$$$ for the current parent shouldn't be greater than the value of $$$opt$$$ for the vertex we've deleted).Okay, this allows us to calculate when it's optimal to delete each vertex. But how do we answer queries? One of the ways to do this is to process queries in the same event processing algorithm (and for every value of $$$k$$$, we first \"remove\" the vertices $$$u$$$ with $$$opt(u) = k$$$, then process the queries). There is an issue that when we remove a vertex, it can affect the answer not only for its current parent, but also for the vertices that could be its parents, but are already deleted; to handle this, instead of adding the values of the deleted vertex only to the values of its current parent, we perform an addition on the whole path from the vertex to the current parent (excluding the vertex itself). This path addition can be performed with a Fenwick or Segment tree over the Eulerian tour of the tree, and this yields a compexity of $$$O(n \\log n)$$$, though with a high constant factor. "
}{
    "name": "Cats Transport",
    "code": [
        "311",
        "B"
    ],
    "tags": [
        "data structures",
        "dp"
    ],
    "difficulty": 2400,
    "statement": "Zxr960115 is owner of a large farm. He feeds m cute cats and employs p feeders. There's a straight road across the farm and n hills along the road, numbered from 1 to n from left to right. The distance between hill i and (i - 1) is di meters. The feeders live in hill 1.One day, the cats went out to play. Cat i went on a trip to hill hi, finished its trip at time ti, and then waited at hill hi for a feeder. The feeders must take all the cats. Each feeder goes straightly from hill 1 to n without waiting at a hill and takes all the waiting cats at each hill away. Feeders walk at a speed of 1 meter per unit time and are strong enough to take as many cats as they want.For example, suppose we have two hills (d2 = 1) and one cat that finished its trip at time 3 at hill 2 (h1 = 2). Then if the feeder leaves hill 1 at time 2 or at time 3, he can take this cat, but if he leaves hill 1 at time 1 he can't take it. If the feeder leaves hill 1 at time 2, the cat waits him for 0 time units, if the feeder leaves hill 1 at time 3, the cat waits him for 1 time units.Your task is to schedule the time leaving from hill 1 for each feeder so that the sum of the waiting time of all cats is minimized.",
    "editorial": ""
}{
    "name": "Max and Bike",
    "code": [
        "594",
        "B"
    ],
    "tags": [
        "binary search",
        "geometry"
    ],
    "difficulty": 2500,
    "statement": "For months Maxim has been coming to work on his favorite bicycle. And quite recently he decided that he is ready to take part in a cyclists' competitions.He knows that this year n competitions will take place. During the i-th competition the participant must as quickly as possible complete a ride along a straight line from point si to point fi (si < fi).Measuring time is a complex process related to usage of a special sensor and a time counter. Think of the front wheel of a bicycle as a circle of radius r. Let's neglect the thickness of a tire, the size of the sensor, and all physical effects. The sensor is placed on the rim of the wheel, that is, on some fixed point on a circle of radius r. After that the counter moves just like the chosen point of the circle, i.e. moves forward and rotates around the center of the circle.At the beginning each participant can choose any point bi, such that his bike is fully behind the starting line, that is, bi < si - r. After that, he starts the movement, instantly accelerates to his maximum speed and at time tsi, when the coordinate of the sensor is equal to the coordinate of the start, the time counter starts. The cyclist makes a complete ride, moving with his maximum speed and at the moment the sensor's coordinate is equal to the coordinate of the finish (moment of time tfi), the time counter deactivates and records the final time. Thus, the counter records that the participant made a complete ride in time tfi - tsi.  Maxim is good at math and he suspects that the total result doesn't only depend on his maximum speed v, but also on his choice of the initial point bi. Now Maxim is asking you to calculate for each of n competitions the minimum possible time that can be measured by the time counter. The radius of the wheel of his bike is equal to r.",
    "editorial": ""
}{
    "name": "Four Segments",
    "code": [
        "846",
        "C"
    ],
    "tags": [
        "brute force",
        "data structures",
        "dp"
    ],
    "difficulty": 1800,
    "statement": "You are given an array of n integer numbers. Let sum(l, r) be the sum of all numbers on positions from l to r non-inclusive (l-th element is counted, r-th element is not counted). For indices l and r holds 0 \u2264 l \u2264 r \u2264 n. Indices in array are numbered from 0. For example, if a = [ - 5, 3, 9, 4], then sum(0, 1) =  - 5, sum(0, 2) =  - 2, sum(1, 4) = 16 and sum(i, i) = 0 for each i from 0 to 4.Choose the indices of three delimiters delim0, delim1, delim2 (0 \u2264 delim0 \u2264 delim1 \u2264 delim2 \u2264 n) and divide the array in such a way that the value of res = sum(0, delim0) - sum(delim0, delim1) + sum(delim1, delim2) - sum(delim2, n) is maximal. Note that some of the expressions sum(l, r) can correspond to empty segments (if l = r for some segment).",
    "editorial": "Imagine the same task but without the first term in sum. As the sum of the array is fixed, the best second segment should be the one with the greatest sum. This can be solved in O(n) with partial sums. When recalcing the best segment to end at position i, you should take minimal prefix sum from 0 to i inclusive (from the whole sum you want to subtract the lowest number). Now let's just iterate over all possible ends of the first segment and solve the task above on the array without this segment.Oveall complexity: O(n2)."
}{
    "name": "Divisibility Rules",
    "code": [
        "180",
        "B"
    ],
    "tags": [
        "math",
        "number theory"
    ],
    "difficulty": 2300,
    "statement": "Vasya studies divisibility rules at school. Here are some of them: Divisibility by 2. A number is divisible by 2 if and only if its last digit is divisible by 2 or in other words, is even. Divisibility by 3. A number is divisible by 3 if and only if the sum of its digits is divisible by 3. Divisibility by 4. A number is divisible by 4 if and only if its last two digits form a number that is divisible by 4. Divisibility by 5. A number is divisible by 5 if and only if its last digit equals 5 or 0. Divisibility by 6. A number is divisible by 6 if and only if it is divisible by 2 and 3 simultaneously (that is, if the last digit is even and the sum of all digits is divisible by 3). Divisibility by 7. Vasya doesn't know such divisibility rule. Divisibility by 8. A number is divisible by 8 if and only if its last three digits form a number that is divisible by 8. Divisibility by 9. A number is divisible by 9 if and only if the sum of its digits is divisible by 9. Divisibility by 10. A number is divisible by 10 if and only if its last digit is a zero. Divisibility by 11. A number is divisible by 11 if and only if the sum of digits on its odd positions either equals to the sum of digits on the even positions, or they differ in a number that is divisible by 11.Vasya got interested by the fact that some divisibility rules resemble each other. In fact, to check a number's divisibility by 2, 4, 5, 8 and 10 it is enough to check fulfiling some condition for one or several last digits. Vasya calls such rules the 2-type rules.If checking divisibility means finding a sum of digits and checking whether the sum is divisible by the given number, then Vasya calls this rule the 3-type rule (because it works for numbers 3 and 9).If we need to find the difference between the sum of digits on odd and even positions and check whether the difference is divisible by the given divisor, this rule is called the 11-type rule (it works for number 11).In some cases we should divide the divisor into several factors and check whether rules of different types (2-type, 3-type or 11-type) work there. For example, for number 6 we check 2-type and 3-type rules, for number 66 we check all three types. Such mixed divisibility rules are called 6-type rules. And finally, there are some numbers for which no rule works: neither 2-type, nor 3-type, nor 11-type, nor 6-type. The least such number is number 7, so we'll say that in such cases the mysterious 7-type rule works, the one that Vasya hasn't discovered yet. Vasya's dream is finding divisibility rules for all possible numbers. He isn't going to stop on the decimal numbers only. As there are quite many numbers, ha can't do it all by himself. Vasya asked you to write a program that determines the divisibility rule type in the b-based notation for the given divisor d.",
    "editorial": ""
}{
    "name": "Planar Perimeter",
    "code": [
        "1242",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "graphs"
    ],
    "difficulty": 3200,
    "statement": "Ujan has finally cleaned up his house and now wants to decorate the interior. He decided to place a beautiful carpet that would really tie the guest room together.He is interested in carpets that are made up of polygonal patches such that each side of a patch is either a side of another (different) patch, or is an exterior side of the whole carpet. In other words, the carpet can be represented as a planar graph, where each patch corresponds to a face of the graph, each face is a simple polygon. The perimeter of the carpet is the number of the exterior sides. Ujan considers a carpet beautiful if it consists of $$$f$$$ patches, where the $$$i$$$-th patch has exactly $$$a_i$$$ sides, and the perimeter is the smallest possible. Find an example of such a carpet, so that Ujan can order it!",
    "editorial": "If there is just a single face, just output it. Suppose there are at least $$$2$$$ faces.Let's say that we \"glue\" a cycle to a planar graph along $$$k$$$ edges if we place this cycle so that the graph and the cycle share $$$k$$$ edges on their perimeters.First, sort the numbers in decreasing order (then we have $$$a_1 \\geq a_2 \\geq \\ldots \\geq a_n$$$). By gluing any $$$a_i$$$ to the $$$a_1$$$ cycle, we can decrease the number of edges by at most $$$a_i-2$$$. Also note that the answer is always at least $$$3$$$, because there cannot be multiple edges between two vertices. Thus, if $$$a_1-2 \\geq \\sum_{i=2}^n (a_i-2)$$$, then the answer is $$$a_1 - \\sum_{i=2}^n (a_i-2)$$$ (we subtract $$$2$$$ from $$$a_1$$$ to keep the perimeter at least $$$3$$$: these are the $$$2$$$ edges that we don't glue anything to).Otherwise the answer is either $$$3$$$ or $$$4$$$ (depending on the parity of $$$\\sum_{i=1}^n a_i$$$). The algorithm to construct the graph: let $$$C := a_1$$$. Iterate $$$i$$$ from $$$2$$$ to $$$n$$$. While $$$(C-2) + (a_i-2) < \\sum_{j=i+1}^n (a_j-2)$$$, glue the $$$i$$$-th cycle with the graph along one edge ($$$C += (a_i-2)$$$). For the first $$$a_i$$$ such that this does not hold, glue it so that $$$\\sum_{j=i+1}^n (a_j-2) \\leq C-2 \\leq \\sum_{j=i+1}^n (a_j-2) + 1$$$. Afterwards just glue each remaining cycles $$$a_j$$$ along $$$a_j-1$$$ edges with the graph.There is one problem with this algorithm: it can happen that we add multiple edges between two vertices. This situation is as follows: suppose you are at some point of the algorithm with a planar graph that you're building. Suppose there is an edge between some vertices $$$u$$$ and $$$v$$$ on the current perimeter, and you now happen to glue a cycle $$$C$$$ along the edges between $$$u$$$ and $$$v$$$, and the last edge of the cycle $$$C$$$ you're gluing must connect $$$u$$$ and $$$v$$$. To solve this situation, take the vertex $$$u'$$$ adjacent to $$$u$$$ to the right on the perimeter, and the vertex $$$v'$$$ adjacent to $$$v$$$ also to the right on the perimeter. Now, $$$u'$$$ and $$$v'$$$ cannot be connected by an edge in the current graph, because then it would intersect the edge between $$$u$$$ and $$$v$$$. This would be a contradiction, because the graph is planar. Then you glue the cycle $$$C$$$ along the edges between $$$u'$$$ and $$$v'$$$.The complexity of the algorithm: $$$O(\\sum_{i=1}^n a_i)$$$. You should be careful with the implementation: for example, not to make perimeter equal to $$$2$$$ at some point or use some edge in more than two faces."
}{
    "name": "Download More RAM",
    "code": [
        "1629",
        "A"
    ],
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "difficulty": 800,
    "statement": "Did you know you can download more RAM? There is a shop with $$$n$$$ different pieces of software that increase your RAM. The $$$i$$$-th RAM increasing software takes $$$a_i$$$ GB of memory to run (temporarily, once the program is done running, you get the RAM back), and gives you an additional $$$b_i$$$ GB of RAM (permanently). Each software can only be used once. Your PC currently has $$$k$$$ GB of RAM.Note that you can't use a RAM-increasing software if it takes more GB of RAM to use than what you currently have.Since RAM is the most important thing in the world, you wonder, what is the maximum possible amount of RAM achievable?",
    "editorial": "Using some software is never bad. It always ends up increasing your RAM if you can use it. And for any possible order to use a set of software in, they all result in the same amount RAM in the end. So we can greedily go through the list, using software if you have enough RAM for it. After going through the list, your RAM may have increased, so maybe some of the software you couldn't use at the start is now usable. Therefore we have to go through the list again (now with the used software removed) until the RAM doesn't increase anymore. This results in time complexity $$$O(n^2)$$$, which is fine for these constraints.It turns out we don't actually need to go through the list of software more than once if we sort it by $$$a$$$. This results in $$$O(n \\log n)$$$ time complexity."
}{
    "name": "Diophantine equation",
    "code": [
        "530",
        "C"
    ],
    "tags": [
        "*special"
    ],
    "difficulty": 1500,
    "statement": "You are given an equation A * X + B * Y = C, A, B, C are positive integer coefficients, X and Y are variables which can have positive integer values only. Output the number of solutions of this equation and the solutions themselves.",
    "editorial": ""
}{
    "name": "The Number Of Good Substrings",
    "code": [
        "1217",
        "C"
    ],
    "tags": [
        "binary search",
        "bitmasks",
        "brute force"
    ],
    "difficulty": 1700,
    "statement": "You are given a binary string $$$s$$$ (recall that a string is binary if each character is either $$$0$$$ or $$$1$$$).Let $$$f(t)$$$ be the decimal representation of integer $$$t$$$ written in binary form (possibly with leading zeroes). For example $$$f(011) = 3, f(00101) = 5, f(00001) = 1, f(10) = 2, f(000) = 0$$$ and $$$f(000100) = 4$$$.The substring $$$s_{l}, s_{l+1}, \\dots , s_{r}$$$ is good if $$$r - l + 1 = f(s_l \\dots s_r)$$$.For example string $$$s = 1011$$$ has $$$5$$$ good substrings: $$$s_1 \\dots s_1 = 1$$$, $$$s_3 \\dots s_3 = 1$$$, $$$s_4 \\dots s_4 = 1$$$, $$$s_1 \\dots s_2 = 10$$$ and $$$s_2 \\dots s_4 = 011$$$. Your task is to calculate the number of good substrings of string $$$s$$$.You have to answer $$$t$$$ independent queries.",
    "editorial": "At first, lets precalc the array $$$nxt_1, nxt_2, \\dots , nxt_n$$$. The value of $$$nxt_i$$$ if equal the maximum position $$$j$$$ in range $$$1 \\dots i$$$ such that $$$s_j = 1$$$. After that lets iterate over the right boundary of substring and high $$$1$$$-bit position (denote it as $$$r$$$ and $$$l$$$ respectively).Note that if $$$r - l > 18$$$ then $$$f(l, r) > 2 \\cdot 10^5$$$.So we iterate over such pair $$$(l, r)$$$ that $$$1 \\le l \\le r \\le n$$$ and $$$r - l \\le 18$$$.Lets look at value $$$f(l, r)$$$. If $$$f(l, r) > r - l + 1$$$, then we have to increase the length of substring without increasing the value of $$$f(l, r)$$$. So we need to check if there exists a position $$$nl$$$ such that $$$f(nl, r) = f(l, r)$$$ and $$$r - nl + 1 = f(nl, r)$$$. This position exists if the condition $$$f(l, r) \\le r - nxt_{l - 1}$$$ is met ($$$nxt_0$$$ is equal to -1). "
}{
    "name": "Planning",
    "code": [
        "853",
        "A"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1500,
    "statement": "Helen works in Metropolis airport. She is responsible for creating a departure schedule. There are n flights that must depart today, the i-th of them is planned to depart at the i-th minute of the day.Metropolis airport is the main transport hub of Metropolia, so it is difficult to keep the schedule intact. This is exactly the case today: because of technical issues, no flights were able to depart during the first k minutes of the day, so now the new departure schedule must be created.All n scheduled flights must now depart at different minutes between (k + 1)-th and (k + n)-th, inclusive. However, it's not mandatory for the flights to depart in the same order they were initially scheduled to do so\u00a0\u2014 their order in the new schedule can be different. There is only one restriction: no flight is allowed to depart earlier than it was supposed to depart in the initial schedule.Helen knows that each minute of delay of the i-th flight costs airport ci burles. Help her find the order for flights to depart in the new schedule that minimizes the total cost for the airport.",
    "editorial": "We will show that following greedy is correct: let's for each moment of time use a plane, which can depart in this moment of time (and didn't depart earlier, of course) with minimal cost of delay. Proof is quite simple: it's required to minimize . You can notice that  is constant, so we just need to minimize . Consider the optimal solution when plane i departs at moment bi and solution by greedy algorithm in which plane i departs at moment ai. Let x be plane with minimal cx, such ax \u2260 bx. At any moment greedy algorithm takes avaliable plane with lowest cx, so ax < bx. Let y be a plane, such that by = ax. But cy >  = by, so bx\u00b7cx + by\u00b7cy >  = bx\u00b7cy + by\u00b7cx and it's possible to swap bx and by in optimal solution without loosing of optimality. By performing this operation many times it's possible to make bi = ai for each i and it means that greedy solution is optimal.To make this solution work fast you need to use some data structures to find optimal plane faster for each moment. This data structure should be able to add number into set, give value of minimal element in set and erase minimal number from set. For this purpose you can use heap (or someting like std::set or std::priority_queue in C++). "
}{
    "name": "Growing Mushrooms",
    "code": [
        "186",
        "B"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 1200,
    "statement": "Each year in the castle of Dwarven King there is a competition in growing mushrooms among the dwarves. The competition is one of the most prestigious ones, and the winner gets a wooden salad bowl. This year's event brought together the best mushroom growers from around the world, so we had to slightly change the rules so that the event gets more interesting to watch.Each mushroom grower has a mushroom that he will grow on the competition. Under the new rules, the competition consists of two parts. The first part lasts t1 seconds and the second part lasts t2 seconds. The first and the second part are separated by a little break.After the starting whistle the first part of the contest starts, and all mushroom growers start growing mushrooms at once, each at his individual speed of vi meters per second. After t1 seconds, the mushroom growers stop growing mushrooms and go to have a break. During the break, for unexplained reasons, the growth of all mushrooms is reduced by k percent. After the break the second part of the contest starts and all mushrooms growers at the same time continue to grow mushrooms, each at his individual speed of ui meters per second. After a t2 seconds after the end of the break, the competition ends. Note that the speeds before and after the break may vary.Before the match dwarf Pasha learned from all participants, what two speeds they have chosen. However, the participants did not want to disclose to him all their strategy and therefore, did not say in what order they will be using these speeds. That is, if a participant chose speeds ai and bi, then there are two strategies: he either uses speed ai before the break and speed bi after it, or vice versa.Dwarf Pasha really wants to win the totalizer. He knows that each participant chooses the strategy that maximizes the height of the mushroom. Help Dwarf Pasha make the final table of competition results.The participants are sorted in the result table by the mushroom height (the participants with higher mushrooms follow earlier in the table). In case of equal mushroom heights, the participants are sorted by their numbers (the participants with a smaller number follow earlier).",
    "editorial": ""
}{
    "name": "Binary Key",
    "code": [
        "332",
        "E"
    ],
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "difficulty": 2400,
    "statement": "Let's assume that p and q are strings of positive length, called the container and the key correspondingly, string q only consists of characters 0 and 1. Let's take a look at a simple algorithm that extracts message s from the given container p:i = 0;j = 0;s = <>;while i is less than the length of the string p{    if q[j] == 1, then add to the right of string s character p[i];    increase variables i, j by one;    if the value of the variable j equals the length of the string q, then j = 0; }In the given pseudocode i, j are integer variables, s is a string, '=' is an assignment operator, '==' is a comparison operation, '[]' is the operation of obtaining the string character with the preset index, '<>' is an empty string. We suppose that in all strings the characters are numbered starting from zero. We understand that implementing such algorithm is quite easy, so your task is going to be slightly different. You need to construct the lexicographically minimum key of length k, such that when it is used, the algorithm given above extracts message s from container p (otherwise find out that such key doesn't exist).",
    "editorial": ""
}{
    "name": "Minimum Possible LCM",
    "code": [
        "1154",
        "G"
    ],
    "tags": [
        "brute force",
        "greedy",
        "math",
        "number theory"
    ],
    "difficulty": 2200,
    "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$.Your problem is to find such pair of indices $$$i, j$$$ ($$$1 \\le i < j \\le n$$$) that $$$lcm(a_i, a_j)$$$ is minimum possible.$$$lcm(x, y)$$$ is the least common multiple of $$$x$$$ and $$$y$$$ (minimum positive number such that both $$$x$$$ and $$$y$$$ are divisors of this number).",
    "editorial": "I've heard about some very easy solutions with time complexity $$$O(a \\log a)$$$, where $$$a$$$ is the maximum value of $$$a_i$$$, but I will describe my solution with time complexity $$$O(nd)$$$, where $$$d$$$ is the maximum number of divisors of $$$a_i$$$.A very good upper-bound approximation of the number of divisors of $$$x$$$ is $$$\\sqrt[3]{x}$$$ so my solution works in $$$O(n \\sqrt[3]{a})$$$.Firstly, let's talk about the idea. The main idea is the following: for each number from $$$1$$$ to $$$10^7$$$, we want to find two minimum numbers in the array which are divisible by this number. Then we can find the answer among all such divisors that have at least two multiples in the array.Let's write a function $$$add(idx)$$$ which will try to add the number $$$a_{idx}$$$ to all its divisors. The easiest way to do it is iterate over all divisors in time $$$O(\\sqrt{a_{idx}})$$$ and add it somehow. But it is too slow. Let's improve it somehow. How can we skip numbers that aren't divisors of $$$a_{idx}$$$? Let's build an Eratosthenes sieve (I highly recommended one with time complexity $$$O(n)$$$ because the sieve with time complexity $$$O(n \\log \\log n)$$$ is about twice slower on such constraints) which will maintain the minimum divisor for each number from $$$1$$$ to $$$10^7$$$ (the linear sieve builds this array automatically in its implementation). Then we can factorize the number in $$$O(\\log a_{idx})$$$ and iterate over all its divisors using simple recursive function.And the last thing I should notice \u2014 this solution can give TLE and require some constant optimizations. I recommended to use pair of integers (or arrays of size two) for each divisor and to add numbers using a few if-statements."
}{
    "name": "Border",
    "code": [
        "1010",
        "C"
    ],
    "tags": [
        "number theory"
    ],
    "difficulty": 1800,
    "statement": "Astronaut Natasha arrived on Mars. She knows that the Martians are very poor aliens. To ensure a better life for the Mars citizens, their emperor decided to take tax from every tourist who visited the planet. Natasha is the inhabitant of Earth, therefore she had to pay the tax to enter the territory of Mars.There are $$$n$$$ banknote denominations on Mars: the value of $$$i$$$-th banknote is $$$a_i$$$. Natasha has an infinite number of banknotes of each denomination.Martians have $$$k$$$ fingers on their hands, so they use a number system with base $$$k$$$. In addition, the Martians consider the digit $$$d$$$ (in the number system with base $$$k$$$) divine. Thus, if the last digit in Natasha's tax amount written in the number system with the base $$$k$$$ is $$$d$$$, the Martians will be happy. Unfortunately, Natasha does not know the Martians' divine digit yet.Determine for which values $$$d$$$ Natasha can make the Martians happy.Natasha can use only her banknotes. Martians don't give her change.",
    "editorial": "Note that the condition \"the last digit in the record of Natasha's tax amount in the number system with the base $$$k$$$ will be $$$d$$$\" is equivalent to the condition \"the remainder of dividing the tax on $$$k$$$ will be $$$d$$$\".Let $$$g=GCD(a_1,a_2,\\ldots,a_n)$$$. It is stated that the original problem is equivalent to the problem where $$$n=1$$$ and the only banknote is $$$g$$$.Evidence. We prove this with the help of the B\u00e9zout's identity. It follows that an equation of the form $$$a_1$$$$$$x_1+a_2$$$$$$x_2+\\dots+a_n$$$$$$x_n=c$$$, where at least one of the parameters $$$a_1,a_2,\\dots,a_n$$$ is not zero, has a solution in integers if and only if $$$c \\hspace{2pt} \\vdots \\hspace{2pt} GCD(a_1,a_2,\u2026,a_n)$$$. Then in this task Natasha can pay $$$x_i$$$ banknotes of the $$$i$$$-th nominal value for each $$$i$$$, where $$$1\\le i\\le n$$$, and the amount of tax ($$$a_1$$$$$$x_1+a_2$$$$$$x_2+\\dots+a_n$$$$$$x_n$$$) can be any number $$$c$$$, multiple $$$g$$$. (Here some $$$x_i<0$$$, But Natasha can add for each par a sufficiently large number, multiple $$$k$$$, that $$$x_i$$$ became greater than zero, the balance from dividing the amount of tax on $$$k$$$ from this will not change.) Therefore, you can replace all pars with one par $$$g$$$ and the answer from this will not change.Now we can sort out all the numbers of the form $$$gx\\bmod k$$$, where $$$0\\le x<k$$$ (further the remainder of the sum, divided by $$$k$$$ will cycle repeatedly) and output them in ascending order.Complexity: $$$O(n+\\log m+k\\log k)$$$, where $$$m$$$ is the greatest $$$a_i$$$.Bonus. Try to improve the complexity to $$$O(n+k)$$$."
}{
    "name": "Take a Guess",
    "code": [
        "1556",
        "D"
    ],
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "interactive",
        "math"
    ],
    "difficulty": 1800,
    "statement": "  This is an interactive taskWilliam has a certain sequence of integers $$$a_1, a_2, \\dots, a_n$$$ in his mind, but due to security concerns, he does not want to reveal it to you completely. William is ready to respond to no more than $$$2 \\cdot n$$$ of the following questions:  What is the result of a bitwise AND of two items with indices $$$i$$$ and $$$j$$$ ($$$i \\neq j$$$)  What is the result of a bitwise OR of two items with indices $$$i$$$ and $$$j$$$ ($$$i \\neq j$$$) You can ask William these questions and you need to find the $$$k$$$-th smallest number of the sequence.Formally the $$$k$$$-th smallest number is equal to the number at the $$$k$$$-th place in a 1-indexed array sorted in non-decreasing order. For example in array $$$[5, 3, 3, 10, 1]$$$ $$$4$$$th smallest number is equal to $$$5$$$, and $$$2$$$nd and $$$3$$$rd are $$$3$$$.",
    "editorial": "To solve this problem, we can use the fact that $$$a+b=(a$$$ or $$$b) + (a$$$ and $$$b)$$$.Then we can determine the first $$$3$$$ numbers in $$$6$$$ operations using the sums $$$a_{01} = a_0 + a_1$$$, $$$a_{12} = a_1 + a_2$$$ and $$$a_{02} = a_0 + a_2$$$. Using the formula $$$a_1 = \\frac{a_{01}+a_{12}-a_{02}}{2}$$$, $$$a_0 = a_{01} - a_1$$$ and $$$a_2 = a_{12} - a_1$$$.Knowing one of the numbers, it is quite simple to find all the other numbers using the same principle by using $$$2 \\cdot n$$$ operations. Then we just need to sort the resulting array and output the k-th element."
}{
    "name": "City Day",
    "code": [
        "1199",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "For years, the Day of city N was held in the most rainy day of summer. New mayor decided to break this tradition and select a not-so-rainy day for the celebration. The mayor knows the weather forecast for the $$$n$$$ days of summer. On the $$$i$$$-th day, $$$a_i$$$ millimeters of rain will fall. All values $$$a_i$$$ are distinct.The mayor knows that citizens will watch the weather $$$x$$$ days before the celebration and $$$y$$$ days after. Because of that, he says that a day $$$d$$$ is not-so-rainy if $$$a_d$$$ is smaller than rain amounts at each of $$$x$$$ days before day $$$d$$$ and and each of $$$y$$$ days after day $$$d$$$. In other words, $$$a_d < a_j$$$ should hold for all $$$d - x \\le j < d$$$ and $$$d < j \\le d + y$$$. Citizens only watch the weather during summer, so we only consider such $$$j$$$ that $$$1 \\le j \\le n$$$.Help mayor find the earliest not-so-rainy day of summer.",
    "editorial": "$$$x$$$ and $$$y$$$ are small, so we can explicitly check every day. Complexity $$$O(n(x+y))$$$."
}{
    "name": "Shooshuns and Sequence ",
    "code": [
        "222",
        "A"
    ],
    "tags": [
        "brute force",
        "implementation"
    ],
    "difficulty": 1200,
    "statement": "One day shooshuns found a sequence of n integers, written on a blackboard. The shooshuns can perform one operation with it, the operation consists of two steps:  Find the number that goes k-th in the current sequence and add the same number to the end of the sequence;  Delete the first number of the current sequence. The shooshuns wonder after how many operations all numbers on the board will be the same and whether all numbers will ever be the same.",
    "editorial": ""
}{
    "name": "Alice and the List of Presents",
    "code": [
        "1236",
        "B"
    ],
    "tags": [
        "combinatorics",
        "math"
    ],
    "difficulty": 1500,
    "statement": "Alice got many presents these days. So she decided to pack them into boxes and send them to her friends.There are $$$n$$$ kinds of presents. Presents of one kind are identical (i.e. there is no way to distinguish two gifts of the same kind). Presents of different kinds are different (i.e. that is, two gifts of different kinds are distinguishable). The number of presents of each kind, that Alice has is very big, so we can consider Alice has an infinite number of gifts of each kind.Also, there are $$$m$$$ boxes. All of them are for different people, so they are pairwise distinct (consider that the names of $$$m$$$ friends are written on the boxes). For example, putting the first kind of present into the first box but not into the second box, is different from putting the first kind of present into the second box but not into the first box.Alice wants to pack presents with the following rules:  She won't pack more than one present of each kind into the same box, so each box should contain presents of different kinds (i.e. each box contains a subset of $$$n$$$ kinds, empty boxes are allowed);  For each kind at least one present should be packed into some box. Now Alice wants to know how many different ways to pack the presents exists. Please, help her and calculate this number. Since the answer can be huge, output it by modulo $$$10^9+7$$$.See examples and their notes for clarification.",
    "editorial": "The answer is $$$(2^m-1)^n$$$.If we consider each present, it may contain only in the first box, in the second ... both in the first and second box, in the first and the third one ... in the first,the second and the third one ... There are $$$2^m-1$$$ ways.There are $$$n$$$ presents, so there are $$$(2^m-1)^n$$$ ways in total according to the Multiplication Principle."
}{
    "name": "Linguistics",
    "code": [
        "1685",
        "B"
    ],
    "tags": [
        "greedy",
        "implementation",
        "sortings",
        "strings"
    ],
    "difficulty": 2000,
    "statement": "Alina has discovered a weird language, which contains only $$$4$$$ words: $$$\\texttt{A}$$$, $$$\\texttt{B}$$$, $$$\\texttt{AB}$$$, $$$\\texttt{BA}$$$. It also turned out that there are no spaces in this language: a sentence is written by just concatenating its words into a single string.Alina has found one such sentence $$$s$$$ and she is curious: is it possible that it consists of precisely $$$a$$$ words $$$\\texttt{A}$$$, $$$b$$$ words $$$\\texttt{B}$$$, $$$c$$$ words $$$\\texttt{AB}$$$, and $$$d$$$ words $$$\\texttt{BA}$$$?In other words, determine, if it's possible to concatenate these $$$a+b+c+d$$$ words in some order so that the resulting string is $$$s$$$. Each of the $$$a+b+c+d$$$ words must be used exactly once in the concatenation, but you can choose the order in which they are concatenated.",
    "editorial": "For the answer to be $$$\\texttt{YES}$$$ the frequency of the character $$$\\texttt{A}$$$ in the $$$a+b+c+d$$$ words must coincide with its frequency in the sentence $$$s$$$, which is equivalent to the condition $$$a + c + d = \\#\\{i:\\, s_i = \\texttt{A}\\}$$$. From now on we may assume that this is true.Notice that the answer to the problem is $$$\\texttt{YES}$$$ if and only if it is possible to tile the string $$$s$$$ with $$$c$$$ copies of $$$\\texttt{AB}$$$ and $$$d$$$ copies of $$$\\texttt{BA}$$$ so that all the $$$c+d$$$ substrings are disjoint. Indeed one can simply fill the remaining characters of $$$s$$$ with the $$$a$$$ copies of $$$\\texttt{A}$$$ and the $$$b$$$ copies of $$$\\texttt{B}$$$ (we are sure that the number of characters $$$\\texttt{A}$$$ and $$$\\texttt{B}$$$ is correct because of the initial check). Moreover, if $$$s_i = s_{i+1}$$$, then clearly any tiling with $$$\\texttt{AB}$$$ and $$$\\texttt{BA}$$$ of $$$s$$$ cannot cover with a single tile both $$$s_i$$$ and $$$s_{i+1}$$$; therefore we can split the string $$$s$$$ between $$$s_i$$$ and $$$s_{i+1}$$$ and try to tile the two resulting substrings. By repeating this argument we will end up with many alternating strings (a string $$$t$$$ is alternating if $$$t_{i} \\not= t_{i+1}$$$ for all $$$1\\le i < |t|$$$). So, we have reduced the problem to the following one:Subproblem: You are given many alternating strings, can you find in these strings $$$c$$$ substrings equal to $$$\\texttt{AB}$$$ and $$$d$$$ subtrings equal to $$$\\texttt{BA}$$$ such that all the $$$c+d$$$ substrings are disjoint?In order to solve the problem let us analyze what happens when only one alternating string is present. Given an alternating string $$$t$$$, we say that the pair $$$(x, y)$$$ is valid if we can find in $$$t$$$ $$$x$$$ substrings equal to $$$\\texttt{AB}$$$ and $$$y$$$ substrings equal to $$$\\texttt{BA}$$$ so that the $$$x+y$$$ substrings are disjoint. Let us consider various cases:   If $$$|t|=2k+1$$$, then $$$(x, y)$$$ is valid if and only if $$$x + y \\le k$$$. Let $$$f(k):=\\{(x, y):\\, 0\\le x,y\\text{ and } x + y\\le k\\}$$$.  If $$$|t|=2k$$$ and $$$t_1 = \\texttt{A}$$$, then $$$(x, y)$$$ is valid if and only if $$$x+y\\le k-1$$$ or $$$(x, y) = (k, 0)$$$. Let $$$f_{AB}(k):= \\{(k, 0)\\}\\cup f(k-1)$$$.  If $$$|t|=2k$$$ and $$$t_1 = \\texttt{B}$$$, then $$$(x, y)$$$ is valid if and only if $$$x+y\\le k-1$$$ or $$$(x, y) = (0, k)$$$. Let $$$f_{BA}(k):= \\{(0, k)\\}\\cup f(k-1)$$$.  Loosely speaking, the alternating strings of type 2. and 3. have a bonus if they are tiled only with one of the strings $$$\\texttt{AB}$$$ and $$$\\texttt{BA}$$$.We will provide a proof for the correcteness of the following greedy algorithm.Greedy algorithm: Sort the strings of type $$$2$$$ by length and fill them, starting from the shortest, only with $$$\\texttt{AB}$$$ (i.e., find as many disjoint copies of $$$\\texttt{AB}$$$ as possible) until you reach $$$c$$$ or you finish them (a string of length $$$2k$$$ is filled with $$$k$$$ $$$\\texttt{AB}$$$). Do the same for the strings of type $$$3$$$ for the word $$$\\texttt{BA}$$$. At this point there are no more bonuses to use and you can just fill the remaining strings with $$$\\texttt{AB}$$$ and $$$\\texttt{BA}$$$ in the only reasonable way. If in the end, if you have found $$$c$$$ strings $$$\\texttt{AB}$$$ and $$$d$$$ strings $$$\\texttt{BA}$$$ then the answer is $$$\\texttt{YES}$$$, otherwise it is $$$\\texttt{NO}$$$.Let us provide a proof of the correctness of this algorithm. Let us remark that the proof of the correctness is in fact rather easy, but a bit cumbersome to write down. The strategy of the proof is to start from a solution and to show that the one constructed by the greedy algorithm is \"better\".Proof of the correctness of the greedy algorithm: Let $$$U, V, W$$$ be the multisets of lengths of strings of the first, second and third type respectively (according to the case division above). Then the problem is equivalent to understanding if $$$$$$ (c, d) \\in \\sum_{u\\in U} f(u) + \\sum_{v\\in V} f_{AB}(v) + \\sum_{w\\in W} f_{BA}(w). $$$$$$Assume that the answer is $$$\\texttt{YES}$$$ and consider a solution of the problem, i.e. a choice of a valid pair for each of the $$$|U|+|V|+|W|$$$ alternating strings. Let $$$V = V'\\sqcup V' '$$$ where $$$V'$$$ corresponds to the lengths of the strings in $$$V$$$ where the valid pair of the solution is given by $$$(k, 0)$$$ ($$$k$$$ is the length of the string). Partition $$$W=W'\\sqcup W' '$$$ analogously. Then we have $$$$$$ (c, d) \\in \\sum_{u\\in U} f(u) + \\sum_{v'\\in V'} (v', 0) + \\sum_{v' '\\in V' '} f(v' ' - 1) + \\sum_{w'\\in W'} (0, w') + \\sum_{w' '\\in W' '} f(w' ' - 1) . $$$$$$Let us make a couple of observations:   For any $$$k_1, k_2$$$ it holds $$$f(k_1) + f(k_2) = f(k_1 + k_2)$$$.  If $$$k_1\\le k_2$$$, then $$$f(k_1) + (k_2, 0) \\subseteq (k_1, 0) + f(k_2)$$$ and also $$$f(k_1) + (0, k_2) \\subseteq (0, k_1) + f(k_2)$$$.  Thanks to the second observation we know that we may assume (up to changing the solution to a better one) that $$$V'$$$ contains the smaller elements of $$$V$$$ (i.e., $$$v'\\le v' '$$$ for each $$$v'\\in V', v' '\\in V' '$$$), and $$$W'$$$ contains the smaller elements of $$$W$$$. Then, applying the first observation, we reduce the problem to understanding if there is prefix $$$V'$$$ of $$$V$$$ (prefix in the sorted by length order) and a prefix $$$W'$$$ of $$$W$$$ such that $$$$$$ \\tag{$\\star$} (c, d) \\in f\\Bigg(\\sum_{u\\in U} k + \\sum_{v' '\\in V\\setminus V'} (v' ' - 1) + \\sum_{w' '\\in W\\setminus W'} (w' ' -1)\\Bigg) + \\bigg(\\sum_{v'\\in V'} v', 0\\bigg) + \\bigg(0, \\sum_{w'\\in W'} w'\\bigg). $$$$$$ It remains to show that we may assume that $$$V'$$$ is the largest prefix so that $$$\\sum V':= \\sum_{v'\\in V'}v' \\le c$$$ (and the analogous result for $$$W'$$$) as this implies the correctness of the greedy algorithm (i.e., if there is a valid solution then the one constructed by the algorithm is a solution). Assume, by contradiction, that there is $$$v' '\\not\\in V'$$$ such that $$$v' ' + \\sum V' \\le c$$$. By $$$(\\star)$$$ we know $$$$$$ \\Big(c-\\sum V', d-\\sum W'\\Big) \\in f(s),$$$$$$ where $$$s=\\sum_{u\\in U} k + \\sum_{v' '\\in V\\setminus V'} (v' ' - 1) + \\sum_{w' '\\in W\\setminus W'} (w' ' -1)$$$. Thus, we deduce $$$$$$ \\Big(c-(\\sum V' + v' '), d-\\sum W'\\Big) \\in f(s-(v' '-1)),$$$$$$ which is equivalent to saying that ($$$\\star$$$) holds also if we replace $$$V'$$$ with $$$V'\\cup\\{v' '\\}$$$ which is exactly what we wanted to prove"
}{
    "name": "Dreamoon and Stairs",
    "code": [
        "476",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "Dreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. What is the minimal number of moves making him climb to the top of the stairs that satisfies his condition?",
    "editorial": ""
}{
    "name": "Sweet Problem",
    "code": [
        "1263",
        "A"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1100,
    "statement": "You have three piles of candies: red, green and blue candies:  the first pile contains only red candies and there are $$$r$$$ candies in it,  the second pile contains only green candies and there are $$$g$$$ candies in it,  the third pile contains only blue candies and there are $$$b$$$ candies in it. Each day Tanya eats exactly two candies of different colors. She is free to choose the colors of eaten candies: the only restriction that she can't eat two candies of the same color in a day.Find the maximal number of days Tanya can eat candies? Each day she needs to eat exactly two candies.",
    "editorial": "Sort the values of $$$r$$$, $$$g$$$, $$$b$$$ such that $$$r \\geq g \\geq b$$$. Now consider two cases.If $$$r \\geq g + b$$$, then Tanya can take $$$g$$$ candies from piles $$$r$$$ and $$$g$$$, and then\u00a0\u2014 $$$b$$$ candies from piles $$$r$$$ and $$$b$$$. After that there may be a bunch of candies left in the pile $$$r$$$ that Tanya won't be able to eat, so the answer is $$$g + b$$$.Otherwise, we need to achieve the equality of the piles $$$r$$$, $$$g$$$, $$$b$$$. First, we make equal $$$r$$$ and $$$g$$$ by eating $$$r - g$$$ from the piles $$$r$$$ and $$$b$$$ (this can always be done since $$$r < g + b$$$). Then we make equal the piles $$$g$$$, $$$b$$$ by eating $$$g - b$$$ from the piles $$$r$$$ and $$$g$$$. After that, $$$r = g = b$$$, and we can get three different cases.  $$$r = g = b = 0$$$\u00a0\u2014 nothing needs to be done, Tanya has already eaten all the sweets;  $$$r = g = b = 1$$$\u00a0\u2014 you can take candy from any of two piles so in the end there will always be one candy left;  $$$r = g = b \\geq 2$$$\u00a0\u2014 we reduce all the piles by $$$2$$$, taking, for example, a candy from piles $$$r$$$ and $$$g$$$, $$$g$$$ and $$$b$$$, $$$r$$$ and $$$b$$$. With such actions, Tanya eventually reaches the two previous cases, since the sizes of the piles are reduced by 2. Since with this strategy we always have 0 or 1 candy at the end, Tanya will be able to eat candies for $$$\\lfloor \\frac{r + g + b}{2} \\rfloor$$$ days."
}{
    "name": "Yellow Cards",
    "code": [
        "1215",
        "A"
    ],
    "tags": [
        "greedy",
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "The final match of the Berland Football Cup has been held recently. The referee has shown $$$n$$$ yellow cards throughout the match. At the beginning of the match there were $$$a_1$$$ players in the first team and $$$a_2$$$ players in the second team.The rules of sending players off the game are a bit different in Berland football. If a player from the first team receives $$$k_1$$$ yellow cards throughout the match, he can no longer participate in the match \u2014 he's sent off. And if a player from the second team receives $$$k_2$$$ yellow cards, he's sent off. After a player leaves the match, he can no longer receive any yellow cards. Each of $$$n$$$ yellow cards was shown to exactly one player. Even if all players from one team (or even from both teams) leave the match, the game still continues.The referee has lost his records on who has received each yellow card. Help him to determine the minimum and the maximum number of players that could have been thrown out of the game.",
    "editorial": "At first, if $$$k_1 > k_2$$$, then we swap $$$k_1$$$ with $$$k_2$$$ and $$$a_1$$$ with $$$a_2$$$, so the number of yellow cards required to send a player of the first team off is not greater than the same value for the second team. If all players from the first team receive $$$k_1 - 1$$$ cards each and all players from the second team receive $$$k_2 - 1$$$ cards each, we will minimize the number of players who left the game. Let $$$cnt = a_1 \\cdot (k_1 - 1) + a_2 \\cdot (k_2 - 1)$$$. If $$$cnt \\le 0$$$, then the minimum number of players who left the game is equal to $$$0$$$. In the other case, if any player receivse one more yellow card, he leaves the game. So the minimum number of players who left the game is $$$(n - cnt)$$$.When we maximize the number of players who left the game, at first we should give cards to players in the first team, and then give cards to players in the second team. So, if $$$n \\le a_1 \\cdot k_1$$$, the answer is $$$\\lfloor \\frac{n}{k_1} \\rfloor$$$. In the other case, the answer is $$$a_1 + \\lfloor \\frac{n - a_1 \\cdot k_1}{k_2} \\rfloor$$$. "
}{
    "name": "Magic Tree",
    "code": [
        "1193",
        "B"
    ],
    "tags": [
        "*special",
        "data structures",
        "dp",
        "trees"
    ],
    "difficulty": "",
    "statement": "We have a magic tree: a rooted tree on $$$n$$$ vertices. The vertices are numbered $$$1$$$ through $$$n$$$. Vertex $$$1$$$ is the root.The magic tree gives us magic fruit. The fruit only grows in vertices of the tree other than the root. Each vertex contains at most one piece of fruit.It is now day 0 and no fruit is ripe yet. Each fruit will only be ripe for a single day. For each fruit, we are given the vertex $$$v_j$$$ where it grows, the day $$$d_j$$$ on which it will be ripe, and the amount $$$w_j$$$ of magic juice we can extract from it if we harvest it when it is ripe.The fruits have to be harvested by cutting some branches of the tree. On each day, you may cut as many branches of the tree as you like. The parts of the tree you cut off will fall to the ground and you can collect all the ripe fruits they contain. All fruits that fall to the ground when they are not ripe are discarded and no magic juice is collected from them.Formally, on each day, you may erase some edges of the tree. Whenever you do so, the tree will split into multiple connected components. You then erase all components that do not contain the root and you harvest all ripe fruits those components contained.Given is a description of the tree together with the locations, ripening days and juiciness of all $$$m$$$ fruits. Calculate the maximum total amount of magic juice we can harvest from the tree.",
    "editorial": "The first couple subtasks are meant as a reward for understanding the problem statement.In the subtask 1, we can enumerate all subsets of fruit, decide whether this set is valid (i.e. it doesn't contain pair of fruits $$$u$$$, $$$v$$$ such that $$$u$$$ is an ancestor of $$$v$$$ and $$$u$$$ is ripe earlier than $$$v$$$) and output the maximum.If all fruit is in the leaves, all fruit can be harvested at proper times, so the answer is simply the total juiciness of all fruits.In subtask 3, the problem formulated on a path is equivalent to finding the longest non-decreasing subsequence in the list of ripening times along the path. Using any $$$\\mathcal O(n \\log n)$$$ solution gives the answer.Not very surprisingly, on a tree the task can be solved by a dynamic programming approach by processing the tree upwards from leaves to the root. The scoring rewards different solutions of how information is stored, merged and propagated in the tree.For the $$$O(n k)$$$ solution one calculates for each vertex $$$u$$$ and number of days $$$i$$$ the following quantity: $$$$$$C_{v, \\ell} = \\mbox{maximum total juiciness one can harvest from the subtree rooted at $v$ during the first $i$ days.}$$$$$$ The transition for parent $$$u$$$ and children $$$v_i$$$ is $$$$$$C'_{u, \\ell} = \\sum_{v_i} C_{v_i, \\ell}$$$$$$ $$$$$$C_{u, \\ell} = \\begin{cases} \\max( C'_{u, \\ell}, w_u + C'_{u, d_u}) & \\text{if fruit in $u$ is ripe at $d_u \\leq \\ell$} \\\\ C'_{u, \\ell} & \\text{otherwise} \\end{cases}$$$$$$ Obviously the above recurrence can be computed in $$$O(k\\cdot \\mathrm{\\#~children~of~} v)$$$ in a vertex $$$v$$$. As each vertex can be a child of only a single vertex the total time complexity is $$$O(nk)$$$.This solves subtasks $$$4$$$ and $$$5$$$, and if we also compress the coordinates and the tree, it solves subtask $$$6$$$.Improving the dynamic programmingWe will now do several small steps that will ultimately result in an $$$O(n\\log^2 n)$$$ solution.First of all note that for a fixed vertex $$$u$$$ the values $$$C_{u,i}$$$'s are non-decreasing function of $$$i$$$.A nontrivial observation is that there are not arbitrarily many distinct values of $$$C_{u,i}$$$'s. In particular, there are at most one more than the number of vertices in the subtree of $$$u$$$, as the steps in this function can occur only at days when a fruit is ripe. We can use this to obtain a sparse representaiton of $$$C_{u,i}$$$ which will be increasing.For example the following function t       1 2 3 4 5 ... kC[u,t]  0 2 2 3 4 ... 4 is compressed as 2 4 52 3 4If we represent these in a simple array we can do the merge of two sparse representations of the functions using two pointers. This can give us a solution in which we process a vertex $$$u$$$ in time proportional to the size of its subtree \u2013 i.e., worst-case $$$O(n^2)$$$.(Note that another related way to get an $$$O(n^2)$$$ solution when $$$k$$$ is much larger than $$$n$$$ is to do coordinate compression on the times when the fruits become ripe.)At this point we assume that our tree is a binary tree as arbitrary tree can be always converted into a binary tree. Hence we will only be merging two arrays into one.In order to do this efficiently we have to represent our sparse function in a different datastructure as we cannot afford to run both pointers on the full range of the larger array. This datastructure is a range tree \u2013 one stores the ranges where the function value is constant. To combine two trees, one can iterate over all ranges in one of the trees, and perform a range addition on the second tree. Two trees can thus be combined in $$$O(m \\log n)$$$, where $$$m$$$ is the size of the smaller of the trees. Merging a smaller structure into larger one is a well know trick that only adds a logarithmic factor. Furthermore, the act of adding a fruit to a representation can also be done in time $$$O(\\log n)$$$ by one lookup and one range addition.For subtask $$$7$$$, we don't even need a range tree \u2013 a simple multiset is enough. In this multiset we store the IDs of days in which a fruit can be harvest from a subtree. Each prefix of this multiset gives us the number of fruits that may be harvested until a particular day, although the set itself is not necessarily correct. Merging subtrees from two siblings is a simple smaller-to-larger merge. To process fruit that is in the root of a subtree, we first remove the earliest fruit that ripes after the fruit in the root, if any, and then add the fruit itself."
}{
    "name": "Mashtali: a Space Oddysey",
    "code": [
        "1610",
        "F"
    ],
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "graphs"
    ],
    "difficulty": 3000,
    "statement": "Lee was planning to get closer to Mashtali's heart to proceed with his evil plan(which we're not aware of, yet), so he decided to beautify Mashtali's graph. But he made several rules for himself. And also he was too busy with his plans that he didn't have time for such minor tasks, so he asked you for help.Mashtali's graph is an undirected weighted graph with $$$n$$$ vertices and $$$m$$$ edges with weights equal to either $$$1$$$ or $$$2$$$. Lee wants to direct the edges of Mashtali's graph so that it will be as beautiful as possible.Lee thinks that the beauty of a directed weighted graph is equal to the number of its Oddysey vertices. A vertex $$$v$$$ is an Oddysey vertex if $$$|d^+(v) - d^-(v)| = 1$$$, where $$$d^+(v)$$$ is the sum of weights of the outgoing from $$$v$$$ edges, and $$$d^-(v)$$$ is the sum of the weights of the incoming to $$$v$$$ edges.Find the largest possible beauty of a graph that Lee can achieve by directing the edges of Mashtali's graph. In addition, find any way to achieve it.Note that you have to orient each edge.",
    "editorial": "If there is a vertex $$$v$$$ connected to its neighbors $$$x$$$ and $$$y$$$ with same edge weights, we delete these edges and add a new edge between $$$x$$$ and $$$y$$$. So the number of edges decreases by 1.Now we solve the problem for our new graph recurrently.Then we check whether the assigned direction is from $$$x$$$ to $$$y$$$ or from $$$y$$$ to $$$x$$$. In the first case, we should delete this edge and add a directional edge from $$$x$$$ to $$$v$$$ and from $$$v$$$ to $$$y$$$. Otherwise, after deleting the edge we add a directional edge from $$$y$$$ to $$$v$$$ and from $$$v$$$ to $$$x$$$.After these changes, for every $$$v$$$, $$$d^+(v) - d^-(v)$$$ will not change.However if there is no such vertex, the graph contains some paths and cycles in which the weight of each path and cycle is 1 or 2 every other one.So we can direct edges of each cycle to produce a directed cycle and do the same thing for edges of each path in order to make a directed path.By doing this, every $$$v$$$ with odd $$$c_v$$$ will become Oddysey."
}{
    "name": "Battleship",
    "code": [
        "965",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1300,
    "statement": "Arkady is playing Battleship. The rules of this game aren't really important.There is a field of $$$n \\times n$$$ cells. There should be exactly one $$$k$$$-decker on the field, i.\u00a0e. a ship that is $$$k$$$ cells long oriented either horizontally or vertically. However, Arkady doesn't know where it is located. For each cell Arkady knows if it is definitely empty or can contain a part of the ship.Consider all possible locations of the ship. Find such a cell that belongs to the maximum possible number of different locations of the ship.",
    "editorial": "Let's compute for each cell four values: the number of cells where a part of the ship can be located to the right ($$$r$$$), to the left ($$$l$$$), up ($$$u$$$) and down ($$$d$$$), including the cell itself. Then, if $$$k > 1$$$, then there are $$$\\min(k, \\max(0, l + r - k)) + \\min(k, \\max(0, u + d - k))$$$ positions of the ship containing this cell, and if $$$k = 1$$$ it's easy to check whether this value is $$$1$$$ or $$$0$$$. After that you should just print the maximum among all cells. This solution works in $$$O(n^3)$$$."
}{
    "name": "Deleting Substrings",
    "code": [
        "392",
        "E"
    ],
    "tags": [],
    "difficulty": "",
    "statement": "SmallR likes a game called \"Deleting Substrings\". In the game you are given a sequence of integers w, you can modify the sequence and get points. The only type of modification you can perform is (unexpected, right?) deleting substrings. More formally, you can choose several contiguous elements of w and delete them from the sequence. Let's denote the sequence of chosen elements as wl, wl + 1, ..., wr. They must meet the conditions:  the equality |wi - wi + 1| = 1 must hold for all i (l \u2264 i < r);  the inequality 2\u00b7wi - wi + 1 - wi - 1 \u2265 0 must hold for all i (l < i < r). After deleting the chosen substring of w, you gain vr - l + 1 points. You can perform the described operation again and again while proper substrings exist. Also you can end the game at any time. Your task is to calculate the maximum total score you can get in the game.",
    "editorial": ""
}{
    "name": "Leha and security system",
    "code": [
        "794",
        "F"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 2800,
    "statement": "Bankopolis, the city you already know, finally got a new bank opened! Unfortunately, its security system is not yet working fine... Meanwhile hacker Leha arrived in Bankopolis and decided to test the system!Bank has n cells for clients' money. A sequence from n numbers a1, a2, ..., an describes the amount of money each client has. Leha wants to make requests to the database of the bank, finding out the total amount of money on some subsegments of the sequence and changing values of the sequence on some subsegments. Using a bug in the system, Leha can requests two types of queries to the database:  1 l r x y denoting that Leha changes each digit x to digit y in each element of sequence ai, for which l \u2264 i \u2264 r is holds. For example, if we change in number 11984381 digit 8 to 4, we get 11944341. It's worth noting that Leha, in order to stay in the shadow, never changes digits in the database to 0, i.e. y \u2260 0.  2 l r denoting that Leha asks to calculate and print the sum of such elements of sequence ai, for which l \u2264 i \u2264 r holds. As Leha is a white-hat hacker, he don't want to test this vulnerability on a real database. You are to write a similar database for Leha to test.",
    "editorial": "\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0431\u044b\u043b\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 y \u2265 1. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442 \u0441\u0432\u043e\u044e \u0434\u043b\u0438\u043d\u0443 \u0432 \u0445\u043e\u0434\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. \u042d\u0442\u043e \u0434\u0430\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u0430\u0432\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430\u0448\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u0446\u0438\u0444\u0440\u044b \u0438 \u0440\u0435\u0448\u0438\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u044f\u0434\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u043c\u0438 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\u043c\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0432\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 cnti \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440 i \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u0438 nexti \u2014 \u0446\u0438\u0444\u0440\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c i(\u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f).\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u043f\u0440\u043e\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u043d\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0442\u044c next \u0432 \u0441\u044b\u043d\u043e\u0432\u044c\u044f\u0445, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u043e\u0439: next[child][c] = next[v][next[child][c]], \u0433\u0434\u0435 v \u2014 \u043d\u0430\u0448\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u0430, child \u2014 \u0432\u0435\u0440\u0448\u0438\u043d\u0430 \u00ab\u0441\u044b\u043d\u00bb, c \u2014 \u0446\u0438\u0444\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c."
}{
    "name": "Least Prefix Sum",
    "code": [
        "1779",
        "C"
    ],
    "tags": [
        "data structures",
        "greedy"
    ],
    "difficulty": 1600,
    "statement": "Baltic, a famous chess player who is also a mathematician, has an array $$$a_1,a_2, \\ldots, a_n$$$, and he can perform the following operation several (possibly $$$0$$$) times:  Choose some index $$$i$$$ ($$$1 \\leq i \\leq n$$$);  multiply $$$a_i$$$ with $$$-1$$$, that is, set $$$a_i := -a_i$$$. Baltic's favorite number is $$$m$$$, and he wants $$$a_1 + a_2 + \\cdots + a_m$$$ to be the smallest of all non-empty prefix sums. More formally, for each $$$k = 1,2,\\ldots, n$$$ it should hold that $$$$$$a_1 + a_2 + \\cdots + a_k \\geq a_1 + a_2 + \\cdots + a_m.$$$$$$Please note that multiple smallest prefix sums may exist and that it is only required that $$$a_1 + a_2 + \\cdots + a_m$$$ is one of them.Help Baltic find the minimum number of operations required to make $$$a_1 + a_2 + \\cdots + a_m$$$ the least of all prefix sums. It can be shown that a valid sequence of operations always exists.",
    "editorial": "Try a greedy approach.What data structure supports inserting an element, finding the maximum and erasing the maximum? That is right, a binary heap, or STL priority_queue.Let pi=a1+a2+\u2026ai and suppose that px<pm for some x<m. Let x be the greatest such integer. Performing an operation to any element in the segment [1,x] does nothing since pm\u2212px stays the same. Similarly, performing an operation to any element in segment [m+1,n] does not affect it.A greedy idea is to choose the maximal element in segment [x+1,m] and perform an operation on it, because it decreases pm as much as possible. Repeat this process until pm eventually becomes less than or equal to px. It might happen that a new py such that py<pm and y<x emerges. In that case, simply repeat the algorithm until pm is less than or equal to any prefix sum in its \"left\".Suppose that px<pm and x>m now. The idea is the same, choose a minimal element in segment [m+1,x] and perform an operation on it as it increases px as much as possible. And repeat the algorithm as long as such x exists.To implement this, solve the two cases independently. Let's describe the first case as the second one is analogous. Iterate over i from m to 1 and maintain a priority queue. If pi<pm, pop the queue (possibly multiple times) and decrease pm accordingly (we simulate performing the \"optimal\" operations). Notice that one does not have to update any element other than pm. Add ai to the priority queue afterwards.The time complexity is O(nlogn)."
}{
    "name": "Write The Contest",
    "code": [
        "1056",
        "F"
    ],
    "tags": [
        "binary search",
        "dp",
        "math"
    ],
    "difficulty": 2500,
    "statement": "Polycarp, Arkady's friend, prepares to the programming competition and decides to write a contest. The contest consists of $$$n$$$ problems and lasts for $$$T$$$ minutes. Each of the problems is defined by two positive integers $$$a_i$$$ and $$$p_i$$$\u00a0\u2014 its difficulty and the score awarded by its solution.Polycarp's experience suggests that his skill level is defined with positive real value $$$s$$$, and initially $$$s=1.0$$$. To solve the $$$i$$$-th problem Polycarp needs $$$a_i/s$$$ minutes.Polycarp loves to watch series, and before solving each of the problems he will definitely watch one episode. After Polycarp watches an episode, his skill decreases by $$$10\\%$$$, that is skill level $$$s$$$ decreases to $$$0.9s$$$. Each episode takes exactly $$$10$$$ minutes to watch. When Polycarp decides to solve some problem, he firstly has to watch one episode, and only then he starts solving the problem without breaks for $$$a_i/s$$$ minutes, where $$$s$$$ is his current skill level. In calculation of $$$a_i/s$$$ no rounding is performed, only division of integer value $$$a_i$$$ by real value $$$s$$$ happens.Also, Polycarp can train for some time. If he trains for $$$t$$$ minutes, he increases his skill by $$$C \\cdot t$$$, where $$$C$$$ is some given positive real constant. Polycarp can train only before solving any problem (and before watching series). Duration of the training can be arbitrary real value.Polycarp is interested: what is the largest score he can get in the contest? It is allowed to solve problems in any order, while training is only allowed before solving the first problem.",
    "editorial": "Firstly, if we fix some set of problems to solve, it's always optimal to solve them from the hardest one to the easiest one. That implies a solution which processes all problems and decides which of them will be solved in sorted order.Secondly, suppose Polycarp doesn't train at all, and for some fixed set of $$$k$$$ problems it will take him $$$10k + m$$$ minutes, where $$$10k$$$ is the time spent on watching the series, and $$$m$$$ is the time spent on actually solving the problems. If Polycarp would raise his skill to $$$s$$$ before solving all the problems, then it would take him $$$10k + \\frac{m}{s}$$$ minutes to solve the same set of problems in the same order. So if we fix a set of problems and compute $$$m$$$ for it, it's easy to see that if Polycarp trains for $$$t$$$ minutes, then it will take him $$$10k + \\frac{m}{1 + Ct} + t$$$ minutes to train and solve all the problems. This function $$$f(t) = 10k + \\frac{m}{1 + Ct} + t$$$ can be minimized with ternary search or some pen and paper work.This function also gives us the following: among two sets of problems with equal total score and equal number of problems it's optimal to choose the set having smaller value of $$$m$$$. So we can write a knapsack-like dynamic programming: $$$dp_{x, k}$$$ \u2014 the smallest possible value of $$$m$$$ for a set of $$$k$$$ problems with total score $$$x$$$. After computing these dynamic programming values, for a given pair $$$(x, k)$$$ it's easy to check if the time required to obtain this result does not exceed $$$T$$$: just minimize the function $$$f(t) = 10k + \\frac{dp_{x, k}}{1 + Ct} + t$$$."
}{
    "name": "Card Constructions",
    "code": [
        "1345",
        "B"
    ],
    "tags": [
        "binary search",
        "brute force",
        "dp",
        "math"
    ],
    "difficulty": 1100,
    "statement": "A card pyramid of height $$$1$$$ is constructed by resting two cards against each other. For $$$h>1$$$, a card pyramid of height $$$h$$$ is constructed by placing a card pyramid of height $$$h-1$$$ onto a base. A base consists of $$$h$$$ pyramids of height $$$1$$$, and $$$h-1$$$ cards on top. For example, card pyramids of heights $$$1$$$, $$$2$$$, and $$$3$$$ look as follows:  You start with $$$n$$$ cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?",
    "editorial": "Let's count the number of cards in a pyramid of height $$$h$$$. There are $$$2(1+2+3+\\cdots+h)$$$ cards standing up, and there are $$$0+1+2+\\cdots+(h-1)$$$ horizontal cards. So, there are $$$2\\frac{h(h+1)}{2}+\\frac{(h-1)h}{2}=\\frac{3}{2}h^2+\\frac12 h$$$ cards total. Using this formula, we can quickly find the largest height $$$h$$$ that uses at most $$$n$$$ cards.The quadratic formula or binary search can be used here, but are unnecessary. Simply iterating through all $$$h$$$ values works in $$$O(\\sqrt n)$$$ time per test.It's enough to see that this takes $$$O(t\\sqrt N)$$$ time overall, where $$$N$$$ is the sum of $$$n$$$ across all test cases. But interestingly, we can argue for a tighter bound of $$$O(\\sqrt{tN})$$$ due to the Cauchy-Schwarz Inequality:$$$$$$\\sum_{i=1}^t \\left(1\\cdot \\sqrt{n_i}\\right)\\le \\sqrt{\\left(\\sum_{i=1}^t1^2\\right)\\left(\\sum_{i=1}^t\\left(\\sqrt n_i\\right)^2\\right)}=\\sqrt{tN}$$$$$$"
}{
    "name": "Phoenix and Beauty",
    "code": [
        "1348",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "sortings"
    ],
    "difficulty": 1400,
    "statement": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length\u00a0$$$k$$$ have the same sum. A subarray of an array is any sequence of consecutive elements.Phoenix currently has an array $$$a$$$ of length $$$n$$$. He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between $$$1$$$ and $$$n$$$ inclusive. Integers may be inserted anywhere (even before the first or after the last element), and he is not trying to minimize the number of inserted integers.",
    "editorial": "For an array to be beautiful for some $$$k$$$, the array must be periodic with period $$$k$$$. If there exists more than $$$k$$$ distinct numbers in the array $$$a$$$, there is no answer and we print -1 (because the array cannot be periodic with period $$$k$$$). Otherwise, we propose the following construction.Consider a list of all the distinct numbers in array $$$a$$$. If there are less than $$$k$$$ of them, we will append some $$$1$$$s (or any other number) until the list has size $$$k$$$. We can just print this list $$$n$$$ times. The length of our array $$$b$$$ is $$$nk$$$, which never exceeds $$$10^4$$$. Array $$$b$$$ can always be constructed by inserting some numbers into array $$$a$$$ because every number in $$$a$$$ corresponds to one list.Time complexity for each test case: $$$O(n \\log{n}+nk)$$$"
}{
    "name": "Settlers' Training",
    "code": [
        "63",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1200,
    "statement": "In a strategic computer game \"Settlers II\" one has to build defense structures to expand and protect the territory. Let's take one of these buildings. At the moment the defense structure accommodates exactly n soldiers. Within this task we can assume that the number of soldiers in the defense structure won't either increase or decrease.Every soldier has a rank \u2014 some natural number from 1 to k. 1 stands for a private and k stands for a general. The higher the rank of the soldier is, the better he fights. Therefore, the player profits from having the soldiers of the highest possible rank.To increase the ranks of soldiers they need to train. But the soldiers won't train for free, and each training session requires one golden coin. On each training session all the n soldiers are present.At the end of each training session the soldiers' ranks increase as follows. First all the soldiers are divided into groups with the same rank, so that the least possible number of groups is formed. Then, within each of the groups where the soldiers below the rank k are present, exactly one soldier increases his rank by one.You know the ranks of all n soldiers at the moment. Determine the number of golden coins that are needed to increase the ranks of all the soldiers to the rank k.",
    "editorial": ""
}{
    "name": "Days of Floral Colours",
    "code": [
        "848",
        "E"
    ],
    "tags": [
        "combinatorics",
        "divide and conquer",
        "dp",
        "fft",
        "math"
    ],
    "difficulty": 3400,
    "statement": "The Floral Clock has been standing by the side of Mirror Lake for years. Though unable to keep time, it reminds people of the passage of time and the good old days.On the rim of the Floral Clock are 2n flowers, numbered from 1 to 2n clockwise, each of which has a colour among all n possible ones. For each colour, there are exactly two flowers with it, the distance between which either is less than or equal to 2, or equals n. Additionally, if flowers u and v are of the same colour, then flowers opposite to u and opposite to v should be of the same colour as well \u2014 symmetry is beautiful!Formally, the distance between two flowers is 1 plus the number of flowers on the minor arc (or semicircle) between them. Below is a possible arrangement with n = 6 that cover all possibilities.  The beauty of an arrangement is defined to be the product of the lengths of flower segments separated by all opposite flowers of the same colour. In other words, in order to compute the beauty, we remove from the circle all flowers that have the same colour as flowers opposite to them. Then, the beauty is the product of lengths of all remaining segments. Note that we include segments of length 0 in this product. If there are no flowers that have the same colour as flower opposite to them, the beauty equals 0. For instance, the beauty of the above arrangement equals 1 \u00d7 3 \u00d7 1 \u00d7 3 = 9 \u2014 the segments are {2}, {4, 5, 6}, {8} and {10, 11, 12}.While keeping the constraints satisfied, there may be lots of different arrangements. Find out the sum of beauty over all possible arrangements, modulo 998 244 353. Two arrangements are considered different, if a pair (u, v) (1 \u2264 u, v \u2264 2n) exists such that flowers u and v are of the same colour in one of them, but not in the other.",
    "editorial": "tl;dr Just look at recurrences of g, f0, f1 and f2 and the part after f2's recurrence.Break the circle down into semicircles.We're basically pairing flowers under the restrictions. It's hard to deal with the whole circle, let's consider something simpler. Consider an arc of length i (segment of i flowers) and their opposite counterparts, surrounded by another two pairs of opposite flowers of the same colour. We will calculate their contribution to the total beauty, f0(i) \u2014 in other words, the total beauty if only this segment is required to be coloured (we will not pair them with flowers out of this segment). A such segment with i = 7. For clarity's sake, a flower's opposite counterpart is drawn directly below it. We come up with a function g(i), denoting the number of ways to colour a segment of length i with pairs of opposite 1 and 2 only. The recurrence is g(0) = 1, g(1) = 0, g(i) = g(i - 2) + g(i - 4).First case: there are no opposite pairs within this segment. There are g(i) ways to do this, giving a total beauty of g(i)\u00b7i2.Second case: there is at least one opposite pair within this segment. Fix the position of the first opposite pair, j (in the range of 0 and i - 1 inclusive). Another two cases diverge.  (a) No pair of distance 2 crosses the flowers at position j. In this case, a subproblem of length i - j - 1 emerge, generating a total beauty of g(j)\u00b7j2 \u00d7 f0(i - j - 1).   (b) A pair of distance 2 crosses the flowers at position j. In this case, new subproblems appear \u2014 an arc of length i - j - 2 and their opposite counterparts, surrounded by an opposite same-colour pair on one side, and an already-paired flower and an opposite same-colour pair on the other. Denote this subproblem as f1, this case generates a total beauty of g(j - 1)\u00b7j2 \u00d7 f1(i - j - 3).  Summing up and simplifying a bit, we get the recurrence for f0:Doing almost the same (fix the opposite pair nearest to the side of an already-paired flower), we get the recurrence for f1:Now we've solved the subproblem for a subsegment. Hooray!For the whole circle, let's fix a pair of opposite flowers. Let it be flowers 1 and n. This can be rotated to generate other arrangements.But we don't know how many times it can be rotated without duplication. So we fix the second opposite pair, letting it be the first one starting from flower number 2 and going clockwise. Let its position be i, then there shouldn't be any opposite pairs within [2, i - 1], and all arrangements can be rotated in j - 1 different ways to generate all different arrangements. Example with n = 9 and i = 5. There may be or may be not pairs of distance 2 crossing over flowers 1 and i. Consider all four cases, we run into another subproblem with d\u00e9j\u00e0 vu.We introduce a new function, f2(i), denoting the total beauty of a segment of length i, with an already-paired flower and an opposite same-colour pair on both sides. A subproblem of length 5. Following the method above, we getThen the answer can be calculated in linear time, with g, f0, f1 and f2 all calculated beforehand. Overall complexity is O(n2). Refer to the square-time solution below for an implementation.Then, note that recurrences of f0, f1 and f2 are in the form of convolutions, so we'd like to optimize it with FFT. However, they include convolutions of the previous parts of the function itself, with another function like g(i)\u00b7i2, g(i)\u00b7(i + 1)2 or g(i)\u00b7(i + 2)2.Under this situation, apply FFT in a divide-and-conquer subroutine. solve(L, R) assumes that f(1;L - 1) are already calculated, and all the terms that contribute to f(L;R) and involve f(1;L - 1) are already accumulated in their corresponding array positions. It finishes calculation of f(L;R). First, it calls solve(L, M), then add all terms that contribute to f(M + 1;R) involving f(L;M) by convolving f(L;M) with the other function (say g(i) \u00d7 i2), then call solve(M+1, R). Over complexity is .The model solution solves f0 and f1 in one pass, and f2 in another. They can also be merged into a single pass. Big thanks to you for patiently reading till this point, and if you just want to enjoy the problem rather than implementation, feel free just to write a O(n2) solution :)"
}{
    "name": "Slalom",
    "code": [
        "720",
        "D"
    ],
    "tags": [
        "data structures",
        "dp",
        "sortings"
    ],
    "difficulty": 3100,
    "statement": "Little girl Masha likes winter sports, today she's planning to take part in slalom skiing.The track is represented as a grid composed of n \u00d7 m squares. There are rectangular obstacles at the track, composed of grid squares. Masha must get from the square (1, 1) to the square (n, m). She can move from a square to adjacent square: either to the right, or upwards. If the square is occupied by an obstacle, it is not allowed to move to that square.One can see that each obstacle can actually be passed in two ways: either it is to the right of Masha's path, or to the left. Masha likes to try all ways to do things, so she would like to know how many ways are there to pass the track. Two ways are considered different if there is an obstacle such that it is to the right of the path in one way, and to the left of the path in the other way.Help Masha to find the number of ways to pass the track. The number of ways can be quite big, so Masha would like to know it modulo 109 + 7.The pictures below show different ways to pass the track in sample tests.   ",
    "editorial": "First let us consider all paths from the starting square to the finish one. Let us say that two paths are equivalent, if each obstacle is at the same side for both paths. For each class of equivalence let us choose the representative path \u2014 the one that tries to go as low as possible, lexicographically minimum.Let us use dynamic programming. For each square let us count the number of representative paths that go from the starting square to this one. When the obstacle starts, some paths can now separate. The new representatives will pass this obstacle from above (it will be to the right of them). So we add the sum of values for squares below it, but above any other lower obstacle, to the value for the square right above the obstacle.To overcome the time and memory limits that the naive solution with O(nm) memory and O(nm2) time complexity, we use segment tree for range sum queries with mass update, running scanline and events \"start of an obstacle\", \"end of an obstacle\". This leads to the solution with O(m) memory and O(n log m) time complexity."
}{
    "name": "No Game No Life",
    "code": [
        "1411",
        "G"
    ],
    "tags": [
        "bitmasks",
        "games",
        "math",
        "matrices"
    ],
    "difficulty": 2700,
    "statement": "Let's consider the following game of Alice and Bob on a directed acyclic graph. Each vertex may contain an arbitrary number of chips. Alice and Bob make turns alternating. Alice goes first. In one turn player can move exactly one chip along any edge outgoing from the vertex that contains this chip to the end of this edge. The one who cannot make a turn loses. Both players play optimally.Consider the following process that takes place every second on a given graph with $$$n$$$ vertices:   An integer $$$v$$$ is chosen equiprobably from $$$[1, n + 1]$$$.  If $$$v \\leq n$$$, we add a chip to the $$$v$$$-th vertex and go back to step 1.  If $$$v = n + 1$$$, Alice and Bob play the game with the current arrangement of chips and the winner is determined. After that, the process is terminated. Find the probability that Alice will win the game. It can be shown that the answer can be represented as $$$\\frac{P}{Q}$$$, where $$$P$$$ and $$$Q$$$ are coprime integers and $$$Q \\not\\equiv 0 \\pmod{998\\,244\\,353}$$$. Print the value of $$$P \\cdot Q^{-1} \\bmod 998\\,244\\,353$$$.",
    "editorial": "The winner of the game is determined by xor of Grundy values for all chips' vertices. Notice that every Grundy value $$$\\leq\\sqrt m$$$ so xor doesn't exceed 512. Let $$$P_v$$$ be a probability of Alice's victory if the current xor is $$$v$$$.$$$P_v = \\sum P_{to}\\cdot prob(v \\rightarrow to) + [v\\neq 0] \\cdot\\frac{1}{n + 1}$$$In the second term, we got $$$n + 1$$$ and the process ended. It is clear that $$$prob(v \\rightarrow to) = \\frac{cnt[v \\oplus to]}{n + 1}$$$, where $$$cnt[x]$$$ is the number of vertices with the Grundy value equal to $$$x$$$. Now we have a system of 512 linear equations with variables $$$P_v$$$. We can solve it using the Gauss method. The answer is in $$$P_0$$$. The proof that Gauss won't break along the way is left to the reader as an exercise.There is also a solution using the Hadamard transform."
}{
    "name": "Multi-Subject Competition",
    "code": [
        "1082",
        "C"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 1600,
    "statement": "A multi-subject competition is coming! The competition has $$$m$$$ different subjects participants can choose from. That's why Alex (the coach) should form a competition delegation among his students. He has $$$n$$$ candidates. For the $$$i$$$-th person he knows subject $$$s_i$$$ the candidate specializes in and $$$r_i$$$ \u2014 a skill level in his specialization (this level can be negative!). The rules of the competition require each delegation to choose some subset of subjects they will participate in. The only restriction is that the number of students from the team participating in each of the chosen subjects should be the same.Alex decided that each candidate would participate only in the subject he specializes in. Now Alex wonders whom he has to choose to maximize the total sum of skill levels of all delegates, or just skip the competition this year if every valid non-empty delegation has negative sum.(Of course, Alex doesn't have any spare money so each delegate he chooses must participate in the competition).",
    "editorial": "At first, it's optimal to take candidates with maximal levels for a fixed subject.At second, if we fix number of participants in each subject for some delegation, then it's always optimal to choose all subjects with positive sum of levels.It leads us to a following solution. Let's divide all candidates by it's $$$s_i$$$ and sort each group in non-increasing order.In result we can just iterate over all prefix sums for each group and update global answer of current length with current sum if it has a positive value."
}{
    "name": "GCD Problem",
    "code": [
        "1617",
        "B"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "difficulty": 900,
    "statement": "Given a positive integer $$$n$$$. Find three distinct positive integers $$$a$$$, $$$b$$$, $$$c$$$ such that $$$a + b + c = n$$$ and $$$\\operatorname{gcd}(a, b) = c$$$, where $$$\\operatorname{gcd}(x, y)$$$ denotes the greatest common divisor (GCD) of integers $$$x$$$ and $$$y$$$.",
    "editorial": "Key observation: there always exists a solution with $$$c = 1$$$ under the given constraints. We set $$$n \\ge 10$$$ because there is no solution when $$$1 \\le n \\le 5$$$ or $$$n = 7$$$.Solution 1: Brute force from $$$a = 2, 3, 4, \\dots$$$ and calculate the value of $$$b$$$ ($$$b = n - a - 1$$$), then check whether $$$gcd(a, b) = 1$$$. It works, because you will find a prime number $$$p \\le 29$$$ such that $$$n-1$$$ does not divide $$$p$$$.Solution 2: Randomly choose $$$a$$$ and calculate $$$b$$$ ($$$b = n - a - 1$$$). Repeating that for enough times will eventually get you a pair of ($$$a, b$$$) such that $$$gcd(a, b) = 1$$$.Solution 3: Constructive solution.   When $$$n \\equiv 0 \\pmod 2$$$, output ($$$n-3, 2, 1$$$).  When $$$n \\equiv 1 \\pmod 4$$$, output ($$$\\left \\lfloor \\frac{n}{2} \\right \\rfloor -1, \\left \\lfloor \\frac{n}{2} \\right \\rfloor +1, 1$$$).  When $$$n \\equiv 3 \\pmod 4$$$, output ($$$\\left \\lfloor \\frac{n}{2} \\right \\rfloor -2, \\left \\lfloor \\frac{n}{2} \\right \\rfloor +2, 1$$$). "
}{
    "name": "Inna and Dima",
    "code": [
        "374",
        "C"
    ],
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "implementation"
    ],
    "difficulty": 1900,
    "statement": "Inna and Dima bought a table of size n \u00d7 m in the shop. Each cell of the table contains a single letter: \"D\", \"I\", \"M\", \"A\".Inna loves Dima, so she wants to go through his name as many times as possible as she moves through the table. For that, Inna acts as follows:  initially, Inna chooses some cell of the table where letter \"D\" is written;  then Inna can move to some side-adjacent table cell that contains letter \"I\"; then from this cell she can go to one of the side-adjacent table cells that contains the written letter \"M\"; then she can go to a side-adjacent cell that contains letter \"A\". Then Inna assumes that she has gone through her sweetheart's name;  Inna's next move can be going to one of the side-adjacent table cells that contains letter \"D\" and then walk on through name DIMA in the similar manner. Inna never skips a letter. So, from the letter \"D\" she always goes to the letter \"I\", from the letter \"I\" she always goes the to letter \"M\", from the letter \"M\" she always goes to the letter \"A\", and from the letter \"A\" she always goes to the letter \"D\". Depending on the choice of the initial table cell, Inna can go through name DIMA either an infinite number of times or some positive finite number of times or she can't go through his name once. Help Inna find out what maximum number of times she can go through name DIMA.",
    "editorial": ""
}{
    "name": "Kolya and Tanya ",
    "code": [
        "584",
        "B"
    ],
    "tags": [
        "combinatorics"
    ],
    "difficulty": 1500,
    "statement": "Kolya loves putting gnomes at the circle table and giving them coins, and Tanya loves studying triplets of gnomes, sitting in the vertexes of an equilateral triangle.More formally, there are 3n gnomes sitting in a circle. Each gnome can have from 1 to 3 coins. Let's number the places in the order they occur in the circle by numbers from 0 to 3n - 1, let the gnome sitting on the i-th place have ai coins. If there is an integer i (0 \u2264 i < n) such that ai + ai + n + ai + 2n \u2260 6, then Tanya is satisfied. Count the number of ways to choose ai so that Tanya is satisfied. As there can be many ways of distributing coins, print the remainder of this number modulo 109 + 7. Two ways, a and b, are considered distinct if there is index i (0 \u2264 i < 3n), such that ai \u2260 bi (that is, some gnome got different number of coins in these two ways).",
    "editorial": ""
}{
    "name": "Missile Silos",
    "code": [
        "144",
        "D"
    ],
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "shortest paths"
    ],
    "difficulty": 1900,
    "statement": "A country called Berland consists of n cities, numbered with integer numbers from 1 to n. Some of them are connected by bidirectional roads. Each road has some length. There is a path from each city to any other one by these roads. According to some Super Duper Documents, Berland is protected by the Super Duper Missiles. The exact position of the Super Duper Secret Missile Silos is kept secret but Bob managed to get hold of the information. That information says that all silos are located exactly at a distance l from the capital. The capital is located in the city with number s.The documents give the formal definition: the Super Duper Secret Missile Silo is located at some place (which is either city or a point on a road) if and only if the shortest distance from this place to the capital along the roads of the country equals exactly l.Bob wants to know how many missile silos are located in Berland to sell the information then to enemy spies. Help Bob.",
    "editorial": ""
}{
    "name": "Viruses",
    "code": [
        "1387",
        "C"
    ],
    "tags": [
        "*special",
        "dp",
        "shortest paths",
        "string suffix structures"
    ],
    "difficulty": 2900,
    "statement": "The Committee for Research on Binary Viruses discovered a method of replication for a large family of viruses whose genetic codes are sequences of zeros and ones. Each virus originates from a single gene; for simplicity genes are denoted by integers from $$$0$$$ to $$$G - 1$$$. At each moment in time a virus is a sequence of genes. When mutation occurs, one of the genes from the sequence is replaced by a certain sequence of genes, according to the mutation table. The virus stops mutating when it consists only of genes $$$0$$$ and $$$1$$$.For instance, for the following mutation table: $$$$$$ 2 \\to \\langle 0\\ 1 \\rangle \\\\ 3 \\to \\langle 2\\ 0\\ 0\\rangle\\\\ 3 \\to \\langle 1\\ 3\\rangle\\\\ 4 \\to \\langle 0\\ 3\\ 1\\ 2\\rangle\\\\ 5 \\to \\langle 2\\ 1\\rangle\\\\ 5 \\to \\langle 5\\rangle $$$$$$ a virus that initially consisted of a single gene $$$4$$$, could have mutated as follows: $$$$$$ \\langle 4 \\rangle \\to \\langle \\underline{0\\ 3\\ 1\\ 2} \\rangle \\to \\langle 0\\ \\underline{2\\ 0\\ 0}\\ 1\\ 2 \\rangle \\to \\langle 0\\ \\underline{0\\ 1}\\ 0\\ 0\\ 1\\ 2 \\rangle \\to \\langle 0\\ 0\\ 1\\ 0\\ 0\\ 1\\ \\underline{0\\ 1} \\rangle $$$$$$ or in another way: $$$$$$ \\langle 4 \\rangle \\to \\langle \\underline{0\\ 3\\ 1\\ 2} \\rangle \\to \\langle 0\\ \\underline{1\\ 3}\\ 1\\ 2 \\rangle \\to \\langle 0\\ 1\\ 3\\ 1\\ \\underline{0\\ 1} \\rangle \\to \\langle 0\\ 1\\ \\underline{2\\ 0\\ 0}\\ 1\\ 0\\ 1 \\rangle \\to \\langle 0\\ 1\\ \\underline{0\\ 1}\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle $$$$$$Viruses are detected by antibodies that identify the presence of specific continuous fragments of zeros and ones in the viruses' codes. For example, an antibody reacting to a fragment $$$\\langle 0\\ 0\\ 1\\ 0\\ 0 \\rangle$$$ will detect a virus $$$\\langle 0\\ 0\\ 1\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle$$$, but it will not detect a virus $$$\\langle 0\\ 1\\ 0\\ 1\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle$$$.For each gene from $$$2$$$ to $$$G-1$$$, the scientists are wondering whether a given set of antibodies is enough to detect all viruses that can emerge through mutations from this gene. If not, they want to know the length of the shortest virus that cannot be detected.It may happen that sometimes scientists don't have any antibodies. Then of course no virus can be detected, so the scientists are only interested in the length of the shortest possible virus that can emerge from the gene mutations.",
    "editorial": "From reading the task you may think that there aren't enough constraints. This is not true as you actually have enough information.  $$$k$$$. You are given that the sum of all values $$$k$$$ does not exceed 100, so naturally, $$$1 \\leq k \\leq 100$$$.  $$$l$$$. You are given that the sum of all values $$$l$$$ does not exceed 50, so naturally, $$$1 \\leq l \\leq 50$$$.  $$$N$$$. You are given that the sum of all values $$$k$$$ does not exceed 100 and that $$$k \\geq 1$$$ in every row of the mutation table. Thus, there are at most 100 rows, meaning $$$G - 2 \\leq N \\leq 100$$$. Since $$$G > 2$$$, $$$0 < N \\leq 100$$$.  $$$G$$$. You are given that every integer from $$$2$$$ to $$$G - 1$$$ appears in the table as $$$a$$$ at least once. This means that $$$N \\geq G - 2$$$ (which you are also conveniently given). Hence, $$$2 < G \\leq N + 2$$$, or remembering constraints on $$$N$$$, $$$2 < G \\leq 102$$$.  $$$M$$$. You are given that the sum of all values $$$l$$$ does not exceed 50 and that $$$l \\geq 1$$$ for every antibody. Thus, there are at most 50 antibodies, meaning $$$0 \\leq M \\leq 50$$$. Note that this means that a test with $$$G = 102$$$ is a valid test, and it may fail some solutions. We were nice though, and only put it in the first subtask, so if you're failing that one, this may be the answer why.In all subtasks, we'll use the same approaches, which will be similar to dynamic programming and Dijkstra's algorithm. Imagine we are computing $$$dp_i$$$ \u2013 the minimal length of a virus that we can obtain from gene $$$i$$$ and is not detected by any antibodies. Then, similar to Dijkstra, we can take the smallest unprocessed value of $$$dp_i$$$ and process it, that is, for every transition $$$a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle$$$, where for some $$$j$$$, $$$b_j = i$$$, we can update the value of $$$dp_a$$$ using that transition. Since every transition is non-empty, we know that once we picked something as the smallest unprocessed value of $$$dp_i$$$, it cannot be updated to a better result anymore, hence it's our answer. Once you have no more unprocessed values (or they're all $$$\\infty$$$), you're done.Subtask 1 (No antibodies ($$$M = 0$$$))In this subtask we're not interested in viruses themselves, just in their length as any virus is valid. So, just do what was discussed above.Initially, $$$dp_0 = dp_1 = 1$$$. For any other $$$i$$$, $$$dp_i = \\infty$$$. Then repeatedly pick the smallest unprocessed value of $$$dp_i$$$ and process it \u2014 for every transition $$$a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle$$$, $$$dp_a = \\min(dp_a, dp_{b_1} + dp_{b_2} + ... + dp_{b_k})$$$. You don't really need to even do transition selection or a queue for minimal values here, the most basic implementation will yield $$$O(G \\cdot (G + \\sum{l}))$$$.Subtask 2 ($$$N = G - 2$$$)In this subtask, due to the restriction that every integer from $$$2$$$ to $$$G - 1$$$ appears in the table as $$$a$$$ at least once, every gene has strictly one outgoing mutation. This means that from every gene, there can be either no or a single virus only.However, viruses can still be quite large, so you can't just compute it. It could also be infinite. Luckily, you can use similar approach here, except this time you'd also need to store some information about the virus itself rather than only the length of it.What information do we need about the virus then? Well, our dynamic programming state already has a condition that it's the shortest virus that is not detected by any antibodies. So, our initialization is changed slightly:$$$$$$ dp_0 = \\begin{cases} 0, & \\text{if $0$ is an antibody}\\\\ 1, & \\text{otherwise} \\end{cases} $$$$$$$$$$$$ dp_1 = \\begin{cases} 0, & \\text{if $1$ is an antibody}\\\\ 1, & \\text{otherwise} \\end{cases} $$$$$$Now, what about transitions? Similarly, $$$dp_a = \\min(dp_a, dp_{b_1} + dp_{b_2} + ... + dp_{b_k})$$$. We also know that there can't be an antibody fully inside each individual $$$dp_{b_j}$$$. But what about overlaps? Well, since each antibody length is at most $$$\\ell \\leq 50$$$, we know we are only interested in storing the first and the last 50 characters for every value of $$$dp$$$. Then when we are doing a transition and gluing up multiple states together, we just have to check if due to this an antibody won't appear in the result, which will make this transition invalid. It's possible that the most inefficient way of doing so will time out, but you have plenty of leeway here, so it shouldn't cause too many issues.Subtask 3 (One antibody ($$$M = 1$$$))Here we need to expand our DP a bit. Given that unlike in the previous subtask, there can be multiple different viruses originating from a single gene, it's no longer enough to store the information about the virus, we need to encode it inside a state. So, the general approach will be as follows:We are now calculating $$$dp_{i, st, en}$$$, the minimal length of a virus such that we start in the state $$$st$$$, obtain a virus from the gene $$$i$$$ that is not detected by any antibodies and end up in the state $$$en$$$. The transition then becomes where for transition $$$a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle$$$; $$$dp_{a, st, en} = \\min(dp_{a, st, en}, dp_{b_1, st, x_1} + dp_{b_2, x_1, x_2} + \\ldots + dp_{b_k, x_{k - 1}, en})$$$.But wait! We have to now compute for every value of $$$k - 1$$$ variables of $$$x$$$, and $$$k \\leq 100$$$! Well, we can notice that we can do a second dynamic programming, somewhat reducing the running cost, but this will only be enough for Subtask 4. Instead we can transform the transitions themselves.What we want to do is to make sure that in every transition $$$a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle$$$, $$$k \\leq 2$$$. We can do that, since$$$$$$ a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle = \\begin{cases} a \\to \\langle b_1\\ z \\rangle, \\text{where $z$ is a new gene}\\\\ z \\to \\langle b_2\\ \\ldots\\ b_k \\rangle \\end{cases} $$$$$$reduces the length of a transition. Note that by doing so we would have at most $$$\\sum{k}$$$ transitions still and the sum of all values $$$k$$$ would still be $$$O(\\sum{k})$$$, since it could only double worst-case. We are also creating new genes, but similarly, we'll still have $$$O(G)$$$ of them.However, now transition is a lot smoother. For a transition $$$a \\to \\langle b_1\\rangle$$$, we have $$$dp_{a, st, en} = \\min(dp_{a, st, en}, dp_{b_1, st, en})$$$. For a transition $$$a \\to \\langle b_1\\ b_2\\rangle$$$, we have $$$dp_{a, st, en} = \\min(dp_{a, st, en}, dp_{b_1, st, x} + dp_{b_2, x, en})$$$.Now, remember that from $$$dp_{i, st, en}$$$ we only need to consider transitions that contain $$$i$$$ as the right hand side. Now, imagine we fix $$$st$$$ and $$$en$$$ and iterate freely over $$$i$$$. It's clear that we will consider every transition at most twice. This means that to compute all $$$O(G \\cdot S^2)$$$ states we need to process $$$O(G \\cdot S^2)$$$ transitions. As such, if we assume that the amount of states is $$$S$$$, then if we're using fast structure to find minimal states, the complexity would be $$$O(G \\cdot S^2 \\cdot (S \\cdot \\log(G \\cdot S^2)))$$$. The last logarithm comes from the necessity to update the queue of the smallest values every time we update a value successfully.So, the final question we need to answer is what is the state here? We can observe that since we have one antibody, it's enough to have a state encoding at what length of prefix for the antibody you are. For an antibody of length $$$l$$$, this gives you $$$l$$$ states (because you can't visit prefix of length $$$l$$$ as that just means that you can detect this virus). So, you are now looking for $$$dp_{i, st, en}$$$, the minimal length of a virus such that we start by already having part of the virus ending with a prefix of antibody of length $$$st$$$, obtain a virus from gene $$$i$$$ that is not detected by any antibodies and end up with a virus ending with a prefix of antibody length $$$en$$$.Now, your answer for a gene $$$i$$$ is $$$\\min(dp_{i, 0, x})$$$ for any $$$0 \\leq x < l$$$. The transition doesn't really have any additional work either as the fact that we are not having an antibody in the virus is encoded in the states themselves. The initialization is where all of the work happens now. What we can do is to iterate over terminal genes $$$i$$$ (0 and 1) and starting states $$$st$$$. Then, let's observe the virus obtained from virus corresponding to the state $$$st$$$ (e.g.\u00a0prefix of antibody of length $$$st$$$) and the gene $$$i$$$ appended to it. Well, we get a string and need to check what is the maximum its suffix that is also a prefix for the antibody. Doing so naively is enough, but you can also observe that it's exactly what KMP algorithm is looking for. Let's call this new length $$$en$$$. Then we've found that for this $$$i$$$ and $$$st$$$, as long as $$$en < l$$$, $$$dp_{i, st, en} = 1$$$. Everything that's not initialized after we've iterated over every $$$i$$$ and $$$st$$$ has a value of $$$\\infty$$$ as it's impossible.So, our $$$S = \\sum{l}$$$ and as such our total complexity is $$$O(G \\cdot (\\sum{l})^3 \\cdot \\log(G \\cdot (\\sum{l})^2))$$$.Subtask 5 (No further constraints)We can use the same solution as Subtask 3, but the state needs to change. Now that we have multiple antibodies, we need to compute a set of prefixes for all antibodies, where some of them would be invalid. Please note that the definition of a bad prefix isn't if it's equal to one antibody or not. The prefix is bad if and only if it has a suffix that is an antibody, since we may have that a prefix of one antibody already ends with a different antibody.Now a similar initialization can occur, where we would iterate over every $$$i$$$ and $$$st$$$, obtain a string from $$$st$$$ and $$$i$$$ and find its largest suffix that is in the prefix set to make the transition. Doing so naively is enough, but once again, you can also observe that it's exactly what the Aho-Corasick algorithm is doing.We can also see that we'll still have at most $$$O(\\sum{l})$$$ states, and as such the rest of the algorithm and the total complexity is the same as in Subtask 3.Subtask 4 (The sum of all values $$$l$$$ does not exceed 10)This was a subtask designed to award points to conceptually right solutions but inefficiently written. Such as, for example, not implementing fast enough structure for picking the minimal values of $$$dp$$$ or not transforming the transitions and as such having to write a separate dynamic programming for executing the transitions."
}{
    "name": "Good Sequences",
    "code": [
        "264",
        "B"
    ],
    "tags": [
        "dp",
        "number theory"
    ],
    "difficulty": 1500,
    "statement": "Squirrel Liss is interested in sequences. She also has preferences of integers. She thinks n integers a1, a2, ..., an are good.Now she is interested in good sequences. A sequence x1, x2, ..., xk is called good if it satisfies the following three conditions:  The sequence is strictly increasing, i.e. xi < xi + 1 for each i (1 \u2264 i \u2264 k - 1).  No two adjacent elements are coprime, i.e. gcd(xi, xi + 1) > 1 for each i (1 \u2264 i \u2264 k - 1) (where gcd(p, q) denotes the greatest common divisor of the integers p and q).  All elements of the sequence are good integers. Find the length of the longest good sequence.",
    "editorial": ""
}{
    "name": "Random Query",
    "code": [
        "846",
        "F"
    ],
    "tags": [
        "data structures",
        "math",
        "probabilities",
        "two pointers"
    ],
    "difficulty": 1800,
    "statement": "You are given an array a consisting of n positive integers. You pick two integer numbers l and r from 1 to n, inclusive (numbers are picked randomly, equiprobably and independently). If l > r, then you swap values of l and r. You have to calculate the expected value of the number of unique elements in segment of the array from index l to index r, inclusive (1-indexed).",
    "editorial": "For each index i we will find the number of pairs (l, r) (before swapping) such that i is the first occurence of ai in the chosen segment. Let f(i) be previous occurence of ai before i (if i is the first occurence, then f(i) = 0 if we suppose the array to be 1-indexed). Let's find the number of pairs such that l \u2264 r, and then multiply it by 2 and subtract 1 for this index. l has to be in segment (f(i), i], and r has to be in segment [i, n], so the number of ways to choose this pair is (i - f(i))(n - i + 1).The value we receive as the sum of these values over all segments is the total number of distinct elements over all pairs (l, r), so we need to divide it by the number of these pairs."
}{
    "name": "Saitama Destroys Hotel",
    "code": [
        "608",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1000,
    "statement": "Saitama accidentally destroyed a hotel again. To repay the hotel company, Genos has volunteered to operate an elevator in one of its other hotels. The elevator is special \u2014 it starts on the top floor, can only move down, and has infinite capacity. Floors are numbered from 0 to s and elevator initially starts on floor s at time 0.The elevator takes exactly 1 second to move down exactly 1 floor and negligible time to pick up passengers. Genos is given a list detailing when and on which floor passengers arrive. Please determine how long in seconds it will take Genos to bring all passengers to floor 0.",
    "editorial": "The minimum amount of time required is the maximum value of max(ti, fi) + fi. Let us see why this is true. Consider the procedure of going to the highest floor a customer arrives and working your way down the hotel, moving down only when you've finished picking up everyone that arrives on the floor. Picking up passengers in this manner, the maximum time taken will either be the time taken to reach the top floor and back, or the time taken to wait for a passenger and then travel all the way to the bottom. Our expression covers both such cases, and hence will obtain the correct answer.Time Complexity - O(n), Memory Complexity - O(1)"
}{
    "name": "New task",
    "code": [
        "788",
        "E"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 2900,
    "statement": "On the 228-th international Uzhlyandian Wars strategic game tournament teams from each country are called. The teams should consist of 5 participants.The team of Uzhlyandia will consist of soldiers, because there are no gamers.Masha is a new minister of defense and gaming. The prime duty of the minister is to calculate the efficiency of the Uzhlandian army. The army consists of n soldiers standing in a row, enumerated from 1 to n. For each soldier we know his skill in Uzhlyandian Wars: the i-th soldier's skill is ai.It was decided that the team will consist of three players and two assistants. The skills of players should be same, and the assistants' skills should not be greater than the players' skill. Moreover, it is important for Masha that one of the assistants should stand in the row to the left of the players, and the other one should stand in the row to the right of the players. Formally, a team is five soldiers with indexes i, j, k, l, p, such that 1 \u2264 i < j < k < l < p \u2264 n and ai \u2264 aj = ak = al \u2265 ap. The efficiency of the army is the number of different teams Masha can choose. Two teams are considered different if there is such i such that the i-th soldier is a member of one team, but not a member of the other team.Initially, all players are able to be players. For some reasons, sometimes some soldiers become unable to be players. Sometimes some soldiers, that were unable to be players, become able to be players. At any time any soldier is able to be an assistant. Masha wants to control the efficiency of the army, so she asked you to tell her the number of different possible teams modulo 1000000007 (109 + 7) after each change. ",
    "editorial": "To begin with, we apply scaling to all numbers and replace each element of the array with its position in the sorted array.Count the answer for the original array. For each i, calculate smaller_prefi as the quantity of such j that j < i, aj \u2264 ai and smaller_sufi\u00a0\u2014 the number of such j that j > i, aj \u2264 ai. This can be done with a segment tree or a Fenwick tree. If we consider each element as k from the command [i, j, k, l, p], then the answer for fives with this k is smaller_prefj, aj = ak)\u00b7smaller_sufj, aj = ak). The common answer is the sum of the answers for each possible k. Now after each request we will update the answer. We will support for each type of number for the prefix and suffix for 2 segment tree. Since when, an element turns on/off it is important to know only information about elements with the same value, then you can update the answer using only it. Consider array b as a number vector of occurrences of the form au.In the first \"suffix tree\" in the sheet we store smaller_sufbi, if the element with the number bi is included, otherwise 0, and in the remaining vertices the sum in the sons. In the second suffix tree we store in the sheet smaller_sufbi\u00b7((the number j, such that aj = abi,  < b[i], element with the number j\u00a0\u2014 is included) + 1), if the element with the number bi is included, otherwise 0, and in the remaining vertices the sum in the sons.For the prefix, you need to do exactly the same thing.Let cntau be the number of numbers of the form au.Now when the request for turning off/on the element with number u came, we need to subtract/add to the answer the number of such pentads [i, j, k, l, p] where u = k, u = j, u = l. Further cu =  ((the quantity j, j < u, aj = au) + 1). In other words, cu\u00a0\u2014 is the number in the occurrence vector of numbers of the form au). First, consider the number of fives where u = k. Them is (the sum on the interval [1;cu-1] in the first prefix tree) \u00b7 (the sum on the segment [cu+1;cntau] in the first \"suffix tree\").The number of fives where u = j is ((the sum on the segment [cu+2;cntau] in the second \"suffix tree\" segments) - ((the number of elements j, j \u2264 u, aj = au, the element with the number j is included) +1)\u00b7 (the sum on the segment [cu+2;cntau] in the first \"suffix tree\" segments ))\u00b7smaller_prefu. The number of fives where u = l must be calculated in the same way as for u = j, only in the other direction.Updating the values \u200b\u200bof the suffix tree elements:   When the item is turned off, you need:   Take the sum on the segment [cu+1;cntau] in the second segment tree in the same segment in the first tree.  Assign the element with the number cu to the element in the second segments tree 0.  Assign the element with the number cu in the first tree 0.   When you enable an item, you need:   Add on the segment [cu+1;cntau] in the second segment tree the sum on the same line in the first tree.  Assign the element with the number cu in the second tree (the number of such j, j \u2264 u, aj = au, the element j is included) + 1)\u00b7smaller_suffu.  Assign the element with the number cu in the first tree smaller_sufu.  The update in the tree with the prefix is the same.Adding on the segment will be done by a kind of lazy pushing\u00a0\u2014 in the second segment tree you need to have access to the corresponding vertex of the first tree, when changing the vertex, add/subtract the sum at the top of the first segment tree.The complexity of the solution is O(N\u00b7logN + M\u00b7logN)) by time, O(N) by memory."
}{
    "name": "TOF",
    "code": [
        "687",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "difficulty": 2900,
    "statement": "Today Pari gave Arya a cool graph problem. Arya wrote a non-optimal solution for it, because he believes in his ability to optimize non-optimal solutions. In addition to being non-optimal, his code was buggy and he tried a lot to optimize it, so the code also became dirty! He keeps getting Time Limit Exceeds and he is disappointed. Suddenly a bright idea came to his mind!Here is how his dirty code looks like:dfs(v){     set count[v] = count[v] + 1     if(count[v] < 1000)     {          foreach u in neighbors[v]          {               if(visited[u] is equal to false)               {                    dfs(u)               }               break          }     }     set visited[v] = true}main(){     input the digraph()     TOF()     foreach 1<=i<=n     {          set count[i] = 0 , visited[i] = false     }     foreach 1 <= v <= n     {          if(visited[v] is equal to false)          {               dfs(v)          }     }     ... // And do something cool and magical but we can't tell you what!}He asks you to write the TOF function in order to optimize the running time of the code with minimizing the number of calls of the dfs function. The input is a directed graph and in the TOF function you have to rearrange the edges of the graph in the list neighbors for each vertex. The number of calls of dfs function depends on the arrangement of neighbors of each vertex.",
    "editorial": "Find the sum of sizes of smallest cycle in each sink strongly connected component. If it's equal to k, The minimum number of calls of the dfs function is 1000k + (n - k)"
}{
    "name": "Monsters (hard version)",
    "code": [
        "1784",
        "C"
    ],
    "tags": [
        "data structures",
        "greedy"
    ],
    "difficulty": 2200,
    "statement": "This is the hard version of the problem. In this version, you need to find the answer for every prefix of the monster array.In a computer game, you are fighting against $$$n$$$ monsters. Monster number $$$i$$$ has $$$a_i$$$ health points, all $$$a_i$$$ are integers. A monster is alive while it has at least $$$1$$$ health point.You can cast spells of two types:  Deal $$$1$$$ damage to any single alive monster of your choice.  Deal $$$1$$$ damage to all alive monsters. If at least one monster dies (ends up with $$$0$$$ health points) as a result of this action, then repeat it (and keep repeating while at least one monster dies every time). Dealing $$$1$$$ damage to a monster reduces its health by $$$1$$$.Spells of type 1 can be cast any number of times, while a spell of type 2 can be cast at most once during the game.For every $$$k = 1, 2, \\ldots, n$$$, answer the following question. Suppose that only the first $$$k$$$ monsters, with numbers $$$1, 2, \\ldots, k$$$, are present in the game. What is the smallest number of times you need to cast spells of type 1 to kill all $$$k$$$ monsters?",
    "editorial": "Continuing on the solution to the easy version: now we have a set of integers $$$A$$$, we need to add elements into $$$A$$$ one by one and maintain the answer to the problem.Recall that for every $$$i$$$, either $$$b_i = b_{i-1}$$$ or $$$b_i = b_{i-1} + 1$$$. Note that $$$b_i = b_{i-1}$$$ can only happen when $$$b_i = a_i$$$. Let's call such an element useless. If we remove a useless element, the answer does not change.If there are no useless elements, we have $$$b_1 = 1$$$ and $$$b_i = b_{i-1} + 1$$$ for $$$i > 1$$$: that is, $$$b_i = i$$$. Thus, the answer to the problem can be easily calculated as $$$\\sum \\limits_{i=1}^m (a_i - b_i) = \\sum \\limits_{i=1}^m a_i - \\frac{m(m+1)}{2}$$$, where $$$m$$$ is the current size of the set.We can formulate the condition \"there are no useless elements\" as follows. For any $$$x$$$, let $$$k_x$$$ be the number of elements in $$$A$$$ not exceeding $$$x$$$. Then, $$$k_x \\le x$$$.On the other hand, suppose that for some $$$x$$$, we have $$$k_x > x$$$. Let's find the smallest such $$$x$$$. Then, we can see that $$$A$$$ contains a useless element equal to $$$x$$$, and we can safely remove it.We can check this condition after adding each new element to $$$A$$$ using a segment tree. In every cell $$$x$$$ of the array maintained by the segment tree, we will store the difference $$$x - k_x$$$. Initially, cell $$$x$$$ contains value $$$x$$$. When a new element $$$v$$$ appears, we should subtract $$$1$$$ from all cells in range $$$[v; n]$$$. Then, if a cell with a negative value appears (that is, $$$x - k_x < 0$$$, which is equivalent to $$$k_x > x$$$), we should find the leftmost such cell $$$x$$$ and remove an element equal to $$$x$$$. In particular, we should add $$$1$$$ to all cells in range $$$[x; n]$$$.Thus, we can use a segment tree with \"range add\" and \"global min\". At most one useless element can appear every time we enlarge $$$A$$$, and if that happens, we can identify and remove it in $$$O(\\log n)$$$, resulting in an $$$O(n \\log n)$$$ time complexity."
}{
    "name": "Twin Buildings",
    "code": [
        "1252",
        "H"
    ],
    "tags": [
        "greedy",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "As you might already know, space has always been a problem in ICPC Jakarta. To cope with this, ICPC Jakarta is planning to build two new buildings. These buildings should have a shape of a rectangle of the same size. Now, their problem is to find land to build the buildings.There are $$$N$$$ lands available for sale. The $$$i^{th}$$$ land has a rectangular shape of size $$$L_i \\times W_i$$$. For a good feng shui, the building's side should be parallel to the land's sides.One way is to build the two buildings on two different lands, one on each land (not necessarily with the same orientation). A building of size $$$A \\times B$$$ can be build on the $$$i^{th}$$$ land if and only if at least one of the following is satisfied:   $$$A \\le L_i$$$ and $$$B \\le W_i$$$, or  $$$A \\le W_i$$$ and $$$B \\le L_i$$$.  Alternatively, it is also possible to build two buildings of $$$A \\times B$$$ on the $$$i^{th}$$$ land with the same orientation. Formally, it is possible to build two buildings of $$$A \\times B$$$ on the $$$i^{th}$$$ land if and only if at least one of the following is satisfied:   $$$A \\times 2 \\le L_i$$$ and $$$B \\le W_i$$$, or  $$$A \\times 2 \\le W_i$$$ and $$$B \\le L_i$$$, or  $$$A \\le L_i$$$ and $$$B \\times 2 \\le W_i$$$, or  $$$A \\le W_i$$$ and $$$B \\times 2 \\le L_i$$$. Your task in this problem is to help ICPC Jakarta to figure out the largest possible buildings they can build given $$$N$$$ available lands. Note that ICPC Jakarta has to build two buildings of $$$A \\times B$$$; output the largest possible for $$$A \\times B$$$.",
    "editorial": ""
}{
    "name": "Codeforces World Finals",
    "code": [
        "30",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "The king Copa often has been reported about the Codeforces site, which is rapidly getting more and more popular among the brightest minds of the humanity, who are using it for training and competing. Recently Copa understood that to conquer the world he needs to organize the world Codeforces tournament. He hopes that after it the brightest minds will become his subordinates, and the toughest part of conquering the world will be completed.The final round of the Codeforces World Finals 20YY is scheduled for DD.MM.YY, where DD is the day of the round, MM is the month and YY are the last two digits of the year. Bob is lucky to be the first finalist form Berland. But there is one problem: according to the rules of the competition, all participants must be at least 18 years old at the moment of the finals. Bob was born on BD.BM.BY. This date is recorded in his passport, the copy of which he has already mailed to the organizers. But Bob learned that in different countries the way, in which the dates are written, differs. For example, in the US the month is written first, then the day and finally the year. Bob wonders if it is possible to rearrange the numbers in his date of birth so that he will be at least 18 years old on the day DD.MM.YY. He can always tell that in his motherland dates are written differently. Help him.According to another strange rule, eligible participant must be born in the same century as the date of the finals. If the day of the finals is participant's 18-th birthday, he is allowed to participate. As we are considering only the years from 2001 to 2099 for the year of the finals, use the following rule: the year is leap if it's number is divisible by four.",
    "editorial": ""
}{
    "name": "Xenolith? Hippodrome?",
    "code": [
        "1505",
        "D"
    ],
    "tags": [
        "*special",
        "number theory"
    ],
    "difficulty": 1800,
    "statement": "InputThe input contains two integers $$$N$$$, $$$M$$$ ($$$1 \\le N \\le 1024, 2 \\le M \\le 16$$$), separated by a single space.OutputOutput \"YES\" or \"NO\".ExamplesInput\n2 3\nOutput\nYES\nInput\n3 2\nOutput\nNO\nInput\n33 16\nOutput\nYES\nInput\n26 5\nOutput\nNO\n",
    "editorial": "Again, YES or NO answer implies that you need to figure out whether the given pair of numbers describes something called something like \"hippodrome\"... Or was it \"xenolith\" after all? Neither of these options makes a lot of sense, but you know how it is when you're trying to remember a fancy-sounding word and come up with all kinds of similar-looking ones? The word you're looking for here is \"xenodrome\" - a number which, when written in a certain base, has no duplicate digits. This explains a lot: the given numbers $$$N$$$ and $$$M$$$ are the candidate number and the base, respectively; the task is to write $$$N$$$ in base $$$M$$$ and check whether all digits are unique."
}{
    "name": "Snowball",
    "code": [
        "1099",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Today's morning was exceptionally snowy. Meshanya decided to go outside and noticed a huge snowball rolling down the mountain! Luckily, there are two stones on that mountain.Initially, snowball is at height $$$h$$$ and it has weight $$$w$$$. Each second the following sequence of events happens: snowball's weights increases by $$$i$$$, where $$$i$$$\u00a0\u2014 is the current height of snowball, then snowball hits the stone (if it's present at the current height), then snowball moves one meter down. If the snowball reaches height zero, it stops.There are exactly two stones on the mountain. First stone has weight $$$u_1$$$ and is located at height $$$d_1$$$, the second one\u00a0\u2014 $$$u_2$$$ and $$$d_2$$$ respectively. When the snowball hits either of two stones, it loses weight equal to the weight of that stone. If after this snowball has negative weight, then its weight becomes zero, but the snowball continues moving as before.  Find the weight of the snowball when it stops moving, that is, it reaches height\u00a00.",
    "editorial": "This problem can be solved in many ways, we will tell you one of them. Let's just iterate through all the heights of $$$i$$$ from $$$h$$$ to $$$1$$$. Inside the loop, we have to add $$$i$$$ to the weight of snowball, and then check whether there is a stone at this height. If there is, then you need to check whether weight of snowball is more than weight of the stone. If more \u2014 then subtract the weight of the stone from weight of snowball, if not \u2014 then assign the weight of snowball value 0. Code: ism_OK_tutorial"
}{
    "name": "Anya and Ghosts",
    "code": [
        "508",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 1600,
    "statement": "Anya loves to watch horror movies. In the best traditions of horror, she will be visited by m ghosts tonight. Anya has lots of candles prepared for the visits, each candle can produce light for exactly t seconds. It takes the girl one second to light one candle. More formally, Anya can spend one second to light one candle, then this candle burns for exactly t seconds and then goes out and can no longer be used.For each of the m ghosts Anya knows the time at which it comes: the i-th visit will happen wi seconds after midnight, all wi's are distinct. Each visit lasts exactly one second.What is the minimum number of candles Anya should use so that during each visit, at least r candles are burning? Anya can start to light a candle at any time that is integer number of seconds from midnight, possibly, at the time before midnight. That means, she can start to light a candle integer number of seconds before midnight or integer number of seconds after a midnight, or in other words in any integer moment of time.",
    "editorial": ""
}{
    "name": "String",
    "code": [
        "128",
        "B"
    ],
    "tags": [
        "brute force",
        "constructive algorithms",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ],
    "difficulty": 2100,
    "statement": "One day in the IT lesson Anna and Maria learned about the lexicographic order.String x is lexicographically less than string y, if either x is a prefix of y (and x \u2260 y), or there exists such i (1 \u2264 i \u2264 min(|x|, |y|)), that xi < yi, and for any j (1 \u2264 j < i) xj = yj. Here |a| denotes the length of the string a. The lexicographic comparison of strings is implemented by operator < in modern programming languages\u200b\u200b.The teacher gave Anna and Maria homework. She gave them a string of length n. They should write out all substrings of the given string, including the whole initial string, and the equal substrings (for example, one should write out the following substrings from the string \"aab\": \"a\", \"a\", \"aa\", \"ab\", \"aab\", \"b\"). The resulting strings should be sorted in the lexicographical order. The cunning teacher doesn't want to check all these strings. That's why she said to find only the k-th string from the list. Help Anna and Maria do the homework.",
    "editorial": ""
}{
    "name": "About Bacteria",
    "code": [
        "198",
        "A"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1700,
    "statement": "Qwerty the Ranger took up a government job and arrived on planet Mars. He should stay in the secret lab and conduct some experiments on bacteria that have funny and abnormal properties. The job isn't difficult, but the salary is high.At the beginning of the first experiment there is a single bacterium in the test tube. Every second each bacterium in the test tube divides itself into k bacteria. After that some abnormal effects create b more bacteria in the test tube. Thus, if at the beginning of some second the test tube had x bacteria, then at the end of the second it will have kx + b bacteria.The experiment showed that after n seconds there were exactly z bacteria and the experiment ended at this point.For the second experiment Qwerty is going to sterilize the test tube and put there t bacteria. He hasn't started the experiment yet but he already wonders, how many seconds he will need to grow at least z bacteria. The ranger thinks that the bacteria will divide by the same rule as in the first experiment. Help Qwerty and find the minimum number of seconds needed to get a tube with at least z bacteria in the second experiment.",
    "editorial": ""
}{
    "name": "Employment",
    "code": [
        "1214",
        "F"
    ],
    "tags": [
        "greedy",
        "sortings"
    ],
    "difficulty": 2700,
    "statement": "Two large companies \"Cecsi\" and \"Poca Pola\" are fighting against each other for a long time. In order to overcome their competitor, \"Poca Pola\" started a super secret project, for which it has total $$$n$$$ vacancies in all of their offices. After many tests and interviews $$$n$$$ candidates were selected and the only thing left was their employment.Because all candidates have the same skills, it doesn't matter where each of them will work. That is why the company decided to distribute candidates between workplaces so that the total distance between home and workplace over all candidates is minimal.It is well known that Earth is round, so it can be described as a circle, and all $$$m$$$ cities on Earth can be described as points on this circle. All cities are enumerated from $$$1$$$ to $$$m$$$ so that for each $$$i$$$ ($$$1 \\le i \\le m - 1$$$) cities with indexes $$$i$$$ and $$$i + 1$$$ are neighbors and cities with indexes $$$1$$$ and $$$m$$$ are neighbors as well. People can move only along the circle. The distance between any two cities equals to minimal number of transitions between neighboring cities you have to perform to get from one city to another. In particular, the distance between the city and itself equals $$$0$$$.The \"Poca Pola\" vacancies are located at offices in cities $$$a_1, a_2, \\ldots, a_n$$$. The candidates live in cities $$$b_1, b_2, \\ldots, b_n$$$. It is possible that some vacancies are located in the same cities and some candidates live in the same cities. The \"Poca Pola\" managers are too busy with super secret project, so you were asked to help \"Poca Pola\" to distribute candidates between workplaces, so that the sum of the distance between home and workplace over all candidates is minimum possible.",
    "editorial": "First, let's notice that the optimal answer can be achieved without changing the relative order of candidates. That means that if we order candidates by circle clockwise, the second candidate will work at the next clockwise workplace from the first candidate's workplace, the third candidate will work at the next clockwise workplace from the second candidate's workplace and so on. Let's prove it. If in optimal answer the order has changed, then there should be 2 candidates, so that the first of them lives earlier clockwise then the second and works at workplace, which is further. If we swap their workplaces, the distance between home and workplace for each of them will either stay the same or decrease. So, doing this swaps, we can achieve the situation, when the relative order of candidates stay the same.Now we can come up with simple $$$O(n^2)$$$ solution. Let's first sort all candidates and workplaces by their city number. Let's select some workplace for the first candidate. Because in the optimal answer the order of candidates will not change, for each candidate we know his workplace. Now in $$$O(n)$$$ time we can calculate the total distance. And because there are $$$n$$$ possible workplaces for the first candidate, the solution works in $$$O(n^2)$$$ time.To solve problem faster, let's notice, that if some candidate lives in city with number $$$x$$$ and his workplace has number $$$y$$$, the the total distance from home to work for him will be:   $$$-x + y + m$$$ if $$$y < x - m / 2$$$  $$$x - y$$$ if $$$x - m / 2 \\le y < x$$$  $$$-x + y$$$ if $$$x \\le y < x + m / 2$$$  $$$x - y + m$$$ if $$$x + m / 2 \\le y$$$  So for each candidate we have at most 4 intervals of workplaces positions, at which the sign before the candidate's home position in the distance formula stays the same. The same way for each workplace we have at most 4 intervals of candidates positions, where the sign before the workplace position in distance formula stays the same. Also, there are 4 intervals of candidates positions, where we need to add $$$m$$$ to the distance formula. Because the relative order of candidates stays the same, we can iterate over all possible workplaces for the first candidate and check the total distance in each variant. When we move first candidate workplace to the next, for some candidates and workplaces their distance formula can change, but for each of them it can change no more then 4 times. So we will totally do no more then $$$8n$$$ changes. All in all we will check all distances in $$$O(n \\log n)$$$ time (we have additional logarithm because of sorting)."
}{
    "name": "Covered Path",
    "code": [
        "534",
        "B"
    ],
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "difficulty": 1400,
    "statement": "The on-board computer on Polycarp's car measured that the car speed at the beginning of some section of the path equals v1 meters per second, and in the end it is v2 meters per second. We know that this section of the route took exactly t seconds to pass.Assuming that at each of the seconds the speed is constant, and between seconds the speed can change at most by d meters per second in absolute value (i.e., the difference in the speed of any two adjacent seconds does not exceed d in absolute value), find the maximum possible length of the path section in meters.",
    "editorial": ""
}{
    "name": "Excellent Arrays",
    "code": [
        "1550",
        "D"
    ],
    "tags": [
        "binary search",
        "combinatorics",
        "constructive algorithms",
        "implementation",
        "math",
        "sortings",
        "two pointers"
    ],
    "difficulty": 2300,
    "statement": "Let's call an integer array $$$a_1, a_2, \\dots, a_n$$$ good if $$$a_i \\neq i$$$ for each $$$i$$$.Let $$$F(a)$$$ be the number of pairs $$$(i, j)$$$ ($$$1 \\le i < j \\le n$$$) such that $$$a_i + a_j = i + j$$$.Let's say that an array $$$a_1, a_2, \\dots, a_n$$$ is excellent if:   $$$a$$$ is good;  $$$l \\le a_i \\le r$$$ for each $$$i$$$;  $$$F(a)$$$ is the maximum possible among all good arrays of size $$$n$$$. Given $$$n$$$, $$$l$$$ and $$$r$$$, calculate the number of excellent arrays modulo $$$10^9 + 7$$$.",
    "editorial": "Firstly, let's learn the structure of good array $$$a$$$ with maximum $$$F(a)$$$. Suppose, $$$a_i = i + k_i$$$, then $$$a_i + a_j = i + j$$$ $$$\\Leftrightarrow$$$ $$$k_i = -k_j$$$. In other words, we can group $$$a_i$$$ by $$$|k_i|$$$ and pairs will appear only inside each group. It's easy to prove that if the group has size $$$m$$$ then it's optimal to split it in half: one with $$$+k_i$$$ and other with $$$-k_i$$$. Then the number of pairs inside the group will be equal to $$$\\left\\lfloor \\frac{m}{2} \\right\\rfloor \\cdot \\left\\lceil \\frac{m}{2} \\right\\rceil$$$.It's also not hard to prove that in this case it's optimal to place all elements inside one group. In other words, it's optimal to make a half of all elements as $$$a_i = i + k$$$ and the other half as $$$a_i = i - k$$$ for some integer $$$k > 0$$$. Then $$$F(a) = \\left\\lfloor \\frac{n}{2} \\right\\rfloor \\cdot \\left\\lceil \\frac{n}{2} \\right\\rceil$$$.To achieve maximum $$$F(a)$$$ the excellent array should also have this structure. Let $$$\\mathit{half} = \\left\\lfloor \\frac{n}{2} \\right\\rfloor$$$. For a fixed $$$k$$$ if $$$n$$$ is even then we should choose exactly $$$\\mathit{half}$$$ positions $$$i$$$ to set as $$$a_i = i + k$$$, but if $$$n$$$ is odd, we can choose either $$$\\mathit{half}$$$ or $$$\\mathit{half} + 1$$$ positions.Let's analyze what happens with different $$$k$$$. Obviously, $$$k \\ge 1$$$. While $$$k \\le \\min(1 - l, r - n)$$$ both $$$i + k$$$ and $$$i - k$$$ are in the segment $$$[l, r]$$$ for any $$$i$$$. In this case we can choose any $$$a_i$$$ as $$$i + k$$$, so there are exactly $$$\\binom{n}{\\mathit{half}}$$$ ways for even $$$n$$$ and $$$\\binom{n}{\\mathit{half}} + \\binom{n}{\\mathit{half} + 1}$$$ ways for odd $$$n$$$.When $$$k > \\min(1 - l, r - n)$$$ then for $$$i \\in [1, \\mathit{lf})$$$ (where $$$\\mathit{lf} = \\max(1, l + k)$$$) there is only one choice\u00a0\u2014 to set $$$a_i = i + k$$$. Analogically, for $$$i \\in (\\mathit{rg}, n]$$$ (where $$$\\mathit{rg} = \\min(n, r - k)$$$) there is only choice to set $$$a_i = i - k$$$.What remains is $$$\\mathit{rg} - \\mathit{lf} + 1$$$ elements without restrictions, so there are $$$\\binom{\\mathit{rg} - \\mathit{lf} + 1}{\\mathit{half} - (\\mathit{lf} - 1)}$$$ ways to choose for even $$$n$$$ or $$$\\binom{\\mathit{rg} - \\mathit{lf} + 1}{\\mathit{half} - (\\mathit{lf} - 1)} + \\binom{\\mathit{rg} - \\mathit{lf} + 1}{\\mathit{half} + 1 - (\\mathit{lf} - 1)}$$$ ways for odd $$$n$$$.Note that it's convenient to say that $$$\\binom{n}{k} = 0$$$ if $$$k < 0$$$ or $$$n < k$$$, so we don't need extra checks.Lastly, note that we can process all $$$k \\in [1, \\min(1 - l, r - n)]$$$ with one formula and there are only $$$O(n)$$$ of $$$k > \\min(1 - l, r - n)$$$ with non-zero number of ways to choose, so we can iterate over all such $$$k$$$ straightforwardly.The total complexity is $$$O(n \\log{\\mathit{MOD}})$$$ because of precomputation of factorials and inverse factorials to calculate $$$\\binom{n}{k}$$$."
}{
    "name": "Numbers on the Chessboard",
    "code": [
        "1027",
        "B"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1200,
    "statement": "You are given a chessboard of size $$$n \\times n$$$. It is filled with numbers from $$$1$$$ to $$$n^2$$$ in the following way: the first $$$\\lceil \\frac{n^2}{2} \\rceil$$$ numbers from $$$1$$$ to $$$\\lceil \\frac{n^2}{2} \\rceil$$$ are written in the cells with even sum of coordinates from left to right from top to bottom. The rest $$$n^2 - \\lceil \\frac{n^2}{2} \\rceil$$$ numbers from $$$\\lceil \\frac{n^2}{2} \\rceil + 1$$$ to $$$n^2$$$ are written in the cells with odd sum of coordinates from left to right from top to bottom. The operation $$$\\lceil\\frac{x}{y}\\rceil$$$ means division $$$x$$$ by $$$y$$$ rounded up.For example, the left board on the following picture is the chessboard which is given for $$$n=4$$$ and the right board is the chessboard which is given for $$$n=5$$$.  You are given $$$q$$$ queries. The $$$i$$$-th query is described as a pair $$$x_i, y_i$$$. The answer to the $$$i$$$-th query is the number written in the cell $$$x_i, y_i$$$ ($$$x_i$$$ is the row, $$$y_i$$$ is the column). Rows and columns are numbered from $$$1$$$ to $$$n$$$.",
    "editorial": "Let's see the following fact: if we will decrease $$$\\lceil \\frac{n^2}{2} \\rceil$$$ from all numbers written in cells with an odd sum of coordinates and write out the numbers obtained on the board from left to right from top to bottom, the sequence will looks like $$$1, 1, 2, 2, \\dots, \\lceil \\frac{n^2}{2} \\rceil, \\lceil \\frac{n^2}{2} \\rceil$$$ for even $$$n$$$ (for odd $$$n$$$ there is only one number $$$\\lceil \\frac{n^2}{2} \\rceil$$$ at the end of the sequence, but, in general, it does not matter).Let's try to find out the answer for some query ($$$x, y$$$). Let $$$cnt=(x - 1) \\cdot n + y$$$ (1-indexed). There $$$cnt$$$ is the position of our cell in order of the written sequence. The first approximation of the answer is $$$\\lceil\\frac{cnt}{2}\\rceil$$$. But now we are remember that we decreased $$$\\lceil \\frac{n^2}{2} \\rceil$$$ from all numbers written in cells with an odd sum of coordinates. So if $$$x + y$$$ is even then the answer is $$$\\lceil\\frac{cnt}{2}\\rceil$$$, otherwise the answer is $$$\\lceil\\frac{cnt}{2}\\rceil + \\lceil\\frac{n^2}{2}\\rceil$$$. Note that you should be careful with integer overflow in C++, Java or similar languages. 64-bit datatype is quite enough.Time complexity: $$$O(q)$$$."
}{
    "name": "Boboniu and Bit Operations",
    "code": [
        "1395",
        "C"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "greedy"
    ],
    "difficulty": 1600,
    "statement": "Boboniu likes bit operations. He wants to play a game with you.Boboniu gives you two sequences of non-negative integers $$$a_1,a_2,\\ldots,a_n$$$ and $$$b_1,b_2,\\ldots,b_m$$$.For each $$$i$$$ ($$$1\\le i\\le n$$$), you're asked to choose a $$$j$$$ ($$$1\\le j\\le m$$$) and let $$$c_i=a_i\\& b_j$$$, where $$$\\&$$$ denotes the bitwise AND operation. Note that you can pick the same $$$j$$$ for different $$$i$$$'s.Find the minimum possible $$$c_1 | c_2 | \\ldots | c_n$$$, where $$$|$$$ denotes the bitwise OR operation.",
    "editorial": "Suppose the answer is $$$A$$$. Thus for all $$$i$$$ ($$$1\\le i\\le n$$$), $$$c_i | A = A$$$.Since $$$a_i, b_i <2^9$$$, we can enumerate all integers from $$$0$$$ to $$$2^9-1$$$, and check if there exists $$$j$$$ for each $$$i$$$ that $$$(a_i \\& b_j) | A = A$$$. The minimum of them will be the answer.The time complexity is $$$O(2^9\\cdot n^2)$$$"
}{
    "name": "Subway",
    "code": [
        "131",
        "D"
    ],
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "difficulty": 1600,
    "statement": "A subway scheme, classic for all Berland cities is represented by a set of n stations connected by n passages, each of which connects exactly two stations and does not pass through any others. Besides, in the classic scheme one can get from any station to any other one along the passages. The passages can be used to move in both directions. Between each pair of stations there is no more than one passage.Berland mathematicians have recently proved a theorem that states that any classic scheme has a ringroad. There can be only one ringroad. In other words, in any classic scheme one can find the only scheme consisting of stations (where any two neighbouring ones are linked by a passage) and this cycle doesn't contain any station more than once.This invention had a powerful social impact as now the stations could be compared according to their distance from the ringroad. For example, a citizen could say \"I live in three passages from the ringroad\" and another one could reply \"you loser, I live in one passage from the ringroad\". The Internet soon got filled with applications that promised to count the distance from the station to the ringroad (send a text message to a short number...).The Berland government decided to put an end to these disturbances and start to control the situation. You are requested to write a program that can determine the remoteness from the ringroad for each station by the city subway scheme.",
    "editorial": ""
}{
    "name": "Mahmoud and Ehab and the xor-MST",
    "code": [
        "959",
        "E"
    ],
    "tags": [
        "bitmasks",
        "dp",
        "graphs",
        "implementation",
        "math"
    ],
    "difficulty": 1900,
    "statement": "Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n - 1. For all 0 \u2264 u < v < n, vertex u and vertex v are connected with an undirected edge that has weight  (where  is the bitwise-xor operation). Can you find the weight of the minimum spanning tree of that graph?You can read about complete graphs in https://en.wikipedia.org/wiki/Complete_graphYou can read about the minimum spanning tree in https://en.wikipedia.org/wiki/Minimum_spanning_treeThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.",
    "editorial": ""
}{
    "name": "Holiday Wall Ornaments",
    "code": [
        "1575",
        "H"
    ],
    "tags": [
        "dp",
        "strings"
    ],
    "difficulty": 2200,
    "statement": "The Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string $$$a$$$ of length $$$n$$$. His favorite nephew has another binary string $$$b$$$ of length $$$m$$$ ($$$m \\leq n$$$).Mr. Chanek's nephew loves the non-negative integer $$$k$$$. His nephew wants exactly $$$k$$$ occurrences of $$$b$$$ as substrings in $$$a$$$. However, Mr. Chanek does not know the value of $$$k$$$. So, for each $$$k$$$ ($$$0 \\leq k \\leq n - m + 1$$$), find the minimum number of elements in $$$a$$$ that have to be changed such that there are exactly $$$k$$$ occurrences of $$$b$$$ in $$$a$$$.A string $$$s$$$ occurs exactly $$$k$$$ times in $$$t$$$ if there are exactly $$$k$$$ different pairs $$$(p,q)$$$ such that we can obtain $$$s$$$ by deleting $$$p$$$ characters from the beginning and $$$q$$$ characters from the end of $$$t$$$.",
    "editorial": ""
}{
    "name": "Jongmah",
    "code": [
        "1110",
        "D"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2200,
    "statement": "You are playing a game of Jongmah. You don't need to know the rules to solve this problem. You have $$$n$$$ tiles in your hand. Each tile has an integer between $$$1$$$ and $$$m$$$ written on it.To win the game, you will need to form some number of triples. Each triple consists of three tiles, such that the numbers written on the tiles are either all the same or consecutive. For example, $$$7, 7, 7$$$ is a valid triple, and so is $$$12, 13, 14$$$, but $$$2,2,3$$$ or $$$2,4,6$$$ are not. You can only use the tiles in your hand to form triples. Each tile can be used in at most one triple.To determine how close you are to the win, you want to know the maximum number of triples you can form from the tiles in your hand.",
    "editorial": "First thing to note is that one can try solving this problem with different greedy approaches, but authors don't know any correct greedy.To solve this problem, note that you can always replace $$$3$$$ triples of type $$$[x, x + 1, x + 2]$$$ with triples $$$[x, x, x]$$$, $$$[x + 1, x + 1, x + 1]$$$ and $$$[x + 2, x + 2, x + 2]$$$. So we can assume that there are at most $$$2$$$ triples of type $$$[x, x + 1, x + 2]$$$ for each $$$x$$$.Having noted this, you can write dynamic programming solution. Let ans[i][t1][t2] be the answer considering only the first $$$i$$$ denominations, and there are $$$t_1$$$ triples of type $$$[i - 1, i, i + 1]$$$ and $$$t_2$$$ triples of type $$$[i, i + 1, i + 2]$$$. Try all possible number $$$t_3$$$ of triples of type $$$[i + 1, i + 2, i + 3]$$$, put all the remaining tiles of denomination $$$i + 1$$$ into triples $$$[i + 1, i + 1, i + 1]$$$ and make a transition to ans[i + 1][t2][t3]."
}{
    "name": "Magical Permutation",
    "code": [
        "1163",
        "E"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "data structures",
        "graphs",
        "math"
    ],
    "difficulty": 2400,
    "statement": "Kuro has just learned about permutations and he is really excited to create a new permutation type. He has chosen $$$n$$$ distinct positive integers and put all of them in a set $$$S$$$. Now he defines a magical permutation to be: A permutation of integers from $$$0$$$ to $$$2^x - 1$$$, where $$$x$$$ is a non-negative integer.  The bitwise xor of any two consecutive elements in the permutation is an element in $$$S$$$.Since Kuro is really excited about magical permutations, he wants to create the longest magical permutation possible. In other words, he wants to find the largest non-negative integer $$$x$$$ such that there is a magical permutation of integers from $$$0$$$ to $$$2^x - 1$$$. Since he is a newbie in the subject, he wants you to help him find this value of $$$x$$$ and also the magical permutation for that $$$x$$$.",
    "editorial": "The idea here is iterate $$$x$$$ and check if it is possible to create a magical permutation for the current $$$x$$$ we are iterating through.An observation to be made is that if it is possible to create a magical permutation $$$P$$$ from $$$0$$$ to $$$2^x - 1$$$, then it must be possible to express each integer from $$$0$$$ to $$$2^x - 1$$$ as the xor value of elements in one subset of $$$S$$$. This is because $$$0$$$ is represented as the xor value of the empty subset of $$$S$$$. Because of that, every element to the left of $$$0$$$ in $$$P$$$ is also the xor value of one subset of $$$S$$$, and so is every element to the right of $$$0$$$ in $$$P$$$.Because of that, we first check that if we can create every integer from $$$0$$$ to $$$2^x - 1$$$ using only the xor values of every subset of $$$S$$$. This is possible by creating a basis for integers from $$$0$$$ to $$$2^x - 1$$$ \u2014 $$$x$$$ integers such that each integer from $$$0$$$ to $$$2^x - 1$$$ is the xor value of a subset of these $$$x$$$ integers \u2014 from $$$S$$$ using Gaussian elimination.Now, if it is possible to create such a basis for integers from $$$0$$$ to $$$2^x - 1$$$ using only elements of $$$S$$$, is it possible to create a magic permutation then? Recall that each integer from $$$0$$$ to $$$2^x - 1$$$ corresponds to the xor value of a subset of the basis, or in other words, corresponds to a bitmask of the basis. We can also narrow down the original condition, such that the xor value of any two consecutive elements belongs to the basis; or in other words, the corresponding bitmask of any two consecutive elements in the magical permutation differs by exactly 1 bit. The problem now becomes creating a permutation of integers from $$$0$$$ to $$$2^x - 1$$$ such that any two consecutive elements in this permutation differs by 1 bit, and then convert this permutation to a magical permutation using the created basis. It turns out that we can always do this using Gray codes, although DFS works just as well.It also turns out that the basis for integers from $$$0$$$ to $$$2^x - 1$$$ does not exceed $$$2^x - 1$$$, we can sort $$$S$$$ and create the basis along with checking the aforementioned condition.Complexity: $$$O(n \\log n + n \\log MAX + MAX)$$$ if Gray codes are used, or $$$O(n \\log n + n \\log MAX + MAX \\log MAX)$$$ is DFS is used instead, where $$$MAX$$$ denotes the maximum value of elements in $$$S$$$."
}{
    "name": "Cyclic Cipher",
    "code": [
        "901",
        "E"
    ],
    "tags": [
        "fft",
        "math"
    ],
    "difficulty": 3300,
    "statement": "  Senor Vorpal Kickass'o invented an innovative method to encrypt integer sequences of length n. To encrypt a sequence, one has to choose a secret sequence , that acts as a key.Vorpal is very selective, so the key should be such a sequence bi, that its cyclic shifts are linearly independent, that is, there is no non-zero set of coefficients x0, x1, ..., xn - 1, such that  for all k at the same time.After that for a sequence  you should build the following cipher:In other words, you are to compute the quadratic deviation between each cyclic shift of bi and the sequence ai. The resulting sequence is the Kickass's cipher. The cipher is in development right now and Vorpal wants to decipher a sequence after it has been encrypted. You are to solve this problem for him. You are given sequences ci and bi. You are to find all suitable sequences ai.",
    "editorial": "(a - b)2 = a2 + b2 - 2ab, hence, . Let a'i = ai - ai - 1, . Then . This corresponds to cyclic convolution of polynomials  and . These polynomials uniquely determined by values in roots of unity of degree n. Thus we can divide values of C by values of B in this points and return to polynomials from values in roots of unity. To do this one should compute discrete Fourier Transform in arbitrary length polynomial which can be done by Bluestein's algorithm. Note that you can't use complex fft here because real values can be very close to zero leading to great precision issues. Thus you should find some mod having root of unity of degree 2n and compute discrete transform over it. Thus we will find dk = ak - a0 for each k, which will allow us to recover a0, because .It can be proven that values of polynomial in roots of unity are eigenvalues of matrix of linear system thus cyclic shifts are linearly independent iff there is such mod which has root of unity of degree n and values of polynomial in all such roots doesn't equal zero. If it's true for polynomial in field of real numbers there will be only finite number of mods in which this may not be true (it only true if  of polynomial and xn - 1 isn't equal 1 in such mod)."
}{
    "name": "Fair Share",
    "code": [
        "1634",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "graph matchings",
        "graphs"
    ],
    "difficulty": 2400,
    "statement": "Even a cat has things it can do that AI cannot.\u2014 Fei-Fei LiYou are given $$$m$$$ arrays of positive integers. Each array is of even length.You need to split all these integers into two equal multisets $$$L$$$ and $$$R$$$, that is, each element of each array should go into one of two multisets (but not both). Additionally, for each of the $$$m$$$ arrays, exactly half of its elements should go into $$$L$$$, and the rest should go into $$$R$$$.Give an example of such a division or determine that no such division exists.",
    "editorial": "If there is a number that occurs an odd number of times in total, there is no answer.Otherwise, let us construct a bipartite graph as follows. The left part will denote the arrays ($$$m$$$ vertices) and the right part will denote the numbers (up to $$$\\sum n_i$$$ vertices). Each array vertex is connected to all the numbers contained in the array, counted with multiplicity. That is, a vertex $$$a$$$ from the left part is connected to a vertex $$$b$$$ from the right part $$$x$$$ times, where $$$x$$$ is the count of occurrences of the number $$$b$$$ in the $$$a$$$-th array.Notice that all vertices in both parts are of even degree because the length of each array is even and the number of occurrences of each number is even. Therefore we can find a directed Eulerian circuit of this graph. Then for edges like $$$a \\rightarrow b$$$ (going from the left to the right) let us add the number $$$b$$$ to $$$L$$$, and for edges like $$$a \\leftarrow b$$$ (going from the right to the left) add $$$b$$$ to $$$R$$$.This partitioning will obviously be valid. For each vertex on the left, the indegree equals the outdegree and hence each array is split in half, and for each vertex on the right the same condition holds, so each number occurs in $$$L$$$ and $$$R$$$ the same number of times and thus $$$L = R$$$."
}{
    "name": "Equalize the Array",
    "code": [
        "1490",
        "F"
    ],
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "math",
        "sortings"
    ],
    "difficulty": 1500,
    "statement": "Polycarp was gifted an array $$$a$$$ of length $$$n$$$. Polycarp considers an array beautiful if there exists a number $$$C$$$, such that each number in the array occurs either zero or $$$C$$$ times. Polycarp wants to remove some elements from the array $$$a$$$ to make it beautiful.For example, if $$$n=6$$$ and $$$a = [1, 3, 2, 1, 4, 2]$$$, then the following options are possible to make the array $$$a$$$ array beautiful:   Polycarp removes elements at positions $$$2$$$ and $$$5$$$, array $$$a$$$ becomes equal to $$$[1, 2, 1, 2]$$$;  Polycarp removes elements at positions $$$1$$$ and $$$6$$$, array $$$a$$$ becomes equal to $$$[3, 2, 1, 4]$$$;  Polycarp removes elements at positions $$$1, 2$$$ and $$$6$$$, array $$$a$$$ becomes equal to $$$[2, 1, 4]$$$; Help Polycarp determine the minimum number of elements to remove from the array $$$a$$$ to make it beautiful.",
    "editorial": "Let's calculate the value of $$$cnt_x$$$\u00a0\u2014 how many times the number $$$x$$$ occurs in the array $$$a$$$. We will iterate over the value of $$$C$$$ and look for the minimum number of moves necessary for each number to appear in the $$$a$$$ array either $$$0$$$ times, or $$$C$$$ times. Note that if there is no such number $$$y$$$ that $$$cnt_y = C$$$, then such a value of $$$C$$$ will not give the minimum answer (because we have removed unnecessary elements).Then, for a specific $$$C$$$, the answer is calculated as follows: $$$$$$ \\sum\\limits_{cnt_x<C} cnt_x + \\sum\\limits_{cnt_x \\ge C}(cnt_x - C) $$$$$$Since the number of candidates for the value of $$$C$$$ is no more than $$$n$$$, this method works in $$$\\mathcal{O}(n^2)$$$.Then there are two ways to optimize our solution:   you can consider only unique values of $$$C$$$ (there are no more than $$$\\mathcal{O}(\\sqrt n)$$$), and get a solution in $$$\\mathcal{O}(n \\sqrt n)$$$;  you can sort the values $$$cnt_x$$$ and use prefix sums, this solution works for $$$\\mathcal{O}(n \\log n)$$$ or for $$$\\mathcal{O}(n)$$$ (if you use counting sort). "
}{
    "name": "Frodo and pillows",
    "code": [
        "760",
        "B"
    ],
    "tags": [
        "binary search",
        "greedy"
    ],
    "difficulty": 1500,
    "statement": "n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n \u2264 m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. Frodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?",
    "editorial": "Let's do binary search on the answer. How to check if Frodo can have x pillows or more? We need to calculate the least amount of pillows we need to give to all the hobbits and compare it to m.The number of pillows is minimized if we give x - 1 pillows to Frodo's neighbors, x - 2 pillows to the hobbits at the distance 2 from Frodo and so on, until we reach 1 pillow or until we reach an end of beds row. The total amount of pillows on one side of Frodo can be calculated using a formula.Suppose there are y beds on one side of Frodo. There are two cases: if y > x - 1, then the total number of pillows is , otherwise the total number of pillows is ."
}{
    "name": "Restoring Map",
    "code": [
        "566",
        "E"
    ],
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "trees"
    ],
    "difficulty": 3200,
    "statement": "Archaeologists found some information about an ancient land of Treeland. We know for sure that the Treeland consisted of n cities connected by the n - 1 road, such that you can get from each city to any other one along the roads. However, the information about the specific design of roads in Treeland has been lost. The only thing that the archaeologists can use is the preserved information about near cities.Two cities of Treeland were called near, if it were possible to move from one city to the other one by moving through at most two roads. Also, a city is considered near to itself. During the recent excavations archaeologists found a set of n notes, each of them represents a list of cities, near to some of the n cities of the country. However, unfortunately, none of the found records lets you understand in what order the cities go in the list and for which city in the list the near to it cities were listed. Help the archaeologists and restore any variant of the map of Treeland that meets the found information.",
    "editorial": ""
}{
    "name": "AGAGA XOOORRR",
    "code": [
        "1516",
        "B"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "greedy"
    ],
    "difficulty": 1500,
    "statement": "Baby Ehab is known for his love for a certain operation. He has an array $$$a$$$ of length $$$n$$$, and he decided to keep doing the following operation on it:   he picks $$$2$$$ adjacent elements; he then removes them and places a single integer in their place: their bitwise XOR. Note that the length of the array decreases by one. Now he asks you if he can make all elements of the array equal. Since babies like to make your life harder, he requires that you leave at least $$$2$$$ elements remaining.",
    "editorial": ""
}{
    "name": "Is it rated - 2",
    "code": [
        "1505",
        "A"
    ],
    "tags": [
        "*special",
        "implementation",
        "interactive"
    ],
    "difficulty": 900,
    "statement": "InteractionThis is an interactive problem. You need to read participants' queries from standard input and print your responses to standard output. You don't know the number of queries upfront, so you'll need to process them as you get them; you'll know you're done once you reach the end of the file.In each query, you will be asked the question, written in one line. You have to answer it correctly, patiently and without any display of emotions. Your response is case-insensitive.Please make sure to use the stream flushing operation after each response in order not to leave part of your output in some buffer.ExampleInput\nIs it rated?\nIs it rated?\nIs it rated?\nOutput\nNO\nNO\nNO",
    "editorial": ""
}{
    "name": "Triangle Coloring",
    "code": [
        "1795",
        "D"
    ],
    "tags": [
        "combinatorics",
        "math"
    ],
    "difficulty": "",
    "statement": "You are given an undirected graph consisting of $$$n$$$ vertices and $$$n$$$ edges, where $$$n$$$ is divisible by $$$6$$$. Each edge has a weight, which is a positive (greater than zero) integer.The graph has the following structure: it is split into $$$\\frac{n}{3}$$$ triples of vertices, the first triple consisting of vertices $$$1, 2, 3$$$, the second triple consisting of vertices $$$4, 5, 6$$$, and so on. Every pair of vertices from the same triple is connected by an edge. There are no edges between vertices from different triples.You have to paint the vertices of this graph into two colors, red and blue. Each vertex should have exactly one color, there should be exactly $$$\\frac{n}{2}$$$ red vertices and $$$\\frac{n}{2}$$$ blue vertices. The coloring is called valid if it meets these constraints.The weight of the coloring is the sum of weights of edges connecting two vertices with different colors.Let $$$W$$$ be the maximum possible weight of a valid coloring. Calculate the number of valid colorings with weight $$$W$$$, and print it modulo $$$998244353$$$.",
    "editorial": "Let's ignore the constraint on the number of red/blue vertices for a moment. What is the maximum possible weight of a coloring? From any triple, we can have any two edges connect vertices of different colors. So, the maximum possible weight of a coloring (not necessarily a valid one) is the sum of all edge weights except for the minimum weight in each triple.Let's show that it is always possible to choose a valid coloring to achieve this weight. In each triple, we should make sure that the two maximum edges connect vertices with different colors; to do this, we can color the vertex incident to both of these edges in one color, and the two other vertices will be painted in the other color. So, for each triple of vertices, there will be either one red vertex and two blue ones, or two red ones and one blue. Let's suppose the first $$$\\frac{n}{6}$$$ triples have one red vertex and two blue vertices each, and the other $$$\\frac{n}{6}$$$ triples have one blue vertex and two red vertices each. That way, we obtain a valid coloring with maximum possible weight.Okay, now let's try to find out how do we calculate the number of valid colorings with the maximum possible weight. Each triple of vertices will be either \"red\" (two red vertices, one blue), or \"blue\" (the other way around). Since exactly half of the vertices should be red, then exactly half of the triples should be red, so the number of ways to choose a \"color\" for all triples is $$${n/3}\\choose{n/6}$$$.After choosing the color of each triple, let's choose how we actually color them. The triples are independent, so for each triple, we can introduce the coefficient $$$c_i$$$, which is the number of ways to color it so that its weight is maximized, and the triple has some specific type (either red or blue, doesn't matter since these are symmetric). Choosing the vertex which will be different from its neighbors is equivalent to choosing the edge which will not be included in the weight of the coloring (this is the edge which is not incident to the chosen vertex). So, $$$c_i$$$ is equal to the number of ways to choose that vertex in the $$$i$$$-th triple so that the weight is maximized; i. e. the weight of the edge not incident to the chosen vertex should be minimized. Thus, $$$c_i$$$ is just the number of minimum edge weights in the $$$i$$$-th triple.The formula for the final answer is $$${{n/3}\\choose{n/6}} \\prod\\limits_{i=1}^{n/3} c_i$$$."
}{
    "name": "Years",
    "code": [
        "1424",
        "G"
    ],
    "tags": [
        "data structures",
        "sortings"
    ],
    "difficulty": 1300,
    "statement": "During one of the space missions, humans have found an evidence of previous life at one of the planets. They were lucky enough to find a book with birth and death years of each individual that had been living at this planet. What's interesting is that these years are in the range $$$(1, 10^9)$$$! Therefore, the planet was named Longlifer.In order to learn more about Longlifer's previous population, scientists need to determine the year with maximum number of individuals that were alive, as well as the number of alive individuals in that year. Your task is to help scientists solve this problem!",
    "editorial": ""
}{
    "name": "Donkey and Stars",
    "code": [
        "249",
        "D"
    ],
    "tags": [
        "data structures",
        "dp",
        "geometry",
        "math",
        "sortings"
    ],
    "difficulty": 2700,
    "statement": "In the evenings Donkey would join Shrek to look at the stars. They would sit on a log, sipping tea and they would watch the starry sky. The sky hung above the roof, right behind the chimney. Shrek's stars were to the right of the chimney and the Donkey's stars were to the left. Most days the Donkey would just count the stars, so he knew that they are exactly n. This time he wanted a challenge. He imagined a coordinate system: he put the origin of the coordinates at the intersection of the roof and the chimney, directed the OX axis to the left along the roof and the OY axis \u2014 up along the chimney (see figure). The Donkey imagined two rays emanating from he origin of axes at angles \u03b11 and \u03b12 to the OX axis.  Now he chooses any star that lies strictly between these rays. After that he imagines more rays that emanate from this star at the same angles \u03b11 and \u03b12 to the OX axis and chooses another star that lies strictly between the new rays. He repeats the operation as long as there still are stars he can choose between the rays that emanate from a star.   As a result, the Donkey gets a chain of stars. He can consecutively get to each star if he acts by the given rules.Your task is to find the maximum number of stars m that the Donkey's chain can contain.Note that the chain must necessarily start in the point of the origin of the axes, that isn't taken into consideration while counting the number m of stars in the chain.",
    "editorial": ""
}{
    "name": "Tiles",
    "code": [
        "1473",
        "G"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "fft",
        "math"
    ],
    "difficulty": 2800,
    "statement": "Consider a road consisting of several rows. Each row is divided into several rectangular tiles, and all tiles in the same row are equal. The first row contains exactly one rectangular tile. Look at the picture below which shows how the tiles are arranged.The road is constructed as follows:   the first row consists of $$$1$$$ tile;  then $$$a_1$$$ rows follow; each of these rows contains $$$1$$$ tile greater than the previous row;  then $$$b_1$$$ rows follow; each of these rows contains $$$1$$$ tile less than the previous row;  then $$$a_2$$$ rows follow; each of these rows contains $$$1$$$ tile greater than the previous row;  then $$$b_2$$$ rows follow; each of these rows contains $$$1$$$ tile less than the previous row;  ...  then $$$a_n$$$ rows follow; each of these rows contains $$$1$$$ tile greater than the previous row;  then $$$b_n$$$ rows follow; each of these rows contains $$$1$$$ tile less than the previous row.   An example of the road with $$$n = 2$$$, $$$a_1 = 4$$$, $$$b_1 = 2$$$, $$$a_2 = 2$$$, $$$b_2 = 3$$$. Rows are arranged from left to right. You start from the only tile in the first row and want to reach the last row (any tile of it). From your current tile, you can move to any tile in the next row which touches your current tile.Calculate the number of different paths from the first row to the last row. Since it can be large, print it modulo $$$998244353$$$.",
    "editorial": "The group of the rows where the number of rectangular tiles increases $$$a$$$ times and then decreases $$$b$$$ times can be represented as a rectangular table, with $$$a+b+1$$$ diagonals, where the size of the first diagonal is equal to the number of rectangular tiles before the operations are applied (let their number be $$$m$$$), and the size of the last diagonal is $$$m+a-b$$$. In such a rectangular table, one can move from the cell $$$(i, j)$$$ to the cells $$$(i+1, j)$$$ and $$$(i, j+1)$$$ (if they exist), which lie on the next diagonal (next row in terms of the original problem). It's a well-known fact that the number of different paths from one cell to another is some binomial coefficient.Let's define $$$ans_{i,j}$$$ as the number of paths from the $$$1$$$-st row to the $$$j$$$-th tile in the ($$$\\sum\\limits_{k=1}^{i} (a_i+b_i)$$$)-th row (i.e. row after the $$$i$$$-th group of operations).Now we want to find the values of $$$ans_{i}$$$ using the values of $$$ans_{i-1}$$$ (let its size be $$$m$$$). Using the fact described in the first paragraphs we know that $$$ans_{i, j}$$$ depends on $$$ans_{i-1, k}$$$ with some binomial coefficient. In fact $$$ans_{i, j} = \\sum\\limits_{k=1}^{m} \\binom{a_i+b_i}{b_i-k+j} ans_{i-1,k}$$$ for $$$1 \\le j \\le m + a_i - b_i$$$. But this solution is too slow. To speed up this solution we have to notice that the given formula is a convolution of $$$ans_{i-1}$$$ and some binomial coefficients. So we can use NTT to multiply them in $$$O(n\\log n)$$$ instead of $$$O(n^2)$$$ time."
}{
    "name": "Sum of 2050",
    "code": [
        "1517",
        "A"
    ],
    "tags": [
        "greedy",
        "math"
    ],
    "difficulty": 800,
    "statement": "A number is called 2050-number if it is $$$2050$$$, $$$20500$$$, ..., ($$$2050 \\cdot 10^k$$$ for integer $$$k \\ge 0$$$).Given a number $$$n$$$, you are asked to represent $$$n$$$ as the sum of some (not necessarily distinct) 2050-numbers. Compute the minimum number of 2050-numbers required for that.",
    "editorial": "First, we need to check whether $$$n$$$ is the multiple of $$$2050$$$. If $$$n$$$ is not the multiple of $$$2050$$$, the answer is always $$$-1$$$.Then we can divide $$$n$$$ by $$$2050$$$, the problem now is how to represent $$$n$$$ as the sum of powers of $$$10$$$. So the answer is the sum of its digits in decimal representation."
}{
    "name": "Hossam and a Letter",
    "code": [
        "1771",
        "E"
    ],
    "tags": [
        "brute force",
        "dp",
        "implementation",
        "two pointers"
    ],
    "difficulty": 2500,
    "statement": "Hossam bought a new piece of ground with length $$$n$$$ and width $$$m$$$, he divided it into an $$$n \\cdot m$$$ grid, each cell being of size $$$1\\times1$$$.Since Hossam's name starts with the letter 'H', he decided to draw the capital letter 'H' by building walls of size $$$1\\times1$$$ on some squares of the ground. Each square $$$1\\times1$$$ on the ground is assigned a quality degree: perfect, medium, or bad.The process of building walls to form up letter 'H' has the following constraints:  The letter must consist of one horizontal and two vertical lines.  The vertical lines must not be in the same or neighboring columns.  The vertical lines must start in the same row and end in the same row (and thus have the same length).  The horizontal line should connect the vertical lines, but must not cross them.  The horizontal line can be in any row between the vertical lines (not only in the middle), except the top and the bottom one. (With the horizontal line in the top row the letter looks like 'n', and in the bottom row like 'U'.)  It is forbidden to build walls in cells of bad quality.  You can use at most one square of medium quality.  You can use any number of squares of perfect quality. Find the maximum number of walls that can be used to draw the letter 'H'.Check the note for more clarification.",
    "editorial": "Let's preprocess the following data for each cell.1. first medium cell above current cell. 2. first medium cell below current cell. 3. first bad cell above current cell. 4. first bad cell below current cell.Then we will try to solve the problem for each row (i), and 2 columns (j, k).Now we have a horizontal line in row (i), and we can calculate the length of vertical line by the following.There is two cases:In case of the horizontal line contains one letter 'm'.For each column (j, k): get first cell above it the don't contain ('#' or 'm') and first cell below it the don't contain ('#' or 'm').In case of the horizontal line doesn't contain any letter 'm'.We will try to get the 4 cells as it contains letter 'm', but in this case we will 4 trials.for each cell from the 4 cells, we allow to have only one letter 'm' in that line.After getting above cells and below cells for each line. the starting cell will be the maximum between the two above cells, and the ending cell will be the minimum between the two below cells.Then we need to check that starting cell is above the current row (i) to avoid making letter n instead of HAnd check that ending cell is below the current row (i) to avoid making letter u instead of H.Since n, m has the same maximum limit 400.Thus, time complexity of this solution is $$$O(n^3)$$$."
}{
    "name": "SSeeeeiinngg DDoouubbllee",
    "code": [
        "1758",
        "A"
    ],
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "difficulty": 800,
    "statement": "A palindrome is a string that reads the same backward as forward. For example, the strings $$$\\texttt{z}$$$, $$$\\texttt{aaa}$$$, $$$\\texttt{aba}$$$, and $$$\\texttt{abccba}$$$ are palindromes, but $$$\\texttt{codeforces}$$$ and $$$\\texttt{ab}$$$ are not.The double of a string $$$s$$$ is obtained by writing each character twice. For example, the double of $$$\\texttt{seeing}$$$ is $$$\\texttt{sseeeeiinngg}$$$.Given a string $$$s$$$, rearrange its double to form a palindrome. Output the rearranged string. It can be proven that such a rearrangement always exists.",
    "editorial": "Output $$$s + \\text{reverse}(s)$$$. It works, since each character in $$$s$$$ occurs exactly twice (once in $$$s$$$, once in $$$\\text{reverse}(s)$$$), and the result is a palindrome."
}{
    "name": "Ancient Prophesy",
    "code": [
        "260",
        "B"
    ],
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "difficulty": 1600,
    "statement": "A recently found Ancient Prophesy is believed to contain the exact Apocalypse date. The prophesy is a string that only consists of digits and characters \"-\".We'll say that some date is mentioned in the Prophesy if there is a substring in the Prophesy that is the date's record in the format \"dd-mm-yyyy\". We'll say that the number of the date's occurrences is the number of such substrings in the Prophesy. For example, the Prophesy \"0012-10-2012-10-2012\" mentions date 12-10-2012 twice (first time as \"0012-10-2012-10-2012\", second time as \"0012-10-2012-10-2012\").The date of the Apocalypse is such correct date that the number of times it is mentioned in the Prophesy is strictly larger than that of any other correct date.A date is correct if the year lies in the range from 2013 to 2015, the month is from 1 to 12, and the number of the day is strictly more than a zero and doesn't exceed the number of days in the current month. Note that a date is written in the format \"dd-mm-yyyy\", that means that leading zeroes may be added to the numbers of the months or days if needed. In other words, date \"1-1-2013\" isn't recorded in the format \"dd-mm-yyyy\", and date \"01-01-2013\" is recorded in it.Notice, that any year between 2013 and 2015 is not a leap year.",
    "editorial": ""
}{
    "name": "Quarrel",
    "code": [
        "29",
        "E"
    ],
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "difficulty": 2400,
    "statement": "Friends Alex and Bob live in Bertown. In this town there are n crossroads, some of them are connected by bidirectional roads of equal length. Bob lives in a house at the crossroads number 1, Alex \u2014 in a house at the crossroads number n.One day Alex and Bob had a big quarrel, and they refused to see each other. It occurred that today Bob needs to get from his house to the crossroads n and Alex needs to get from his house to the crossroads 1. And they don't want to meet at any of the crossroads, but they can meet in the middle of the street, when passing it in opposite directions. Alex and Bob asked you, as their mutual friend, to help them with this difficult task.Find for Alex and Bob such routes with equal number of streets that the guys can follow these routes and never appear at the same crossroads at the same time. They are allowed to meet in the middle of the street when moving toward each other (see Sample 1). Among all possible routes, select such that the number of streets in it is the least possible. Until both guys reach their destinations, none of them can stay without moving. The guys are moving simultaneously with equal speeds, i.e. it is possible that when one of them reaches some of the crossroads, the other one leaves it. For example, Alex can move from crossroad 1 to crossroad 2, while Bob moves from crossroad 2 to crossroad 3.If the required routes don't exist, your program should output -1.",
    "editorial": ""
}{
    "name": "Worms",
    "code": [
        "474",
        "B"
    ],
    "tags": [
        "binary search",
        "implementation"
    ],
    "difficulty": 1200,
    "statement": "It is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.Marmot brought Mole n ordered piles of worms such that i-th pile contains ai worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a1, worms in second pile are labeled with numbers a1 + 1 to a1 + a2 and so on. See the example for a better understanding.Mole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.Poor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.",
    "editorial": ""
}{
    "name": "Inversion SwapSort",
    "code": [
        "1375",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "difficulty": 2500,
    "statement": "Madeline has an array $$$a$$$ of $$$n$$$ integers. A pair $$$(u, v)$$$ of integers forms an inversion in $$$a$$$ if:  $$$1 \\le u < v \\le n$$$.  $$$a_u > a_v$$$. Madeline recently found a magical paper, which allows her to write two indices $$$u$$$ and $$$v$$$ and swap the values $$$a_u$$$ and $$$a_v$$$. Being bored, she decided to write a list of pairs $$$(u_i, v_i)$$$ with the following conditions:  all the pairs in the list are distinct and form an inversion in $$$a$$$.  all the pairs that form an inversion in $$$a$$$ are in the list.  Starting from the given array, if you swap the values at indices $$$u_1$$$ and $$$v_1$$$, then the values at indices $$$u_2$$$ and $$$v_2$$$ and so on, then after all pairs are processed, the array $$$a$$$ will be sorted in non-decreasing order. Construct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.",
    "editorial": "We can prove that the answer always exists. Let's first solve the problem for a permutation of length $$$n$$$.Let's define $$$pos_i (1 \\le i \\le n)$$$ as the index of $$$i$$$ in the permutation.First we are going to use all the pairs whose second element is $$$n$$$. Let's define the resulting permutation that we get, after using all these pairs in some order, as $$$b$$$. We want $$$b$$$ to satisfy all of these conditions.   $$$b_n=n$$$  If $$$a_i>a_j$$$ then $$$b_i>b_j$$$ ($$$1 \\le i<j \\le n-1$$$)  If $$$a_i<a_j$$$ then $$$b_i<b_j$$$ ($$$1 \\le i<j \\le n-1$$$)  We can achieve this if we use the pairs in the order $$$(pos_{a_{n}+1},n),(pos_{a_{n}+2},n),...,(pos_{n},n)$$$. It can be easily seen that after doing this $$$a_n+k$$$ $$$(0 \\le k \\le n-a_n-1)$$$ in the resulting permutation will have the same position that $$$a_n+k+1$$$ had in the starting permutation. So basically after doing operations in this order we are decreasing all the values in the starting permutation that are greater than $$$a_n$$$ by 1 and we make the last element equal to $$$n$$$. It can be easily proven that this permutation satisfies the conditions listed above. After this we can remove the last element and solve the problem for the remaining part of the permutation (which is a permutation itself because the last element was $$$n$$$). This way all the pairs of inversions that are in the new permutation coincide with the unused pairs written on the paper.So we solved the problem for a permutation, how can we approach the general problem? For every $$$i>j, a_i=a_j$$$ we can assume that $$$a_i>a_j$$$, and this won't change anything because the order of equal elements doesn't matter and we are not adding any inversions by assuming this. So after doing this we can easily squeeze the numbers into a permutation and solve the problem for a permutation.Total complexity $$$O(n^2logn)$$$ or $$$O(n^2)$$$."
}{
    "name": "Open Communication",
    "code": [
        "993",
        "B"
    ],
    "tags": [
        "bitmasks",
        "brute force"
    ],
    "difficulty": 1900,
    "statement": "Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.",
    "editorial": "One way to approach this problem is to1. Iterate over each pair $$$p1$$$ communicated by the first participant, and do the following:Iterate over all pairs $$$p2$$$ of the second participant that are not equal to $$$p1$$$ and count whether the first number of $$$p1$$$ appears in any of them and whether the second number of $$$p1$$$ appears in any of them. If only one of them appears, that number is a candidate to be the matching number. If after iterating over all pairs communicated by the first participant only one candidate number was observed, then we know with certainty that that number is the one, and can immediately return it.2. Do (1) but iterating over the numbers communicated by the second participant in the outer loop.3. If at this point no number was returned, the answer is either -1 or 0. It is -1 iff for some pair $$$(a,b)$$$ communicated by one of the participants, there are both pairs $$$(a, c)$$$ and $$$(b, d)$$$ among pairs communicated by the other participants, such that $$$c \\ne b$$$ and $$$d \\ne a$$$ (but possibly $$$c = d$$$), since in that case if the first participant indeed has the pair $$$(a, b)$$$, they can't tell whether the actual number is $$$a$$$ or $$$b$$$. Otherwise the answer is 0."
}{
    "name": "Guess Your Way Out! II",
    "code": [
        "558",
        "D"
    ],
    "tags": [
        "data structures",
        "implementation",
        "sortings"
    ],
    "difficulty": 2300,
    "statement": "Amr bought a new video game \"Guess Your Way Out! II\". The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height h. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node.Let's index all the nodes of the tree such that   The root is number 1  Each internal node i (i \u2264 2h - 1 - 1) will have a left child with index = 2i and a right child with index = 2i + 1 The level of a node is defined as 1 for a root, or 1 + level of parent of the node otherwise. The vertices of the level h are called leaves. The exit to the maze is located at some leaf node n, the player doesn't know where the exit is so he has to guess his way out! In the new version of the game the player is allowed to ask questions on the format \"Does the ancestor(exit, i) node number belong to the range [L, R]?\". Here ancestor(v, i) is the ancestor of a node v that located in the level i. The game will answer with \"Yes\" or \"No\" only. The game is designed such that it doesn't always answer correctly, and sometimes it cheats to confuse the player!.Amr asked a lot of questions and got confused by all these answers, so he asked you to help him. Given the questions and its answers, can you identify whether the game is telling contradictory information or not? If the information is not contradictory and the exit node can be determined uniquely, output its number. If the information is not contradictory, but the exit node isn't defined uniquely, output that the number of questions is not sufficient. Otherwise output that the information is contradictory.",
    "editorial": ""
}{
    "name": "Save the City!",
    "code": [
        "67",
        "E"
    ],
    "tags": [
        "geometry"
    ],
    "difficulty": 2500,
    "statement": "In the town of Aalam-Aara (meaning the Light of the Earth), previously there was no crime, no criminals but as the time progressed, sins started creeping into the hearts of once righteous people. Seeking solution to the problem, some of the elders found that as long as the corrupted part of population was kept away from the uncorrupted part, the crimes could be stopped. So, they are trying to set up a compound where they can keep the corrupted people. To ensure that the criminals don't escape the compound, a watchtower needs to be set up, so that they can be watched.Since the people of Aalam-Aara aren't very rich, they met up with a merchant from some rich town who agreed to sell them a land-plot which has already a straight line fence AB along which a few points are set up where they can put up a watchtower. Your task is to help them find out the number of points on that fence where the tower can be put up, so that all the criminals can be watched from there. Only one watchtower can be set up. A criminal is watchable from the watchtower if the line of visibility from the watchtower to him doesn't cross the plot-edges at any point between him and the tower i.e. as shown in figure 1 below, points X, Y, C and A are visible from point B but the points E and D are not.    Figure 1     Figure 2 Assume that the land plot is in the shape of a polygon and coordinate axes have been setup such that the fence AB is parallel to x-axis and the points where the watchtower can be set up are the integer points on the line. For example, in given figure 2, watchtower can be setup on any of five integer points on AB i.e. (4, 8), (5, 8), (6, 8), (7, 8) or (8, 8). You can assume that no three consecutive points are collinear and all the corner points other than A and B, lie towards same side of fence AB. The given polygon doesn't contain self-intersections.",
    "editorial": ""
}{
    "name": "Points on the line",
    "code": [
        "940",
        "A"
    ],
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "difficulty": 1200,
    "statement": "We've got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round. The diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset {1, 3, 2, 1} is 2.Diameter of multiset consisting of one point is 0.You are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?",
    "editorial": "It's clear that diameter of the multiset of points equals to difference of coordinates of point with maximum coordinate and point with minimum coordinate. So we can iterate over all possible pairs of maximum and minimum point and check number of remaining points in O(n). This solution works in O(n3).Of course, there are faster solutions."
}{
    "name": "Inna and Huge Candy Matrix",
    "code": [
        "400",
        "C"
    ],
    "tags": [
        "implementation",
        "math"
    ],
    "difficulty": 1500,
    "statement": "Inna and Dima decided to surprise Sereja. They brought a really huge candy matrix, it's big even for Sereja! Let's number the rows of the giant matrix from 1 to n from top to bottom and the columns \u2014 from 1 to m, from left to right. We'll represent the cell on the intersection of the i-th row and j-th column as (i, j). Just as is expected, some cells of the giant candy matrix contain candies. Overall the matrix has p candies: the k-th candy is at cell (xk, yk).The time moved closer to dinner and Inna was already going to eat p of her favourite sweets from the matrix, when suddenly Sereja (for the reason he didn't share with anyone) rotated the matrix x times clockwise by 90 degrees. Then he performed the horizontal rotate of the matrix y times. And then he rotated the matrix z times counterclockwise by 90 degrees. The figure below shows how the rotates of the matrix looks like.  Inna got really upset, but Duma suddenly understood two things: the candies didn't get damaged and he remembered which cells contained Inna's favourite sweets before Sereja's strange actions. Help guys to find the new coordinates in the candy matrix after the transformation Sereja made!",
    "editorial": ""
}{
    "name": "Traveling Around the Golden Ring of Berland",
    "code": [
        "1211",
        "B"
    ],
    "tags": [
        "*special",
        "implementation"
    ],
    "difficulty": 1500,
    "statement": "The Golden Ring is the special tourist route in Berland. This route consists of $$$n$$$\u00a0cities and the cyclic railway route. Cities are numbered from $$$1$$$ to $$$n$$$\u00a0so that:  the next city for $$$1$$$ is the city $$$2$$$,  the next city for $$$2$$$ is the city $$$3$$$,  ...  the next city for $$$n$$$ is the city $$$1$$$. Thus, the route is a cycle, cities are numbered in the direction of travel (the route is directed in one way).Blogger Polycarp wants to start his journey in the city $$$1$$$. For each city he knows the value $$$a_i$$$\u00a0\u2014 how many selfies he wants to do in $$$i$$$-th city. He can take no more than one selfie in one visit to each city. Since he is traveling by train, he can't skip the city (he always moves from the city $$$i$$$ to the city $$$i+1$$$\u00a0for $$$1 \\le i < n$$$ and from $$$n$$$ to $$$1$$$). Thus, when the train stops in the city, Polycarp must visit this city. If Polycarp visits the city multiple times, all visits are counted separately.What is the least number of city visits Polycarp will have to complete to fulfill his plan for the number of selfies for each city? Note that he always visits the city $$$1$$$, since it is this city that his journey begins in.",
    "editorial": "The first solution is to find $$$w = \\max a_i-1$$$. We need to make $$$w$$$ whole cycles plus some partial cycle. The last addend (partial cycle) is the index of the last occurrence of $$$\\max a_i$$$.Let's iterate through all possible $$$a_i$$$ and consider the length of the minimal path to make exactly $$$a_i$$$ selfie in the city $$$i$$$ in total (just do not consider other $$$a_j$$$ for other cities). If is exactly $$$i + (a_i - 1) \\cdot n$$$ (or $$$0$$$ if $$$a_i=0$$$). The answer is the maximum value among all of them.Here is the example of a solution in Kotlin:fun main() {    val n = readLine()!!.toLong()    val a = readLine()!!.split(\" \").map { it.toInt() }    var ans = 0L    for ((i, k) in a.withIndex()) {        if (k == 0) continue        var visits = (i + 1).toLong()        if (k > 0) visits += (k - 1) * n        if (visits > ans) ans = visits    }    println(ans)}"
}{
    "name": "Fox And Jumping",
    "code": [
        "510",
        "D"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "math"
    ],
    "difficulty": 1900,
    "statement": "Fox Ciel is playing a game. In this game there is an infinite long tape with cells indexed by integers (positive, negative and zero). At the beginning she is standing at the cell 0.There are also n cards, each card has 2 attributes: length li and cost ci. If she pays ci dollars then she can apply i-th card. After applying i-th card she becomes able to make jumps of length li, i. e. from cell x to cell (x - li) or cell (x + li).She wants to be able to jump to any cell on the tape (possibly, visiting some intermediate cells). For achieving this goal, she wants to buy some cards, paying as little money as possible. If this is possible, calculate the minimal cost.",
    "editorial": ""
}{
    "name": "Building Forest Trails",
    "code": [
        "1578",
        "B"
    ],
    "tags": [
        "data structures",
        "dsu"
    ],
    "difficulty": 2800,
    "statement": "There are $$$n$$$ villages lying equidistant on a circle in the middle of a thick, impassable forest. From ancient times, it was impossible to move from one village to another, but technical progress has changed a lot. Now, there is a technology to build passable trails in the forest. The building process consists of $$$m$$$ events. Each event is either building a trail or querying if two villages are connected. Trails are built as straight lines connecting two villages. After a trail is built, anybody can walk along the trail from one village to another. Moreover, if two trails cross, anybody can turn at the intersection, and if other trails leave a village you have just reached, they can also be used to walk along. So, for example, if villages are numbered $$$1$$$ to $$$6$$$ in the order around the circle, and there are trails $$$1$$$ to $$$3$$$, $$$2$$$ to $$$4$$$, and $$$4$$$ to $$$6$$$, then all villages, except the $$$5$$$-th, are reachable from the $$$1$$$-st village.Given a list of $$$m$$$ events, for each query, find if two given villages are reachable from each other at that moment.",
    "editorial": ""
}{
    "name": "Masha and geometric depression",
    "code": [
        "789",
        "B"
    ],
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "difficulty": 1700,
    "statement": "Masha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.You are given geometric progression b defined by two integers b1 and q. Remind that a geometric progression is a sequence of integers b1, b2, b3, ..., where for each i > 1 the respective term satisfies the condition bi = bi - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a1, a2, ..., am, and an integer l.Masha writes all progression terms one by one onto the board (including repetitive) while condition |bi| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.But the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.",
    "editorial": "We need to handle following cases in the solution:  |b1| > l\u00a0\u2014 answer is 0.  b1 = 0\u00a0\u2014 if 0 is present in array a than answer is 0, else inf.  q = 1\u00a0\u2014 if b1 is present in array a than answer is 0, else inf.  q =  - 1\u00a0\u2014 if both b1 and  - b1 are present in array a than answer is 0, otherwise inf.  q = 0\u00a0\u2014 if 0 isn't present in array a than answer is inf, else if b1 is present in a than answer is 0, else answer is 1.  In all other cases we can simply iterate over all terms of progression b while their absolute value doesn't exceed l. For every term that is not present in a we simply increasing answer by 1. Obviously, the absolute value of every next element is bigger in at least 2 times than the absolute value of previous. That's why we'll need to check at most log l progression terms. Solution complexity is O(M\u00b7logL) or O(M\u00b7logM + logL\u00b7logM)."
}{
    "name": "Mysterious Crime",
    "code": [
        "1043",
        "D"
    ],
    "tags": [
        "brute force",
        "combinatorics",
        "math",
        "meet-in-the-middle",
        "two pointers"
    ],
    "difficulty": 1700,
    "statement": "Acingel is a small town. There was only one doctor here\u00a0\u2014 Miss Ada. She was very friendly and nobody has ever said something bad about her, so who could've expected that Ada will be found dead in her house? Mr Gawry, world-famous detective, is appointed to find the criminal. He asked $$$m$$$ neighbours of Ada about clients who have visited her in that unlucky day. Let's number the clients from $$$1$$$ to $$$n$$$. Each neighbour's testimony is a permutation of these numbers, which describes the order in which clients have been seen by the asked neighbour.However, some facts are very suspicious\u00a0\u2013 how it is that, according to some of given permutations, some client has been seen in the morning, while in others he has been seen in the evening? \"In the morning some of neighbours must have been sleeping!\"\u00a0\u2014 thinks Gawry\u00a0\u2014 \"and in the evening there's been too dark to see somebody's face...\". Now he wants to delete some prefix and some suffix (both prefix and suffix can be empty) in each permutation, so that they'll be non-empty and equal to each other after that\u00a0\u2014 some of the potential criminals may disappear, but the testimony won't stand in contradiction to each other.In how many ways he can do it? Two ways are called different if the remaining common part is different.",
    "editorial": "Deleting prefix and suffix is nothing more than taking a subarray. If subarray is common for all permutations then it has to appear in first permutation. We renumber all permutations such that first permutation is $$$1$$$, $$$2$$$, ..., $$$n$$$ $$$-$$$ $$$1$$$, $$$n$$$.Now for every $$$i$$$ in every permutation we count how long is subarray starting at $$$i$$$ which looks like $$$i$$$, $$$i$$$ $$$+$$$ $$$1$$$, ..., $$$i$$$ $$$+$$$ $$$k$$$. It can be easily done in $$$O(n)$$$ for one permutation with two pointers technique.Now for every element $$$i$$$ we compute reach$$$[i]$$$ equal the longest subarray starting in $$$i$$$ which looks like $$$i$$$, $$$i$$$ $$$+$$$ $$$1$$$, ..., $$$i$$$ $$$+$$$ $$$k$$$ and it apears in all subarrays. It is just minimum over previously calculated values for all permutations.Now we can see that our result is $$$\\sum\\limits_{i = 1}^{n}{reach[i] - i}$$$. Final complexity $$$O(nm)$$$."
}{
    "name": "Strange Game On Matrix",
    "code": [
        "873",
        "C"
    ],
    "tags": [
        "greedy",
        "two pointers"
    ],
    "difficulty": 1600,
    "statement": "Ivan is playing a strange game.He has a matrix a with n rows and m columns. Each element of the matrix is equal to either 0 or 1. Rows and columns are 1-indexed. Ivan can replace any number of ones in this matrix with zeroes. After that, his score in the game will be calculated as follows:  Initially Ivan's score is 0;  In each column, Ivan will find the topmost 1 (that is, if the current column is j, then he will find minimum i such that ai, j = 1). If there are no 1's in the column, this column is skipped;  Ivan will look at the next min(k, n - i + 1) elements in this column (starting from the element he found) and count the number of 1's among these elements. This number will be added to his score. Of course, Ivan wants to maximize his score in this strange game. Also he doesn't want to change many elements, so he will replace the minimum possible number of ones with zeroes. Help him to determine the maximum possible score he can get and the minimum possible number of replacements required to achieve that score.",
    "editorial": "Let's notice that this task can be solved independently for each column, total result will be the sum of results for columns. The ones you should remove will always be the top ones in column. It makes no profit to erase some one while there are still ones on top of it, score won't become higher.Go from the top of the column to the bottom and recalculate the score after removing every one. Take the first position of the maximal score and update global answer with it.Overall complexity: O(n3). O(n2) can be achieved with partial sums."
}{
    "name": "AI robots",
    "code": [
        "1045",
        "G"
    ],
    "tags": [
        "data structures"
    ],
    "difficulty": 2200,
    "statement": "In the last mission, MDCS has successfully shipped $$$N$$$ AI robots to Mars. Before they start exploring, system initialization is required so they are arranged in a line. Every robot can be described with three numbers: position ($$$x_i$$$), radius of sight ($$$r_i$$$) and IQ ($$$q_i$$$).Since they are intelligent robots, some of them will talk if they see each other. Radius of sight is inclusive, so robot can see other all robots in range $$$[x_i - r_i, x_i + r_i]$$$. But they don't walk to talk with anybody, but only with robots who have similar IQ. By similar IQ we mean that their absolute difference isn't more than $$$K$$$.  Help us and calculate how many pairs of robots are going to talk with each other, so we can timely update their software and avoid any potential quarrel.",
    "editorial": ""
}{
    "name": "Case of Fugitive",
    "code": [
        "555",
        "B"
    ],
    "tags": [
        "data structures",
        "greedy",
        "sortings"
    ],
    "difficulty": 2000,
    "statement": "Andrewid the Android is a galaxy-famous detective. He is now chasing a criminal hiding on the planet Oxa-5, the planet almost fully covered with water.The only dry land there is an archipelago of n narrow islands located in a row. For more comfort let's represent them as non-intersecting segments on a straight line: island i has coordinates [li, ri], besides, ri < li + 1 for 1 \u2264 i \u2264 n - 1.To reach the goal, Andrewid needs to place a bridge between each pair of adjacent islands. A bridge of length a can be placed between the i-th and the (i + 1)-th islads, if there are such coordinates of x and y, that li \u2264 x \u2264 ri, li + 1 \u2264 y \u2264 ri + 1 and y - x = a. The detective was supplied with m bridges, each bridge can be used at most once. Help him determine whether the bridges he got are enough to connect each pair of adjacent islands.",
    "editorial": "You can put a bridge between islands i and i + 1 iff its length lies in the segment [li + 1 - ri;ri + 1 - li]. Now we have a well-known problem: there is a set of segments and a set of points on a line and for every segment you need to choose a point that lies in this segment. Every point can be choosed only once. This problem can be solved with an easy greedy algorithm."
}{
    "name": "Half Queen Cover",
    "code": [
        "1667",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "math"
    ],
    "difficulty": 2400,
    "statement": "You are given a board with $$$n$$$ rows and $$$n$$$ columns, numbered from $$$1$$$ to $$$n$$$. The intersection of the $$$a$$$-th row and $$$b$$$-th column is denoted by $$$(a, b)$$$.A half-queen attacks cells in the same row, same column, and on one diagonal. More formally, a half-queen on $$$(a, b)$$$ attacks the cell $$$(c, d)$$$ if $$$a=c$$$ or $$$b=d$$$ or $$$a-b=c-d$$$.  The blue cells are under attack.  What is the minimum number of half-queens that can be placed on that board so as to ensure that each square is attacked by at least one half-queen?Construct an optimal solution.",
    "editorial": "Let's assume that there is a solution for $$$k$$$ half-queens. There are at least $$$n-k$$$ rows, and columns, which contains no half-queen. If the uncovered rows are $$$r_1, r_2, ... r_a$$$, and the columns are $$$c_1, c_2, ... c_b$$$, (in increasing order), each diagonal (when the difference is a constant) contains at most one of the following $$$a+b-1$$$ squares: $$$(r_a, c_1), (r_a-1, c_1), ... (r_1, c_1), (r_1, c_2), ... (r_1, c_b)$$$. So a different half-queen attacks these cells.We know that: $$$a+b-1\u2264k, n-k\u2264a, n-k\u2264b$$$, so $$$2 \\cdot n\u22643 \\cdot k+1$$$. We have a lower bound for $$$k$$$. It turns out, that there is a consturction, for this $$$k$$$.For $$$n=3 \\cdot x+2$$$, $$$k=2 \\cdot x+1$$$, and we can place $$$x+1$$$ in the top left corner, diagonally, and $$$x$$$ half queens in the bottom right corner diagonally.Example for $$$n=8$$$ (top left corner is $$$(1, 1)$$$)  If $$$n=3 \\cdot x$$$, or $$$n=3 \\cdot x+1$$$ we can put one or two half-queens, in the bottom right corner, and use the previous consruction."
}{
    "name": "Magic Squares",
    "code": [
        "178",
        "D2"
    ],
    "tags": [],
    "difficulty": 1900,
    "statement": "The Smart Beaver from ABBYY loves puzzles. One of his favorite puzzles is the magic square. He has recently had an idea to automate the solution of this puzzle. The Beaver decided to offer this challenge to the ABBYY Cup contestants.The magic square is a matrix of size n \u00d7 n. The elements of this matrix are integers. The sum of numbers in each row of the matrix is equal to some number s. The sum of numbers in each column of the matrix is also equal to s. In addition, the sum of the elements on the main diagonal is equal to s and the sum of elements on the secondary diagonal is equal to s. Examples of magic squares are given in the following figure:   Magic squares  You are given a set of n2 integers ai. It is required to place these numbers into a square matrix of size n \u00d7 n so that they form a magic square. Note that each number must occur in the matrix exactly the same number of times as it occurs in the original set.It is guaranteed that a solution exists!",
    "editorial": ""
}{
    "name": "Booking System",
    "code": [
        "416",
        "C"
    ],
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "implementation"
    ],
    "difficulty": 1600,
    "statement": "Innovation technologies are on a victorious march around the planet. They integrate into all spheres of human activity!A restaurant called \"Dijkstra's Place\" has started thinking about optimizing the booking system. There are n booking requests received by now. Each request is characterized by two numbers: ci and pi \u2014 the size of the group of visitors who will come via this request and the total sum of money they will spend in the restaurant, correspondingly.We know that for each request, all ci people want to sit at the same table and are going to spend the whole evening in the restaurant, from the opening moment at 18:00 to the closing moment.Unfortunately, there only are k tables in the restaurant. For each table, we know ri \u2014 the maximum number of people who can sit at it. A table can have only people from the same group sitting at it. If you cannot find a large enough table for the whole group, then all visitors leave and naturally, pay nothing.Your task is: given the tables and the requests, decide which requests to accept and which requests to decline so that the money paid by the happy and full visitors was maximum.",
    "editorial": ""
}{
    "name": "Most socially-distanced subsequence",
    "code": [
        "1364",
        "B"
    ],
    "tags": [
        "greedy",
        "two pointers"
    ],
    "difficulty": 1300,
    "statement": "Given a permutation $$$p$$$ of length $$$n$$$, find its subsequence $$$s_1$$$, $$$s_2$$$, $$$\\ldots$$$, $$$s_k$$$ of length at least $$$2$$$ such that:  $$$|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$$$ is as big as possible over all subsequences of $$$p$$$ with length at least $$$2$$$.  Among all such subsequences, choose the one whose length, $$$k$$$, is as small as possible. If multiple subsequences satisfy these conditions, you are allowed to find any of them.A sequence $$$a$$$ is a subsequence of an array $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deleting some (possibly, zero or all) elements.A permutation of length $$$n$$$ is an array of length $$$n$$$ in which every element from $$$1$$$ to $$$n$$$ occurs exactly once.",
    "editorial": ""
}{
    "name": "Phoenix and Odometers",
    "code": [
        "1515",
        "G"
    ],
    "tags": [
        "dfs and similar",
        "graphs",
        "math",
        "number theory"
    ],
    "difficulty": 2700,
    "statement": "In Fire City, there are $$$n$$$ intersections and $$$m$$$ one-way roads. The $$$i$$$-th road goes from intersection $$$a_i$$$ to $$$b_i$$$ and has length $$$l_i$$$ miles. There are $$$q$$$ cars that may only drive along those roads. The $$$i$$$-th car starts at intersection $$$v_i$$$ and has an odometer that begins at $$$s_i$$$, increments for each mile driven, and resets to $$$0$$$ whenever it reaches $$$t_i$$$. Phoenix has been tasked to drive cars along some roads (possibly none) and return them to their initial intersection with the odometer showing $$$0$$$.For each car, please find if this is possible. A car may visit the same road or intersection an arbitrary number of times. The odometers don't stop counting the distance after resetting, so odometers may also be reset an arbitrary number of times.",
    "editorial": "We can solve for each strongly-connected component independently. From now on, we will assume the graph is strongly-connected.Define the length of a walk to be the sum of the weights of its edges, modulo $$$MOD$$$, the distance at which the odometer resets. This is different for different queries, but the important thing is some $$$MOD$$$ exists.If there is a walk from $$$a$$$ to $$$b$$$ with length $$$x$$$, there is a walk from $$$b$$$ to $$$a$$$ with length $$$-x$$$ (for any $$$MOD$$$). To see this, note that since the graph is strongly-connected, there is a path from $$$b$$$ to $$$a$$$. Let its length be $$$y$$$. We can walk from $$$b$$$ to $$$a$$$ and back $$$MOD-1$$$ times and then go to $$$a$$$ for a total length of $$$(MOD)y+(MOD-1) x\\equiv -x$$$. Note that this works for any $$$MOD$$$, even if we don't know what it is yet.We can show that if $$$a$$$ is in a cycle of length $$$x$$$, then $$$b$$$ is in a cycle of length $$$x$$$. Suppose a path from $$$a$$$ to $$$b$$$ has length $$$y$$$. We can go from $$$b$$$ to $$$a$$$, go around the cycle, and go back to $$$b$$$ for a total length of $$$y+x+(-y)=x$$$.$$$a$$$ is in a cycle of length $$$0$$$. If $$$a$$$ is in a cycle of length $$$x$$$, it is in a cycle of $$$kx$$$ for any integer $$$k$$$. If $$$a$$$ is in a cycle of length $$$x$$$ and a cycle of length $$$y$$$, it is in a cycle of length $$$x+y$$$.The set of possible cycle lengths of cycles containing vertex $$$a$$$ are exactly the multiples of some number, namely the $$$\\gcd$$$ of all possible cycle lengths.So, if we want to determine all possible cycle lengths, we just need to compute this gcd. Fix an arbitrary spanning tree rooted at $$$r$$$ and denote the length of the tree path from $$$r$$$ to $$$a$$$ by $$$\\phi(a)$$$.If there is an edge of length $$$l$$$ from $$$a$$$ to $$$b$$$, then $$$r$$$ is in a cycle of length $$$\\phi(a)+l-\\phi(b)$$$. This cycle can be constructed by taking the walk along tree edges from $$$r$$$ to $$$a$$$, across the edge from $$$a$$$ to $$$b$$$, then backwards along tree edges from $$$b$$$ to $$$a$$$.Thus, we can make any cycles whose length is a multiple of $$$G=\\gcd\\{\\phi(a)+l-\\phi(b):(a,b,l)\\in E\\}$$$. It turns out these are the only possible lengths.If a walk from $$$a$$$ to $$$b$$$ has length $$$x$$$, then $$$x\\equiv \\phi(b)-\\phi(a)\\pmod G$$$. This can be proved by induction on the number of edges in the walk.Now that we know which cycle lengths are possible, we can answer the queries.An odometer can be reset if and only if $$$S$$$ plus some multiple of $$$T$$$ is a multiple of $$$G$$$.An odometer can be reset if and only if $$$S$$$ is a multiple of $$$\\gcd(T,G)$$$.For implementation, the easiest way to get a spanning tree is by DFS. This can be done while computing strongly-connected components."
}{
    "name": "Longest Strike",
    "code": [
        "1676",
        "F"
    ],
    "tags": [
        "data structures",
        "greedy",
        "implementation",
        "sortings",
        "two pointers"
    ],
    "difficulty": 1300,
    "statement": "Given an array $$$a$$$ of length $$$n$$$ and an integer $$$k$$$, you are tasked to find any two numbers $$$l$$$ and $$$r$$$ ($$$l \\leq r$$$) such that:   For each $$$x$$$ $$$(l \\leq x \\leq r)$$$, $$$x$$$ appears in $$$a$$$ at least $$$k$$$ times (i.e. $$$k$$$ or more array elements are equal to $$$x$$$).  The value $$$r-l$$$ is maximized. If no numbers satisfy the conditions, output -1.For example, if $$$a=[11, 11, 12, 13, 13, 14, 14]$$$ and $$$k=2$$$, then:   for $$$l=12$$$, $$$r=14$$$ the first condition fails because $$$12$$$ does not appear at least $$$k=2$$$ times.  for $$$l=13$$$, $$$r=14$$$ the first condition holds, because $$$13$$$ occurs at least $$$k=2$$$ times in $$$a$$$ and $$$14$$$ occurs at least $$$k=2$$$ times in $$$a$$$.  for $$$l=11$$$, $$$r=11$$$ the first condition holds, because $$$11$$$ occurs at least $$$k=2$$$ times in $$$a$$$. A pair of $$$l$$$ and $$$r$$$ for which the first condition holds and $$$r-l$$$ is maximal is $$$l = 13$$$, $$$r = 14$$$.",
    "editorial": "Let's call a value good if it appears at least $$$k$$$ times. For example, if $$$a=[1,1,2,2,3,4,4,4,5,5,6,6]$$$ and $$$k=2$$$, then good values are $$$[1,2,4,5,6]$$$.So we need to find the longest subarray of this array in which all values are consecutive. For example, the subarray $$$[4,5,6]$$$ is the answer, because all values are good and the length of the array is longest.There are many ways to do this. For example, we can see when the difference between two elements is more than $$$1$$$, and then break the array into parts based on that. For instance, $$$[1,2,4,5,6] \\to [1,2], [4,5,6]$$$. You can also iterate from left to right and keep track of the size of the current array.Time complexity: $$$\\mathcal{O}(n)$$$."
}{
    "name": "Yet Another Partiton Problem",
    "code": [
        "1175",
        "G"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "geometry",
        "two pointers"
    ],
    "difficulty": 3000,
    "statement": "You are given array $$$a_1, a_2, \\dots, a_n$$$. You need to split it into $$$k$$$ subsegments (so every element is included in exactly one subsegment).The weight of a subsegment $$$a_l, a_{l+1}, \\dots, a_r$$$ is equal to $$$(r - l + 1) \\cdot \\max\\limits_{l \\le i \\le r}(a_i)$$$. The weight of a partition is a total weight of all its segments.Find the partition of minimal weight.",
    "editorial": "Important note: the author solution is using both linear Convex hull trick and persistent Li Chao tree. As mentioned in commentaries, applying the Divide-and-Conquer technique can help get rid of Li Chao tree. More about both structures you can read in this article.Let's try to write standard dp we can come up with (arrays will be 0-indexed). Let $$$dp[k][i]$$$ be the minimal weight if we splitted prefix of length $$$i$$$ in $$$k$$$ subsegments. Then we can calculate it as: $$$dp[k][i] = \\min\\limits_{0 \\le j < i}(dp[k - 1][j] + (i - j) \\cdot \\max\\limits_{j \\le k < i}(a[k]))$$$ [1]. Maximums on segments are inconvenient, let's try to group segments $$$[j, i)$$$ by the value of $$$\\max{}$$$. So, we can find such sequence of borders $$$j_0 = i - 1 > j_1 > j_2 > \\dots$$$, where for each $$$j \\in (j_{l + 1}, j_l]$$$ $$$\\max\\limits_{j \\le k < i}(a[k]) = a[j_l]$$$. In other words, $$$j_0 = i - 1$$$ and $$$j_{l + 1}$$$ is the closest from the left position, where $$$a[j_{l + 1}] \\ge a[j_l]$$$. Note, that we can maintain this sequence with stack of maximums.Ok, then for each interval $$$(j_{l + 1}, j_l]$$$ equation [1] transforms to: $$$$$$\\min_{j_{l+1} < j \\le j_l}(dp[k - 1][j] + (i - j) \\cdot a[j_l]) = a[j_l] \\cdot i + \\min_{j_{l+1} < j \\le j_l}(-j \\cdot a[j_l] + dp[k - 1][j]) = \\\\ = a[j_l] \\cdot y + \\min_{j_{l+1} < j \\le j_l}(-j \\cdot x + dp[k - 1][j]) |_{y = i, x = a[j_l]}.$$$$$$Why did we use variables $$$x$$$ and $$$y$$$? Because there are two problems: $$$y$$$ is needed because we iterate over $$$i$$$ and can't recalculate everything; $$$x$$$ is needed because sequence $$$j_l$$$ is changing over time, so do the $$$a[j_l]$$$. But what we can already see: we can maintain for each segment Convex hull with linear functions \u2014 so we can take $$$f_l = \\min\\limits_{j_{l+1} < j \\le j_l}(\\dots)$$$ in logarithmic time. Moreover, we can store values $$$a[j_l] \\cdot y + f_l$$$ in other Convex hull to take minimum over all segments in logarithmic time.The problems arise when we try modificate structures while iterating $$$i$$$. Fortunately, segments $$$j_l$$$ change not at random, but according to stack of maximums. So all we should handle are:   to merge segment on top of the stack $$$(j_1, j_0]$$$ with current segment $$$(j_0, i]$$$ (in case when $$$a[i] > a[j_0]$$$);  to erase segment on top of the stack along with its value $$$a[j_0] \\cdot y + f_0$$$;  to insert new segment on top of the stack along with its value $$$a[j_0] \\cdot y + f_0$$$. To handle the third type is easy, since all Convex hulls can insert elements. There will be at most $$$O(n)$$$ such operations on a single layer $$$k$$$ and we can ask value $$$f_0$$$ in $$$O(\\log{n})$$$ and insert a line with $$$O(\\log{A})$$$.To handle the second type is harder, but possible, since we can make Convex hull persistent and store its versions in the stack. Persistent Convex hull \u2014 persistent Li Chao tree. There will be also $$$O(nk)$$$ operations in total and they cost us $$$O(1)$$$.To handle the first type is trickiest part. Note, that all line coefficients of one convex hull are strictly lower than all line coefficients of the other. So, we can use linear Convex hulls to make insertions to back in amortized $$$O(1)$$$. But to merge efficiently, we should use Small-to-Large technique, that's why we should be able also push front in $$$O(1)$$$, and, moreover, still be able to ask minimum in $$$O(\\log{n})$$$. And here comes the hack \u2014 $$$deque$$$ in C++, which can push/pop front/back in amortized $$$O(1)$$$ and also have random access iterator to make binary search possible. So, each element of every segment will be transfered $$$O(\\log{n})$$$ times with cost of amortized $$$O(1)$$$ on a single layer $$$k$$$.In the end, result complexity is $$$O(n k (\\log{C} + \\log{n}))$$$. Space complexity is $$$O(n \\log{A})$$$."
}{
    "name": "Opponents",
    "code": [
        "688",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya's opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.For each opponent Arya knows his schedule\u00a0\u2014 whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.Note, that if some day there are no opponents present, Arya still considers he beats all the present opponents.",
    "editorial": ""
}{
    "name": "Remove the Substring (easy version)",
    "code": [
        "1203",
        "D1"
    ],
    "tags": [
        "greedy",
        "implementation"
    ],
    "difficulty": 1600,
    "statement": "The only difference between easy and hard versions is the length of the string.You are given a string $$$s$$$ and a string $$$t$$$, both consisting only of lowercase Latin letters. It is guaranteed that $$$t$$$ can be obtained from $$$s$$$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $$$s$$$ without changing order of remaining characters (in other words, it is guaranteed that $$$t$$$ is a subsequence of $$$s$$$).For example, the strings \"test\", \"tst\", \"tt\", \"et\" and \"\" are subsequences of the string \"test\". But the strings \"tset\", \"se\", \"contest\" are not subsequences of the string \"test\".You want to remove some substring (contiguous subsequence) from $$$s$$$ of maximum possible length such that after removing this substring $$$t$$$ will remain a subsequence of $$$s$$$.If you want to remove the substring $$$s[l;r]$$$ then the string $$$s$$$ will be transformed to $$$s_1 s_2 \\dots s_{l-1} s_{r+1} s_{r+2} \\dots s_{|s|-1} s_{|s|}$$$ (where $$$|s|$$$ is the length of $$$s$$$).Your task is to find the maximum possible length of the substring you can remove so that $$$t$$$ is still a subsequence of $$$s$$$.",
    "editorial": "In this problem we can just iterate over all possible substrings and try to remove each of them. After removing the substring we can check if $$$t$$$ remains the subsequence of $$$s$$$ in linear time.Let we remove the substring $$$s[l; r]$$$. Let's maintain a pointer $$$pos$$$ (the initial value of the pointer is $$$1$$$) and iterate over all possible $$$i$$$ from $$$1$$$ to $$$|s|$$$. If $$$pos \\le |t|$$$ and $$$s_i = t_{pos}$$$ let's increase $$$pos$$$ by one. If after all iterations $$$pos = |t| + 1$$$ then let's update the answer with the length of the current substring."
}{
    "name": "Weakness and Poorness",
    "code": [
        "578",
        "C"
    ],
    "tags": [
        "ternary search"
    ],
    "difficulty": 2000,
    "statement": "You are given a sequence of n integers a1, a2, ..., an. Determine a real number x such that the weakness of the sequence a1 - x, a2 - x, ..., an - x is as small as possible.The weakness of a sequence is defined as the maximum value of the poorness over all segments (contiguous subsequences) of a sequence.The poorness of a segment is defined as the absolute value of sum of the elements of segment.",
    "editorial": ""
}{
    "name": "Tree or not Tree",
    "code": [
        "117",
        "E"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation",
        "trees"
    ],
    "difficulty": 2900,
    "statement": "You are given an undirected connected graph G consisting of n vertexes and n edges. G contains no self-loops or multiple edges. Let each edge has two states: on and off. Initially all edges are switched off.You are also given m queries represented as (v, u) \u2014 change the state of all edges on the shortest path from vertex v to vertex u in graph G. If there are several such paths, the lexicographically minimal one is chosen. More formally, let us consider all shortest paths from vertex v to vertex u as the sequences of vertexes v, v1, v2, ..., u. Among such sequences we choose the lexicographically minimal one.After each query you should tell how many connected components has the graph whose vertexes coincide with the vertexes of graph G and edges coincide with the switched on edges of graph G.",
    "editorial": ""
}{
    "name": "Where's the Bishop?",
    "code": [
        "1692",
        "C"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Mihai has an $$$8 \\times 8$$$ chessboard whose rows are numbered from $$$1$$$ to $$$8$$$ from top to bottom and whose columns are numbered from $$$1$$$ to $$$8$$$ from left to right.Mihai has placed exactly one bishop on the chessboard. The bishop is not placed on the edges of the board. (In other words, the row and column of the bishop are between $$$2$$$ and $$$7$$$, inclusive.)The bishop attacks in all directions diagonally, and there is no limit to the distance which the bishop can attack. Note that the cell on which the bishop is placed is also considered attacked.   An example of a bishop on a chessboard. The squares it attacks are marked in red. Mihai has marked all squares the bishop attacks, but forgot where the bishop was! Help Mihai find the position of the bishop.",
    "editorial": "There are many ways to solve the problem. One way is to look for the following pattern: $$$$$$\\texttt{X.X}\\\\\\texttt{.X.}\\\\\\texttt{X.X}$$$$$$ There can only be one such pattern if there is one bishop and it's not on the edge of the board. We can iterate through all cells and see if we can match this pattern, and if we can we output the centre cell.You can also look at the positions of the two diagonals and intersect them, but it requires more implementation.Time complexity: $$$\\mathcal{O}(1)$$$ per testcase."
}{
    "name": "Contest for Robots",
    "code": [
        "1321",
        "A"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 900,
    "statement": "Polycarp is preparing the first programming contest for robots. There are $$$n$$$ problems in it, and a lot of robots are going to participate in it. Each robot solving the problem $$$i$$$ gets $$$p_i$$$ points, and the score of each robot in the competition is calculated as the sum of $$$p_i$$$ over all problems $$$i$$$ solved by it. For each problem, $$$p_i$$$ is an integer not less than $$$1$$$.Two corporations specializing in problem-solving robot manufacturing, \"Robo-Coder Inc.\" and \"BionicSolver Industries\", are going to register two robots (one for each corporation) for participation as well. Polycarp knows the advantages and flaws of robots produced by these companies, so, for each problem, he knows precisely whether each robot will solve it during the competition. Knowing this, he can try predicting the results \u2014 or manipulating them. For some reason (which absolutely cannot involve bribing), Polycarp wants the \"Robo-Coder Inc.\" robot to outperform the \"BionicSolver Industries\" robot in the competition. Polycarp wants to set the values of $$$p_i$$$ in such a way that the \"Robo-Coder Inc.\" robot gets strictly more points than the \"BionicSolver Industries\" robot. However, if the values of $$$p_i$$$ will be large, it may look very suspicious \u2014 so Polycarp wants to minimize the maximum value of $$$p_i$$$ over all problems. Can you help Polycarp to determine the minimum possible upper bound on the number of points given for solving the problems?",
    "editorial": "Score distribution for problems having $$$r_i = b_i$$$ is irrelevant (we can make $$$p_i = 1$$$ for all of them). Let's consider the remaining problems.Suppose we have $$$x$$$ problems solved by the first robot (and not solved by the second one), and $$$y$$$ problems solved by the second robot (and not solved by the first one). If $$$x = 0$$$, then the score of the first robot won't exceed the score of the second robot by any means, so the answer is $$$-1$$$.Otherwise, we can set the score for problems solved by the first robot to some number $$$p$$$, and the score for all remaining problems to $$$1$$$. Then, the condition $$$xp > y$$$ must hold, or $$$p > \\frac{y}{x}$$$, so $$$p = \\lceil \\frac{y + 1}{x} \\rceil$$$ is the answer. Note that the constraints allow us to iterate on $$$p$$$ instead of implementing a formula for it."
}{
    "name": "Inbox (100500)",
    "code": [
        "465",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "Over time, Alexey's mail box got littered with too many letters. Some of them are read, while others are unread.Alexey's mail program can either show a list of all letters or show the content of a single letter. As soon as the program shows the content of an unread letter, it becomes read letter (if the program shows the content of a read letter nothing happens). In one click he can do any of the following operations: Move from the list of letters to the content of any single letter. Return to the list of letters from single letter viewing mode. In single letter viewing mode, move to the next or to the previous letter in the list. You cannot move from the first letter to the previous one or from the last letter to the next one.The program cannot delete the letters from the list or rearrange them.Alexey wants to read all the unread letters and go watch football. Now he is viewing the list of all letters and for each letter he can see if it is read or unread. What minimum number of operations does Alexey need to perform to read all unread letters?",
    "editorial": ""
}{
    "name": "Two Melodies",
    "code": [
        "813",
        "D"
    ],
    "tags": [
        "dp",
        "flows"
    ],
    "difficulty": 2600,
    "statement": "Alice is a beginner composer and now she is ready to create another masterpiece. And not even the single one but two at the same time! Alice has a sheet with n notes written on it. She wants to take two such non-empty non-intersecting subsequences that both of them form a melody and sum of their lengths is maximal.Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.Subsequence forms a melody when each two adjacent notes either differs by 1 or are congruent modulo 7.You should write a program which will calculate maximum sum of lengths of such two non-empty non-intersecting subsequences that both of them form a melody.",
    "editorial": "Let's solve this problem with dynamic programming.Let dp[x][y] be the maximum answer if one melody finishes in note number x and another melody \u2014 in note number y. x and y are 1-indexed; if one of them is 0, then the melody is empty.How shall we update dp[x][y]? First of all, we will update from previous dp values only if x > y. If x = y, then obviously answer is 0, and if x < y, then we take the answer for dp[y][x].Secondly, to avoid intersections, we will update dp[x][y] only using values of dp[i][y], where i \u2260 y and i < x. Why? Because if we update dp[x][y] from some dp[x][i], and x > y, then it can lead to some intersection (we can't guarantee we didn't use i in the first melody).How can we make fast updates? We will count dp from y = 0 to y = n. Then, while counting dp for some specific y, we will maintain two arrays:  maxmod[j] \u2014 the maximum value of dp[i][y] encountered so far where a[i]\u00a0mod\u00a07 = j;  maxnum[j] \u2014 the maximum value of dp[i][y] encountered so far where a[i] = j. So when we need to count dp[x][y], it will be the maximum of four values:   maxmod[a[x]\u00a0mod\u00a07] + 1 \u2014 if we add a note which is congruent modulo 7 with the last one;  maxnum[a[x] + 1] + 1 \u2014 if we add a note which is less by 1 than the last note;  maxnum[a[x] - 1] + 1 \u2014 if we add a note which is greater by 1 than the last note;  dp[0][y] + 1 \u2014 if we just start a melody. These values can be calculated in O(n2)."
}{
    "name": "Apollo versus Pan",
    "code": [
        "1466",
        "E"
    ],
    "tags": [
        "bitmasks",
        "brute force",
        "math"
    ],
    "difficulty": 1800,
    "statement": "Only a few know that Pan and Apollo weren't only battling for the title of the GOAT musician. A few millenniums later, they also challenged each other in math (or rather in fast calculations). The task they got to solve is the following:Let $$$x_1, x_2, \\ldots, x_n$$$ be the sequence of $$$n$$$ non-negative integers. Find this value: $$$$$$\\sum_{i=1}^n \\sum_{j=1}^n \\sum_{k=1}^n (x_i \\, \\& \\, x_j) \\cdot (x_j \\, | \\, x_k)$$$$$$Here $$$\\&$$$ denotes the bitwise and, and $$$|$$$ denotes the bitwise or.Pan and Apollo could solve this in a few seconds. Can you do it too? For convenience, find the answer modulo $$$10^9 + 7$$$.",
    "editorial": "The formula given in this task looks difficult to calculate, so we can rewrite it: $$$$$$ \\sum_{i=1}^n \\sum_{j=1}^n \\sum_{k=1}^n (x_i \\, \\& \\, x_j) \\cdot (x_j \\, | \\, x_k) = \\sum_{j=1}^n \\sum_{i=1}^n (x_i \\, \\& \\, x_j) \\sum_{k=1}^n (x_j \\, | \\, x_k) = \\sum_{j=1}^n \\left[ \\sum_{i=1}^n (x_i \\, \\& \\, x_j) \\right] \\cdot \\left[ \\sum_{k=1}^n (x_j \\, | \\, x_k) \\right] $$$$$$We fix the element $$$x_j$$$. Now the task is to calculate two sums $$$\\sum_i (x_i \\, \\& \\, x_j)$$$ and $$$\\sum_k (x_j \\, | \\, x_k)$$$, and multiply them by each other.Let's define function $$$f(x, c)$$$ as the value of $$$c$$$-th bit in $$$x$$$. For example $$$f(13, 1) = 0$$$, because $$$13 = 11\\underline{0}1_2$$$, and $$$f(12, 2) = 1$$$, because $$$12 = 1\\underline{1}00_2$$$. Additionally, define $$$M$$$ as the smallest integer such that $$$\\forall_i \\, x_i < 2^M$$$. Note that in this task $$$M \\leq 60$$$.We can rewrite our sums using function $$$f$$$: $$$$$$ \\sum_i (x_i \\, \\& \\, x_j) = \\sum_{c = 0}^{M} 2^c \\sum_i f(x_i, c) \\cdot f(x_j, c) = \\sum_{c = 0}^{M} 2^c f(x_j, c) \\sum_i f(x_i, c) $$$$$$ $$$$$$ \\sum_k (x_j \\, | \\, x_k) = \\sum_{c = 0}^{M} 2^c \\sum_k 1 - (1 - f(x_j, c)) \\cdot (1 - f(x_k, c)) = \\sum_{c = 0}^{M} 2^c \\left[ n - (1 - f(x_j, c)) \\sum_k (1 - f(x_k, c)) \\right] $$$$$$In other words, we just split elements $$$x_i, x_j, x_k$$$ into the powers of two.If we memorize the values of $$$\\sum_i f(x_i, c)$$$, for each $$$c \\in \\{0, 1, \\ldots, M \\}$$$, then we can calculate the desired sums in $$$\\mathcal{O}(M)$$$ for fixed $$$x_j$$$ using the above equations.So the final solution is to iterate over all elements in the array and fix them as $$$x_j$$$, and sum all of the results obtained. Complexity is $$$\\mathcal{O}(nM) = \\mathcal{O}(n \\log \\max_i(x_i))$$$"
}{
    "name": "Lucky Conversion",
    "code": [
        "145",
        "A"
    ],
    "tags": [
        "greedy",
        "implementation"
    ],
    "difficulty": 1200,
    "statement": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.Petya has two strings a and b of the same length n. The strings consist only of lucky digits. Petya can perform operations of two types:   replace any one digit from string a by its opposite (i.e., replace 4 by 7 and 7 by 4);  swap any pair of digits in string a. Petya is interested in the minimum number of operations that are needed to make string a equal to string b. Help him with the task.",
    "editorial": ""
}{
    "name": "Restructuring Company",
    "code": [
        "566",
        "D"
    ],
    "tags": [
        "data structures",
        "dsu"
    ],
    "difficulty": 1900,
    "statement": "Even the most successful company can go through a crisis period when you have to make a hard decision \u2014 to restructure, discard and merge departments, fire employees and do other unpleasant stuff. Let's consider the following model of a company.There are n people working for the Large Software Company. Each person belongs to some department. Initially, each person works on his own project in his own department (thus, each company initially consists of n departments, one person in each).However, harsh times have come to the company and the management had to hire a crisis manager who would rebuild the working process in order to boost efficiency. Let's use team(person) to represent a team where person person works. A crisis manager can make decisions of two types:  Merge departments team(x) and team(y) into one large department containing all the employees of team(x) and team(y), where x and y (1 \u2264 x, y \u2264 n) \u2014 are numbers of two of some company employees. If team(x) matches team(y), then nothing happens.  Merge departments team(x), team(x + 1), ..., team(y), where x and y (1 \u2264 x \u2264 y \u2264 n) \u2014 the numbers of some two employees of the company. At that the crisis manager can sometimes wonder whether employees x and y (1 \u2264 x, y \u2264 n) work at the same department.Help the crisis manager and answer all of his queries.",
    "editorial": ""
}{
    "name": "Array Partition",
    "code": [
        "1454",
        "F"
    ],
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "two pointers"
    ],
    "difficulty": 2100,
    "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ integers.Let $$$min(l, r)$$$ be the minimum value among $$$a_l, a_{l + 1}, \\ldots, a_r$$$ and $$$max(l, r)$$$ be the maximum value among $$$a_l, a_{l + 1}, \\ldots, a_r$$$.Your task is to choose three positive (greater than $$$0$$$) integers $$$x$$$, $$$y$$$ and $$$z$$$ such that:  $$$x + y + z = n$$$;  $$$max(1, x) = min(x + 1, x + y) = max(x + y + 1, n)$$$. In other words, you have to split the array $$$a$$$ into three consecutive non-empty parts that cover the whole array and the maximum in the first part equals the minimum in the second part and equals the maximum in the third part (or determine it is impossible to find such a partition).Among all such triples (partitions), you can choose any.You have to answer $$$t$$$ independent test cases.",
    "editorial": "Let's fix the length of the first block (iterate through $$$i$$$ from $$$0$$$ to $$$n-3$$$). Let's also try to maximize the length of the third block using the second pointer. So, initially the length of the first block is $$$1$$$ and the maximum in the block is $$$a_0$$$ (after that, its length will be $$$2$$$ and the maximum will be $$$max(a_0, a_1)$$$, and so on). Let's move the left border of the third block $$$r$$$ while $$$a_r \\le a_0$$$ and the second block have at least one element.After we expanded the third block, consider some cases: if its maximum is less than $$$a_0$$$, then we don't need to consider this partition (we expanded the third block as much as we can but didn't find the required maximum). Otherwise, its maximum fits our conditions. Then let's find the minimum in the second block. Let it be $$$mn$$$. If $$$mn < mx$$$, this partition is also bad. If $$$mn = mx$$$, this partition is good, and we can just print it. Otherwise, $$$mn > mx$$$, and we need to fix the second block somehow. I claim that we only need to expand it by at most one element. Let's see why is it true. Consider we want to expand it to the right (the other case just uses the same logic). If we expanded our block by one element to the right and the new value in it is less than $$$mx$$$, then this partition is bad, and we can not use it (this is also the reason why we are trying to maximize the length of the third block). Otherwise, this value is always $$$mx$$$, because the first and the third blocks didn't have values greater than $$$mx$$$.There are some cases in the implementation we need to consider carefully: first, we need to find the minimum in the second block fast enough. This can be done if we store it as a multiset (set with repetitions). Second, we can remove the only maximum in the third (or the first) block by expanding the second one. This can be handled easily if we just store all three blocks (not only the second one) as multisets. And the last case is that we sometimes need to move the left border of the third block to the right. This happens when we expand the first block and the second block becomes empty. So, this happens only $$$O(n)$$$ times in total.Total time complexity of this solution is $$$O(n \\log n)$$$.There is also another solution from Gassa:Let us start solving by asking the following question: in which segments will the maximal values end up?Consider the maximum value $$$m$$$ in the whole array. If there are at least three of them, a valid answer is to pick any maximum except the first and the last as the middle segment. For example, \"3\u00a02\u00a03\u00a01\u00a03\u00a02\u00a03\" ($$$m = 3$$$) can be partitioned as \"3\u00a02[3]1\u00a03\u00a02\u00a03\" or as \"3\u00a02\u00a03\u00a01[3]2\u00a03\", where the middle segment is marked with square brackets. Otherwise, all $$$m$$$ should end up in the middle segment, so that maximums to the left and to the right are less. For example, in \"1\u00a02\u00a03\u00a01\u00a03\u00a02\u00a01\", we have to put both threes into the middle segment.Let us now calculate the minimum value $$$v$$$ on the middle segment, considering the numbers between those equal to $$$m$$$. For example, in \"1\u00a02[3\u00a01\u00a03]2\u00a01\" the value $$$v = \\min (3, 1, 3) = 1$$$. All numbers greater than $$$v$$$ should also go into the middle segment, and everything between them, which can result in $$$v$$$ decreasing even more. We have to expand the borders of the middle segment until the minimum value is such $$$v$$$ that there are only values not greater than $$$v$$$ left outside. Continuing with the example, we see that in \"1\u00a02[3\u00a01\u00a03]2\u00a01\", the middle segment should be expanded to \"1[2\u00a03\u00a01\u00a03\u00a02]1\". Conversely, if the maximum $$$m$$$ was unique, then $$$v = m$$$, and we didn't have to expand the middle segment at this stage. For example, in \"1\u00a02\u00a03\u00a02\u00a01\", the current state is \"1\u00a02[3]2\u00a01\".If the maximums to the left and to the right are exactly $$$v$$$, we found an answer. Otherwise, any possible middle segment contains the middle segment that we now got. So we have to expand the middle segment, either to the left or to the right. As a result, the value $$$v$$$ may become smaller, which can cause another expansion.What's left is to decide where to expand when we have a choice. We would like to do it greedily. Indeed, consider three values: the minimum on middle segment $$$v$$$, the maximum on left segment $$$u$$$ and the maximum on right segment $$$w$$$. When we expand the middle segment, each of them can only decrease. And if we find an answer, the equation $$$u = v = w$$$ will be satisfied. So, as we make the minimum of these three values smaller, we have less and less opportunities to make them equal. Thus we can pick the side of expansion after which the value $$$\\min (u, v, w)$$$ is larger, and if these are equal, pick any.For example, in the state \"1\u00a03[5\u00a04\u00a05]2\u00a03\u00a01\", we have $$$u = 3$$$, $$$v = 4$$$, and $$$w = 3$$$. If we expand to the left, we get \"1[3\u00a05\u00a04\u00a05]2\u00a03\u00a01\" where $$$u = 1$$$, $$$v = 3$$$, and $$$w = 3$$$. If we expand to the right, we get \"1\u00a03[5\u00a04\u00a05\u00a02]3\u00a01\" where $$$u = 3$$$, $$$v = 2$$$, and $$$w = 3$$$. Our algorithm will pick expanding to the right, however, there is no valid answer in this example anyway.Implementation: let us precalculate the maximums on all prefixes and all suffixes of the array. Then we can expand the middle segment by one element in $$$O (1)$$$, and the total running time is linear."
}{
    "name": "Not Adjacent Matrix",
    "code": [
        "1520",
        "C"
    ],
    "tags": [
        "constructive algorithms"
    ],
    "difficulty": 1000,
    "statement": "We will consider the numbers $$$a$$$ and $$$b$$$ as adjacent if they differ by exactly one, that is, $$$|a-b|=1$$$.We will consider cells of a square matrix $$$n \\times n$$$ as adjacent if they have a common side, that is, for cell $$$(r, c)$$$ cells $$$(r, c-1)$$$, $$$(r, c+1)$$$, $$$(r-1, c)$$$ and $$$(r+1, c)$$$ are adjacent to it.For a given number $$$n$$$, construct a square matrix $$$n \\times n$$$ such that:   Each integer from $$$1$$$ to $$$n^2$$$ occurs in this matrix exactly once;  If $$$(r_1, c_1)$$$ and $$$(r_2, c_2)$$$ are adjacent cells, then the numbers written in them must not be adjacent. ",
    "editorial": "Note that $$$n = 2$$$ is the only case where there is no answer.For other cases, consider the following construction:   Let's say that the cell $$$(i, j)$$$ is white if $$$i + j$$$ is an even number, otherwise, we will say that the cell $$$(i, j)$$$ is black;  Let's arrange the cells so that all white cells are first, and if the colors are equal, the cells will be compared lexicographically.  Arrange numbers from $$$1$$$ to $$$n^2$$$ in ordered cells. For example, for $$$n=3$$$, the following matrix will be constructed: $$$$$$ \\begin{pmatrix} 1 & 6 & 2\\\\ 7 & 3 & 8\\\\ 4 & 9 & 5\\\\ \\end{pmatrix} $$$$$$"
}{
    "name": "The Door Problem",
    "code": [
        "776",
        "D"
    ],
    "tags": [
        "2-sat",
        "dfs and similar",
        "dsu",
        "graphs"
    ],
    "difficulty": 2000,
    "statement": "Moriarty has trapped n people in n distinct rooms in a hotel. Some rooms are locked, others are unlocked. But, there is a condition that the people in the hotel can only escape when all the doors are unlocked at the same time. There are m switches. Each switch control doors of some rooms, but each door is controlled by exactly two switches.You are given the initial configuration of the doors. Toggling any switch, that is, turning it ON when it is OFF, or turning it OFF when it is ON, toggles the condition of the doors that this switch controls. Say, we toggled switch 1, which was connected to room 1, 2 and 3 which were respectively locked, unlocked and unlocked. Then, after toggling the switch, they become unlocked, locked and locked.You need to tell Sherlock, if there exists a way to unlock all doors at the same time.",
    "editorial": "Hint : Try to model the situation as a graph with rooms as edges and switches as nodes.Editorial : All rooms are represented as edges. Mark the edges as 1 if the room is open else mark the edge as closed. The answer will be \"YES\" if you can color the graph in such a manner that the edges having value 0 have both nodes under different color (if the door is locked then one of the switches should be selected) and the edges having 1 have both nodes under same color (if the door is unlocked you should either select both switches or neither of them). For checking the same start a bfs from switch 1 and toggle it and proceed, if you are able to color all of the switches then the answer is \"YES\" else it is not possible. Complexity: O(N + M)See the setter's solution for implementation details."
}{
    "name": "Divide Candies",
    "code": [
        "1056",
        "B"
    ],
    "tags": [
        "math",
        "number theory"
    ],
    "difficulty": 1600,
    "statement": "Arkady and his friends love playing checkers on an $$$n \\times n$$$ field. The rows and the columns of the field are enumerated from $$$1$$$ to $$$n$$$.The friends have recently won a championship, so Arkady wants to please them with some candies. Remembering an old parable (but not its moral), Arkady wants to give to his friends one set of candies per each cell of the field: the set of candies for cell $$$(i, j)$$$ will have exactly $$$(i^2 + j^2)$$$ candies of unique type.There are $$$m$$$ friends who deserve the present. How many of these $$$n \\times n$$$ sets of candies can be split equally into $$$m$$$ parts without cutting a candy into pieces? Note that each set has to be split independently since the types of candies in different sets are different.",
    "editorial": "We are asked to count the number of pairs $$$(i, j)$$$ so that $$$(i^2 + j^2) \\bmod m = 0$$$. Note that $$$(i^2 + j^2) \\bmod m = ((i \\bmod m)^2 + (j \\bmod m)^2) \\bmod m$$$. Thus the answer is equal for all pairs $$$(i, j)$$$ that have equal values $$$(i \\bmod m, j \\bmod m) = (x, y)$$$. Let's loop through all possible pairs of $$$(x, y)$$$ (there are $$$m^2$$$ of them), check if $$$(x^2 + y^2) \\bmod m = 0$$$ and if yes, add to the answer the number of suitable pairs $$$(i, j)$$$, that is easy to compute in $$$O(1)$$$.The complexity of the solution is $$$O(m^2)$$$."
}{
    "name": "Labyrinth-12",
    "code": [
        "921",
        "12"
    ],
    "tags": [],
    "difficulty": 3200,
    "statement": "See the problem statement here: http://codeforces.com/contest/921/problem/01.",
    "editorial": ""
}{
    "name": "Cactus Lady and her Cing",
    "code": [
        "1578",
        "C"
    ],
    "tags": [],
    "difficulty": 3500,
    "statement": "Cactus lady loves her cactuses very much. Especially she likes a small cactus named Cing. Cing can be seen as a connected undirected graph in which every vertex lies on at most one simple cycle. Intuitively, a cactus is a generalization of a tree where some cycles are allowed. Multiedges (multiple edges between a pair of vertices) and loops (edges that connect a vertex to itself) are not allowed.She bought a special grid for her special little cactus Cing. This grid can be represented as a graph consisting of two paths of length $$$400\\,000$$$, $$$u_{(0, -200\\,000)} - u_{(0, -199\\,999)} - \\ldots - u_{(0, 200\\,000)}$$$ and $$$u_{(1, -200\\,000)} - u_{(1, -199\\,999)} - \\ldots - u_{(1, 200\\,000)}$$$, connected together by $$$400\\,001$$$ edges $$$(u_{(0, i)}, u_{(1, i)})$$$ for each $$$i$$$. In other words, a grid can be seen as a ladder.  Cactus lady wants to know whether she can embed Cing into this grid, i.e., map each vertex of the cactus onto a separate vertex of the grid while each edge of the cactus will be mapped onto some edge of the grid.",
    "editorial": ""
}{
    "name": "Standard Free2play",
    "code": [
        "1238",
        "C"
    ],
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "difficulty": 1600,
    "statement": "You are playing a game where your character should overcome different obstacles. The current problem is to come down from a cliff. The cliff has height $$$h$$$, and there is a moving platform on each height $$$x$$$ from $$$1$$$ to $$$h$$$.Each platform is either hidden inside the cliff or moved out. At first, there are $$$n$$$ moved out platforms on heights $$$p_1, p_2, \\dots, p_n$$$. The platform on height $$$h$$$ is moved out (and the character is initially standing there).If you character is standing on some moved out platform on height $$$x$$$, then he can pull a special lever, which switches the state of two platforms: on height $$$x$$$ and $$$x - 1$$$. In other words, the platform you are currently standing on will hide in the cliff and the platform one unit below will change it state: it will hide if it was moved out or move out if it was hidden. In the second case, you will safely land on it. Note that this is the only way to move from one platform to another.Your character is quite fragile, so it can safely fall from the height no more than $$$2$$$. In other words falling from the platform $$$x$$$ to platform $$$x - 2$$$ is okay, but falling from $$$x$$$ to $$$x - 3$$$ (or lower) is certain death. Sometimes it's not possible to come down from the cliff, but you can always buy (for donate currency) several magic crystals. Each magic crystal can be used to change the state of any single platform (except platform on height $$$h$$$, which is unaffected by the crystals). After being used, the crystal disappears.What is the minimum number of magic crystal you need to buy to safely land on the $$$0$$$ ground level?",
    "editorial": "You are given the input data in compressed format, let's decompress it in binary string, where the $$$i$$$-th character is 0 if the $$$i$$$-th platform is hidden and 1 otherwise. For, example, the third query is 101110011.Let's look how our string changes: if we had ...01... then after pulling the lever it becomes ...10... and if we had ...111... then we'd get ...100... (The underlined index is the platform we are currently on). So it looks like we are standing on 1 and move it to the left until it clashes with the next one. So we can determine that we should look only at subsegments on 1-s.Now we can note, that the \"good\" string should have all subsegments of ones with even length except two cases: the subsegment that starts from $$$h$$$ should have odd length and subsegment, which ends in $$$1$$$ can have any length.Now we can say, that the answer is equal to number of subsegments which doesn't match the pattern of the \"good string\", since we can fix each subsegment with one crystal. And we can prove that it's optimal since the only way to fix two subsegments with one crystal is to merge them but it does not help.Finally, we can understand that we have no need in decompressing the input and can determine subsegments of ones straightforwardly."
}{
    "name": "Wilbur and Swimming Pool",
    "code": [
        "596",
        "A"
    ],
    "tags": [
        "geometry",
        "implementation"
    ],
    "difficulty": 1100,
    "statement": "After making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.Now Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.",
    "editorial": "It is a necessary and sufficient condition that we have exactly 2 distinct values for x and y. If we have less than 2 distinct values for any variable, then there is no way to know the length of that dimension. If there are at least 3 distinct values for any variable, then that means more than 3 vertices lie on that dimension, which cannot happen since there can be at most 2 vertices in a line segment. The area, if it can be found, is just the difference of values of the x coordinates times the difference of values of the y coordinates.Complexity: O(1)"
}{
    "name": "X(or)-mas Tree",
    "code": [
        "1615",
        "D"
    ],
    "tags": [
        "bitmasks",
        "dfs and similar",
        "dsu",
        "graphs",
        "trees"
    ],
    "difficulty": 2200,
    "statement": "'Twas the night before Christmas, and Santa's frantically setting up his new Christmas tree! There are $$$n$$$ nodes in the tree, connected by $$$n-1$$$ edges. On each edge of the tree, there's a set of Christmas lights, which can be represented by an integer in binary representation.  He has $$$m$$$ elves come over and admire his tree. Each elf is assigned two nodes, $$$a$$$ and $$$b$$$, and that elf looks at all lights on the simple path between the two nodes. After this, the elf's favorite number becomes the bitwise XOR of the values of the lights on the edges in that path.However, the North Pole has been recovering from a nasty bout of flu. Because of this, Santa forgot some of the configurations of lights he had put on the tree, and he has already left the North Pole! Fortunately, the elves came to the rescue, and each one told Santa what pair of nodes he was assigned $$$(a_i, b_i)$$$, as well as the parity of the number of set bits in his favorite number. In other words, he remembers whether the number of $$$1$$$'s when his favorite number is written in binary is odd or even.Help Santa determine if it's possible that the memories are consistent, and if it is, remember what his tree looked like, and maybe you'll go down in history!",
    "editorial": "Let $$$\\text{count}(x)$$$ be the number of $$$1$$$-bits in an integer $$$x$$$. Notice that $$$\\text{count}(x \\oplus y)\\mod 2$$$ = $$$\\text{count}(x) \\mod 2 \\oplus \\text{count}(y) \\mod 2$$$. This means that you can replace each integer $$$x$$$ on the tree with $$$\\text{count}(x) \\mod 2$$$. Note that you can pretend the initial given edges are also just elves who traveled over the path consisting solely of that edge. After this transformation, each of the edge weights is either $$$0$$$ or $$$1$$$, and you're given a set of paths and you are told the XOR of each path.Root the tree at node $$$1$$$. Let $$$r_i$$$ be the XOR of the values on the edges from node $$$i$$$ to the root ($$$r_1 = 0$$$). Notice that the XOR of a path $$$(a, b)$$$ is $$$r_a \\oplus r_b$$$. From this, each constraint of the form $$$(a, b, c)$$$ telling you that the XOR of the path $$$(a, b)$$$ has to equal $$$c$$$ is equivalent to $$$r_a \\oplus r_b = c$$$. This problem can be solved using a variant of bipartite coloring, where you create a graph and add a bidirectional edge between $$$(a, b)$$$ with weight $$$c$$$ for each of those constraints. You run dfs through each of the individual connected components. Within a component, choosing the value of a single node uniquely determines the rest. During the dfs, if you're at a node $$$a$$$ and are considering traversing the edge $$$(a, b, c)$$$, you know that $$$r_b = r_a \\oplus c$$$, so you can determine $$$r_b$$$ from $$$r_a$$$.The final value of an edge between $$$a$$$ and $$$p$$$ (the parent of $$$a$$$) is $$$r_a \\oplus r_p$$$."
}{
    "name": "SUM and REPLACE",
    "code": [
        "920",
        "F"
    ],
    "tags": [
        "brute force",
        "data structures",
        "dsu",
        "number theory"
    ],
    "difficulty": 2000,
    "statement": "Let D(x) be the number of positive divisors of a positive integer x. For example, D(2) = 2 (2 is divisible by 1 and 2), D(6) = 4 (6 is divisible by 1, 2, 3 and 6).You are given an array a of n integers. You have to process two types of queries:  REPLACE l r \u2014 for every  replace ai with D(ai);  SUM l r \u2014 calculate . Print the answer for each SUM query.",
    "editorial": "At first let's notice that this function converges very quickly, for values up to 106 it's at most 6 steps. Now we should learn how to skip updates on the numbers 1 and 2.The function values can be calculated from the factorization of numbers in  with Eratosthenes sieve.Let's write two segment trees \u2014 one will store maximum value on segment, the other will store the sum. When updating some segment, check if its maximum is greater than 2. Updates are done in the manner one can usually write build function, you go down to the node corresponding to the segment of length 1 and update the value directly.Overall complexity:  as we access any segment no more than 6 times."
}{
    "name": "Manhattan Subarrays",
    "code": [
        "1550",
        "C"
    ],
    "tags": [
        "brute force",
        "geometry",
        "greedy",
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "Suppose you have two points $$$p = (x_p, y_p)$$$ and $$$q = (x_q, y_q)$$$. Let's denote the Manhattan distance between them as $$$d(p, q) = |x_p - x_q| + |y_p - y_q|$$$.Let's say that three points $$$p$$$, $$$q$$$, $$$r$$$ form a bad triple if $$$d(p, r) = d(p, q) + d(q, r)$$$.Let's say that an array $$$b_1, b_2, \\dots, b_m$$$ is good if it is impossible to choose three distinct indices $$$i$$$, $$$j$$$, $$$k$$$ such that the points $$$(b_i, i)$$$, $$$(b_j, j)$$$ and $$$(b_k, k)$$$ form a bad triple.You are given an array $$$a_1, a_2, \\dots, a_n$$$. Calculate the number of good subarrays of $$$a$$$. A subarray of the array $$$a$$$ is the array $$$a_l, a_{l + 1}, \\dots, a_r$$$ for some $$$1 \\le l \\le r \\le n$$$.Note that, according to the definition, subarrays of length $$$1$$$ and $$$2$$$ are good.",
    "editorial": "Let's figure out criteria for the bad triple $$$p$$$, $$$q$$$, $$$r$$$. It's not hard to prove that the triple is bad, iff point $$$q$$$ lies inside the bounding box of points $$$p$$$ and $$$r$$$. In other words, if $$$\\min(x_p, x_r) \\le x_q \\le \\max(x_p, x_r)$$$ and $$$\\min(y_p, y_r) \\le y_q \\le \\max(y_p, y_r)$$$.Now, looking at points $$$p = (a_i, i)$$$, $$$q = (a_j, j)$$$ and $$$r = (a_k, k)$$$ we can see that the bad situation may arise only if $$$i < j < k$$$\u00a0\u2014 so we can check only ordered triples.Looking closely at inequality $$$\\min(a_i, a_k) \\le a_j \\le \\max(a_i, a_k)$$$ we can note that there are two situations where $$$(i, j, k)$$$ forms a bad triple: when either $$$a_i \\le a_j \\le a_k$$$ or $$$a_i \\ge a_j \\ge a_k$$$. In other words, subarray is bad if and only if it contains either non-decreasing subsequence of length $$$3$$$ or non-increasing subsequence of length $$$3$$$.The final observation is that any sequence of length at least $$$5$$$ contains either non-decreasing or non-increasing subsequence of length $$$3$$$. It's not hard to prove it, either brute-forcing all possible variants (of relative orders) on paper, or searching/remembering the theorem that says it.As a result you need to check only subarrays of length at most $$$4$$$ whichever the way you want. The complexity is $$$O(n)$$$."
}{
    "name": "Michael and Charging Stations",
    "code": [
        "853",
        "D"
    ],
    "tags": [
        "binary search",
        "dp",
        "greedy"
    ],
    "difficulty": 2400,
    "statement": "Michael has just bought a new electric car for moving across city. Michael does not like to overwork, so each day he drives to only one of two his jobs.Michael's day starts from charging his electric car for getting to the work and back. He spends 1000 burles on charge if he goes to the first job, and 2000 burles if he goes to the second job.On a charging station he uses there is a loyalty program that involves bonus cards. Bonus card may have some non-negative amount of bonus burles. Each time customer is going to buy something for the price of x burles, he is allowed to pay an amount of y (0 \u2264 y \u2264 x) burles that does not exceed the bonus card balance with bonus burles. In this case he pays x - y burles with cash, and the balance on the bonus card is decreased by y bonus burles. If customer pays whole price with cash (i.e., y = 0) then 10% of price is returned back to the bonus card. This means that bonus card balance increases by  bonus burles. Initially the bonus card balance is equal to 0 bonus burles.Michael has planned next n days and he knows how much does the charge cost on each of those days. Help Michael determine the minimum amount of burles in cash he has to spend with optimal use of bonus card. Assume that Michael is able to cover any part of the price with cash in any day. It is not necessary to spend all bonus burles at the end of the given period.",
    "editorial": "Before solving problem one observation is required: suppose at day i we have xi bonuses. Then exists optimal solution, which spends 0 or min(ai, xi) bonuses every day. It's quite easy to proof: suppose we have some optimal solution and i is a first day, when neither 0 nor min(ai, xi) bonuses were spent. If i is a last day on which non-zero amount of bonuses was spent, we can notice that solution spending min(ai, xi) bonuses that day is more optimal, so first solution was optimal. So let's consider next day after i, when non-zero amount of bonuses was spent, say j, and amount of bonuses spent at day j is sj (Also, amount of bonuses spent on day i is si). Let's look at solution that spends si + min(si - min(ai, xi), sj) bonuses at day i and sj - min(si - min(ai, xi), sj). That solution is still correct and still optimal, but it spends min(ai, xi) at day i or 0 at day j. Anyway this operation increases first day i when neither i nor min(ai, xi) bonuses were spent or first day j after it, when non-zero amount of burles were spent. But we can't increase i or j infinitely, so, after some iterations of such transformation, solution, spending 0 or min(ai, xi) bonuses in each day.To make an O(n2) solution it's possible to consider dynamic programming approach: let dpi, j be minimum amount of money that is possible to spend at first i days to pay for all chargings and have 100\u00b7j bonuses on card. At first, dp0, 0 = 0 and dpi, j = \u221e. Then we can easy calculate all states going through all states with something like this code:for (int i = 0; i < n; i++) {    for (int j = 0; j <= 2 * n; j++) {         dp[i + 1][j + a[i] / 1000] = min(dp[i + 1][j + a[i] / 1000], dp[i][j] + a[i]);         dp[i + 1][j - min(j, a[i] / 100)] = min(dp[i + 1][j - min(j, a[i] / 100)],                                                  dp[i][j] + a[i] - 100 * min(j, a[i] / 100));     } }Of course, j can be up to 2\u00b7n, because at each day it's possible to earn at most 2 bonuses.To make this solution faster let's consider the following observation: there exists an optimal solution, which never has more 3000 bonuses on bonus card. To proof it let's first proof following lemma:Lemma 1: There exists an optimal solution which spends only 0 or ai bonuses at day i if there are at least 3000 bonuses at card at the beginning of day i. Lemma 1 proof: Let's introduce some designations. Let xi be amount of bonuses at the beginning of day i and si be amount of bonuses spent at day i. Also let's call day i \"fractional\" if si \u2260 0 and si \u2260 ai, and call day i \"interesting\" if si \u2260 0. Let's proof lemma2 and lemma3 at first:Lemma 2: Assume xi \u2265 3000 and j \u2014 next after i interesting day and k \u2014 next after j interesting day. Then there exists an optimal solution in which k is not a fractional day or j is not a fractional day. Lemma2 proof: Suppose is some optimal solution j and k are fractional days. Let's consider a solution spending sj + min(sk, aj - s{j}) bonuses at day j and sk - min(sk, aj - s{j}) at day k. This solution is still correct, because xi \u2265 3000, so for days j and k there is enough bonuses and still optimal. Lemma2 is proved.Lemma 3: Assume xi \u2265 3000 and j \u2014 next after i interesting day. Then there exists an optimal solution is which j is not a fractional day.Lemma 3 proof: Consider some optimal solution with fractional day j. At first let's proof that j is not last interesting day. Suppose, j is last interesting day in solution. But we can make a solution that spends ai bonuses at day i (because ai \u2264 3000) and it will be more optimal. Contradiction. So there exists next after j interesting day. Let's call it k. Let's consider 2 cases:Case 1 (aj = 1000): Let's spend consider solution spending 1000 bonuses at day j and ak - (1000 - sj)) at day k. It's still correct and optimal but j is not a fractional day.Case 2 (aj = 2000): There are two subcases:Case 2.1 (ak = 2000): Let's spend consider solution spending 2000 bonuses at day j and ak - (2000 - sj)) at day k. It's still correct and optimal but j is not a fractional day.Case 2.2 (ak = 1000): Let's proof, k is not last interesting day. Assume k is last interesting day. Consider a solution spending 2000 bonuses at day j and 1000 bonuses at day k. It's correct but more optimal that initial solution. Conrtadiction. Now let p be next after k interesting day (k is not a fractional day by lemma2). If 2000 - aj \u2264 1000 we can consider solution which spends 2000 bonuses at day j, 1000 - (2000 - ak) bonuses at day k and sp bonuses at day p. If 2000 - sj > 1000 let's consider a solution which spends sj + 1000 bonuses at day j, 0 bonuses at day k and sp at day p. But by lemma2 sp = ap, so we can consider solution that spends 2000 bonuses at day j 0 bonuses at day k and ap - (2000 - sj - ak) at day k. All of these solutions are correct and optimal.Lemma 1 proof (end): At first, of course there is at least one interesting day after i (Otherwise, it's more optimal to charge at day i using bounses, but in initial solution si = 0 because xi - 1 \u2264 3000 and xi > 3000). Let's call that day j and by lemma3 j is not fractional day. Let's consider 4 cases now:Case 1: (ai = 1000, aj = 1000). Let's consider a solution with si = 1000 and sj = 0. It's correct and still optimal, but xi \u2264 3000.Case 2: (ai = 2000, aj = 2000). Same as case1.Case 3: (ai = 2000, aj = 1000). Let's consider 2 subcases:Case 3.1: j is not last interesting day. Let k be next interesting day. It ak = 1000 consider a solution spending 2000 bonuses at day i, 0 bonuses at days j and k. It's still correct and optimal, but xi \u2264 3000. If ak = 2000 consider a solution a spending 2000 bonuses at day i, 1000 bonuses at day j and 0 bonuses at day k. It's correct and optimal too, and xi \u2264 3000 too.Case 3.2: j is last interesting day. Let's construct solution this way. At first let's set si = 1000 and sj = 0. Then let's iterate over all ineteresting days after j, say k, in order in increasing time and set si = si + min(2000 - si, sk), sk = sk - min(2000 - si, sk). If after this process we still have some bonus left just add it to si. At the end, si will be equal 2000 because we spent all bonuses, solution will still be correct and optimal, but xi \u2264 3000.Case 4: (ai = 1000, aj = 2000). Let p be last day before i with sp \u2260 0. If ap = 1000 consider a solution with sp = 0, si = 0, sj = 2000. It's correct, optimal and xt \u2264 3000 for each t \u2264 i. If ap = 2000, consider a solution with sp = 2000, si = 0, sj = 0. It's correct, optimal and xt \u2264 3000 for each t \u2264 i, too.So for all cases we can make correct and optimal solution such there is no xi \u2264 3000 for all i, or number of first day with xi > 3000 increases, but it can't increase forever, so after some amount of opereations solution with xi \u2264 3000 for all i will be constructed.Because of this fact we can consider dynamic programming approach described before but notice, that we should consider only states with j \u2264 30. It will have O(n) complexity. Moreover, looking at states with j = 30 is required. It's possible to make a test on which solution, that looks at states with j \u2264 29 will be incorrect."
}{
    "name": "Candies",
    "code": [
        "306",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Polycarpus has got n candies and m friends (n \u2265 m). He wants to make a New Year present with candies to each friend. Polycarpus is planning to present all candies and he wants to do this in the fairest (that is, most equal) manner. He wants to choose such ai, where ai is the number of candies in the i-th friend's present, that the maximum ai differs from the least ai as little as possible.For example, if n is divisible by m, then he is going to present the same number of candies to all his friends, that is, the maximum ai won't differ from the minimum one.",
    "editorial": ""
}{
    "name": "Jamie and To-do List",
    "code": [
        "916",
        "D"
    ],
    "tags": [
        "data structures",
        "interactive",
        "trees"
    ],
    "difficulty": 2200,
    "statement": "Why I have to finish so many assignments???Jamie is getting very busy with his school life. He starts to forget the assignments that he has to do. He decided to write the things down on a to-do list. He assigns a value priority for each of his assignment (lower value means more important) so he can decide which he needs to spend more time on.After a few days, Jamie finds out the list is too large that he can't even manage the list by himself! As you are a good friend of Jamie, help him write a program to support the following operations on the to-do list:  set ai xi\u00a0\u2014 Add assignment ai to the to-do list if it is not present, and set its priority to xi. If assignment ai is already in the to-do list, its priority is changed to xi.  remove ai\u00a0\u2014 Remove assignment ai from the to-do list if it is present in it.  query ai\u00a0\u2014 Output the number of assignments that are more important (have a smaller priority value) than assignment ai, so Jamie can decide a better schedule. Output  - 1 if ai is not in the to-do list.  undo di\u00a0\u2014 Undo all changes that have been made in the previous di days (not including the day of this operation) At day 0, the to-do list is empty. In each of the following q days, Jamie will do exactly one out of the four operations. If the operation is a query, you should output the result of the query before proceeding to the next day, or poor Jamie cannot make appropriate decisions.",
    "editorial": ""
}{
    "name": "Try and Catch",
    "code": [
        "195",
        "C"
    ],
    "tags": [
        "expression parsing",
        "implementation"
    ],
    "difficulty": 1800,
    "statement": "Vasya is developing his own programming language VPL (Vasya Programming Language). Right now he is busy making the system of exceptions. He thinks that the system of exceptions must function like that.The exceptions are processed by try-catch-blocks. There are two operators that work with the blocks: The try operator. It opens a new try-catch-block.  The catch(<exception_type>, <message>) operator. It closes the try-catch-block that was started last and haven't yet been closed. This block can be activated only via exception of type <exception_type>. When we activate this block, the screen displays the <message>. If at the given moment there is no open try-catch-block, then we can't use the catch operator.The exceptions can occur in the program in only one case: when we use the throw operator. The throw(<exception_type>) operator creates the exception of the given type.Let's suggest that as a result of using some throw operator the program created an exception of type a. In this case a try-catch-block is activated, such that this block's try operator was described in the program earlier than the used throw operator. Also, this block's catch operator was given an exception type a as a parameter and this block's catch operator is described later that the used throw operator. If there are several such try-catch-blocks, then the system activates the block whose catch operator occurs earlier than others. If no try-catch-block was activated, then the screen displays message \"Unhandled Exception\".To test the system, Vasya wrote a program that contains only try, catch and throw operators, one line contains no more than one operator, the whole program contains exactly one throw operator.Your task is: given a program in VPL, determine, what message will be displayed on the screen.",
    "editorial": ""
}{
    "name": "Katya and Segments Sets",
    "code": [
        "1080",
        "F"
    ],
    "tags": [
        "data structures",
        "interactive",
        "sortings"
    ],
    "difficulty": 2400,
    "statement": "It is a very important day for Katya. She has a test in a programming class. As always, she was given an interesting problem that she solved very fast. Can you solve that problem?You are given $$$n$$$ ordered segments sets. Each segment can be represented as a pair of two integers $$$[l, r]$$$ where $$$l\\leq r$$$. Each set can contain an arbitrary number of segments (even $$$0$$$). It is possible that some segments are equal.You are also given $$$m$$$ queries, each of them can be represented as four numbers: $$$a, b, x, y$$$. For each segment, find out whether it is true that each set $$$p$$$ ($$$a\\leq p\\leq b$$$) contains at least one segment $$$[l, r]$$$ that lies entirely on the segment $$$[x, y]$$$, that is $$$x\\leq l\\leq r\\leq y$$$. Find out the answer to each query.Note that you need to solve this problem online. That is, you will get a new query only after you print the answer for the previous query.",
    "editorial": "Let's have an array in which we will store each segment and the number of the set to which it belongs. Sort this array in the non-decreasing order of the left border. If the left border is equal, we sort in random order.Now consider any query $$$a$$$ $$$b$$$ $$$x$$$ $$$y$$$. We should find the first position where the left border of the segment is greater than or equal to $$$x$$$. If there is no such position, then it is obvious that the answer will be \"no\", since there is no set that contains at least one suitable segment. Otherwise, we are interested only in the segments from the position that we have found to the last segment in the array. We can forget about the rest. Now let's among these segments for each set with a number from $$$a$$$ to $$$b$$$, find the minimum number $$$W$$$, such that there exists at least one segment that belongs to this set and its right bound is $$$W$$$ (note that we consider only those segments whose left bound is greater than or equal to $$$x$$$). If for some segment this number $$$W$$$ is greater than $$$y$$$, then the answer is \"no\". Otherwise the answer is \"yes\".Let's create a persistent segment tree, where for each set we keep its number $$$W$$$. We will update our $$$W$$$ values \u200b\u200bin reverse order\u00a0\u2014 from the last segment to the first one. After hanging the value of the new $$$W$$$, we will save the current version in our segment tree.Then how to respond to requests? Let's find the position starting from which all the left borders of our segments will be at least $$$x$$$. After that, take the version of the persistent tree of segments that was added immediately after adding this segment. And in this segment tree, we take the minimum on the segment from $$$a$$$ to $$$b$$$. If our minimum is greater than $$$y$$$, then the answer is \"no\". Otherwise the answer is \"yes\"."
}{
    "name": "Prefixes and Suffixes",
    "code": [
        "1730",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "strings",
        "two pointers"
    ],
    "difficulty": 2200,
    "statement": "You have two strings $$$s_1$$$ and $$$s_2$$$ of length $$$n$$$, consisting of lowercase English letters. You can perform the following operation any (possibly zero) number of times:   Choose a positive integer $$$1 \\leq k \\leq n$$$.  Swap the prefix of the string $$$s_1$$$ and the suffix of the string $$$s_2$$$ of length $$$k$$$. Is it possible to make these two strings equal by doing described operations?",
    "editorial": "If you reflect the second string and see what happens, it is easy to see that the elements at the same positions in both strings after any action remain at the same positions relative to each other. Let's combine them into unsorted pairs and treat these pairs as single objects. Now we need to compose a palindrome from these objects. This is always possible with the help of these actions, if there is a palindrome consisting of these objects (pay attention to odd palindromes, there must be a pair of the form (a, a) in the center).Proof of possibility:Let's make an array of pairs, in one action we expand some prefix of this array and the elements in the pairs of this prefix are swapped. Let's prove that we can change the order of the pairs in the array as we like. We will build from the end. Let all the pairs after position $$$i$$$ already stand as we want, and now the pair that we want to place in position $$$i$$$ at position $$$j \\leq i$$$. Let's do the following:$$$1.$$$ $$$k = j$$$ \u2014 will move the pair from position $$$j$$$ to the beginning.$$$2*.$$$ $$$k = 1$$$ \u2014 swap elements within a pair if needed (so pairs are considered unsorted).$$$3.$$$ $$$k = i$$$ \u2014 move the pair from the beginning to position $$$i$$$.(* the $$$2$$$ action is optional if you don't want to change the order of the elements in the pair)With this construction, we can get any permutation of these pairs and a palindrome, if it is possible. If you divide the final palindrome into two strings and expand the second one back, you get the first string.Example:From the test suite from the condition:$$$s_1 = \\mathtt{bbcaa}$$$, $$$s_2 = \\mathtt{cbaab}$$$, expanded $$$s_2 = \\mathtt{baabc}$$$.Couples:$$$\\mathtt{(b, b)}$$$, $$$\\mathtt{(b, a)}$$$, $$$\\mathtt{(c, a)}$$$, $$$\\mathtt{(a, b)}$$$, $$$\\ mathtt{(a, c)}$$$.Pairs unordered:$$$\\mathtt{(b, b)}$$$, $$$\\mathtt{(a, b)} \\cdot 2$$$, $$$\\mathtt{(a, c)} \\cdot 2$$$.Pairs in a palindrome:$$$\\mathtt{(a, b)}$$$, $$$\\mathtt{(a, c)}$$$, $$$\\mathtt{(b, b)}$$$, $$$\\mathtt{(a, c)}$$$, $$$\\mathtt{(a, b)}$$$.Real couples:$$$\\mathtt{(a, b)}$$$, $$$\\mathtt{(a, c)}$$$, $$$\\mathtt{(b, b)}$$$, $$$\\mathtt{(c, a)}$$$, $$$\\mathtt{(b, a)}$$$.Strings: $$$s_1 = \\mathtt{aabcb}$$$ expanded $$$s_2 = \\mathtt{bcbaa}$$$, $$$s_2 = \\mathtt{aabcb}$$$.!!! The pair $$$\\mathtt{(b, b)}$$$ !!!"
}{
    "name": "Mystery Circuit",
    "code": [
        "1145",
        "C"
    ],
    "tags": [
        "bitmasks",
        "brute force"
    ],
    "difficulty": "",
    "statement": "  ",
    "editorial": ""
}{
    "name": "Mixing Water",
    "code": [
        "1359",
        "C"
    ],
    "tags": [
        "binary search",
        "math"
    ],
    "difficulty": 1700,
    "statement": "There are two infinite sources of water:  hot water of temperature $$$h$$$;  cold water of temperature $$$c$$$ ($$$c < h$$$). You perform the following procedure of alternating moves:  take one cup of the hot water and pour it into an infinitely deep barrel;  take one cup of the cold water and pour it into an infinitely deep barrel;  take one cup of the hot water $$$\\dots$$$  and so on $$$\\dots$$$ Note that you always start with the cup of hot water.The barrel is initially empty. You have to pour at least one cup into the barrel. The water temperature in the barrel is an average of the temperatures of the poured cups.You want to achieve a temperature as close as possible to $$$t$$$. So if the temperature in the barrel is $$$t_b$$$, then the absolute difference of $$$t_b$$$ and $$$t$$$ ($$$|t_b - t|$$$) should be as small as possible.How many cups should you pour into the barrel, so that the temperature in it is as close as possible to $$$t$$$? If there are multiple answers with the minimum absolute difference, then print the smallest of them.",
    "editorial": "So there are two kinds of stops to consider: $$$k$$$ hot and $$$k$$$ cold cup and $$$(k + 1)$$$ hot and $$$k$$$ cold cups.The first case is trivial: the temperature is always $$$\\frac{h + c}{2}$$$. In the second case the temperature is always strictly greater than $$$\\frac{h + c}{2}$$$. Thus, if $$$t \\le \\frac{h + c}{2}$$$, then the answer is $$$2$$$.Let's show that otherwise the answer is always achieved through the second case.The temperature after $$$(k + 1)$$$ hot cups and $$$k$$$ cold cups is $$$t_k = \\frac{(k + 1) \\cdot h + k \\cdot c}{2k + 1}$$$. The claim is that $$$t_0 > t_1 > \\dots$$$. Let's prove that by induction.$$$t_0 = h, t_1 = \\frac{2 \\cdot h + c}{3}$$$. $$$c < h$$$, thus $$$t_0 > t_1$$$.Now compare $$$t_k$$$ and $$$t_{k+1}$$$.$$$$$$t_k > t_{k+1}$$$$$$$$$$$$\\frac{(k + 1) \\cdot h + k \\cdot c}{2k + 1} > \\frac{(k + 2) \\cdot h + (k + 1) \\cdot c}{2k + 3}$$$$$$$$$$$$\\frac{k \\cdot (h + c) + h}{2k + 1} > \\frac{(k + 1) \\cdot (h + c) + h}{2k + 3}$$$$$$$$$$$$2k \\cdot (k \\cdot (h + c) + h) + 3k \\cdot (h + c) + 3h > 2k \\cdot ((k + 1) \\cdot (h + c) + h) + (k + 1) \\cdot (h + c) + h$$$$$$$$$$$$2k \\cdot (k \\cdot (h + c) + h - (k + 1) \\cdot (h + c) - h) > (k + 1) \\cdot (h + c) + h - 3k \\cdot (h + c) - 3h$$$$$$$$$$$$2k \\cdot (-(h + c)) > (-2k + 1) \\cdot (h + c) - 2h$$$$$$$$$$$$2h > (h + c)$$$$$$$$$$$$h > c$$$$$$We can also show that this series converges to $$$\\frac{h + c}{2}$$$:I'm sorry that I'm not proficient with any calculus but my intuition says that it's enough to show that $$$\\forall k~t_k > \\frac{h + c}{2}$$$ and $$$\\forall \\varepsilon \\exists k~t_k < \\frac{h + c}{2}$$$ with $$$k \\ge 0$$$.So the first part is:$$$$$$\\frac{(k + 1) \\cdot h + k \\cdot c}{2k + 1} > \\frac{h + c}{2}$$$$$$$$$$$$\\frac{k \\cdot (h + c) + h}{2k + 1} > \\frac{h + c}{2}$$$$$$$$$$$$2k \\cdot (h + c) + 2h > (2k + 1) \\cdot (h + c)$$$$$$$$$$$$2h > h + c$$$$$$$$$$$$h > c$$$$$$And the second part is:$$$$$$\\frac{(k + 1) \\cdot h + k \\cdot c}{2k + 1} < \\frac{h + c}{2} + \\varepsilon$$$$$$$$$$$$\\frac{k \\cdot (h + c) + h}{2k + 1} < \\frac{h + c}{2} + \\varepsilon$$$$$$$$$$$$2k \\cdot (h + c) + 2h < (2k + 1) \\cdot (h + c) + (2k + 1) \\cdot \\varepsilon$$$$$$$$$$$$2h < (h + c) + (2k + 1) \\cdot \\varepsilon$$$$$$$$$$$$h < c + (2k + 1) \\cdot \\varepsilon$$$$$$$$$$$$\\frac{h - c}{\\varepsilon} < 2k + 1$$$$$$So that claim makes us see that for any $$$t$$$ greater than $$$\\frac{h + c}{2}$$$ the answer is always achieved from the second case.That allows us to find such $$$k$$$, that the value of $$$t_k$$$ is exactly $$$t$$$. However, such $$$k$$$ might not be integer. $$$\\frac{(k + 1) \\cdot h + c}{2k + 1} = t \\leftrightarrow$$$ $$$\\frac{k \\cdot (h + c) + h}{2k + 1} = t \\leftrightarrow$$$ $$$k \\cdot (h + c) + h = 2kt + t \\leftrightarrow$$$ $$$k \\cdot (h + c - 2t) = t - h \\leftrightarrow$$$ $$$k = \\frac{t - h}{h + c - 2t}$$$.The only thing left is to compare which side is better to round $$$k$$$ to. It seems some implementations with float numbers might fail due to precision errors. However, it's possible to do these calculations completely in integers.Let's actually rewrite that so that the denominator is always positive $$$k = \\frac{h - t}{2t - h - c}$$$. Now we can round this value down and compare $$$k$$$ and $$$k + 1$$$.So the optimal value is $$$k$$$ if $$$|\\frac{k \\cdot (h + c) + h}{2k + 1} - t| \\le |\\frac{(k + 1) \\cdot (h + c) + h}{2k + 3}| - t$$$. So $$$|(k \\cdot (h + c) + h) - t \\cdot (2k + 1)| \\cdot (2k + 3) \\le |((k + 1) \\cdot (h + c) + h) - t \\cdot (2k + 3)| \\cdot (2k + 1)$$$. Otherwise, the answer is $$$k + 1$$$.You can also find the optimal $$$k$$$ with binary search but the formulas are exactly the same and you have to rely on monotonosity as well. Also, these formulas can get you the better understanding for the upper bound of the answer.Overall complexity: $$$O(1)$$$ or $$$O(\\log h)$$$ per testcase."
}{
    "name": "Range = \u221aSum",
    "code": [
        "1758",
        "D"
    ],
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "math",
        "two pointers"
    ],
    "difficulty": 1800,
    "statement": "You are given an integer $$$n$$$. Find a sequence of $$$n$$$ distinct integers $$$a_1, a_2, \\dots, a_n$$$ such that $$$1 \\leq a_i \\leq 10^9$$$ for all $$$i$$$ and $$$$$$\\max(a_1, a_2, \\dots, a_n) - \\min(a_1, a_2, \\dots, a_n)= \\sqrt{a_1 + a_2 + \\dots + a_n}.$$$$$$It can be proven that there exists a sequence of distinct integers that satisfies all the conditions above.",
    "editorial": "Let us consider the cases when $$$n$$$ is odd and when its even.   $$$n$$$ is odd: First, we can start with the $$$n$$$ consecutive distinct numbers centered at $$$n$$$. The minimum-maximum difference is $$$n - 1$$$, and the sum is $$$n^2$$$. If we add 2 to each number, the minimum-maximum difference remains the same, and the sum increases to $$$n^2 + 2n$$$.Now, we can decrease the minimum by 1 and the increase the maximum by 1. The sum remains at $$$n^2 + 2n$$$, while the difference increases to $$$n + 1$$$. To make the sum equal $$$(n + 1)^2 = n^2 + 2n + 1$$$, we can increase the 2nd last number by 1, which we can do since we previously increased the maximum by 1. As an example, this sequence is followed for $$$n = 5$$$:   [3, 4, 5, 6, 7] (centered at $$$5$$$)  [5, 6, 7, 8, 9] (increase by $$$2$$$)  [4, 6, 7, 8, 10] (shift min/max)  [4, 6, 7, 9, 10] (shift 2nd last)  $$$n$$$ is even: We can let $$$[a_1, \\dots, a_n] = [n / 2, n / 2 + 1, \\dots, n - 1, n + 1, \\dots, 3n / 2]$$$. The difference between the minimum and maximum is $$$n$$$, and the sum of the numbers equals $$$n^2$$$, so this is valid. Other solutions exist, only one is described here."
}{
    "name": "Salazar Slytherin's Locket",
    "code": [
        "855",
        "E"
    ],
    "tags": [
        "bitmasks",
        "dp"
    ],
    "difficulty": 2200,
    "statement": "Harry came to know from Dumbledore that Salazar Slytherin's locket is a horcrux. This locket was present earlier at 12 Grimmauld Place, the home of Sirius Black's mother. It was stolen from there and is now present in the Ministry of Magic in the office of Dolorous Umbridge, Harry's former Defense Against the Dark Arts teacher. Harry, Ron and Hermione are infiltrating the Ministry. Upon reaching Umbridge's office, they observed a code lock with a puzzle asking them to calculate count of magic numbers between two integers l and r (both inclusive). Harry remembered from his detention time with Umbridge that she defined a magic number as a number which when converted to a given base b, all the digits from 0 to b - 1 appear even number of times in its representation without any leading zeros.You have to answer q queries to unlock the office. Each query has three integers bi, li and ri, the base and the range for which you have to find the count of magic numbers.",
    "editorial": "This problem can be solved using precomputation of dp table dp[base][mask][len]. This stores the number of integers in base b and length len that forms the given mask in their representation. The mask is defined as having i - th bit as 1, if the digit i - 1 occurs odd number of times in the representation.Using this precomputed dp array, we can easily calculate the answer for the queries, by converting l - 1 and r to the given base b, then adding the total integers less than equal to r with mask = 0 and subtracting those less than l with mask = 0.Now, to find the number of integers less than equal to l - 1 with mask = 0, we first add all the integers with mask = 0 who have length less than length of l - 1 in base b representation. If length of l - 1 in base b is lb, this value can be calculated as . The second term is subtracted to take into account the trailing zeros. Now, we need to calculate the number of integers with length = lb and value \u2264 l - 1 and mask = 0. Let the number l - 1 in base b representation be l0, l1... llb. Then, if we fix the first digit of our answer, x from 0 to l0 - 1, we can simply calculate the mask for remaining digits we need as 2x and thus adding dp[b][2x][len - 1] to answer. Now, if we fix the first digit as l0 only, we can simply perform the same operation for the second digit, selecting value of second digit, y from 0 to l1 - 1, and thus adding  to answer. And, we can move forward to rest of the digits in the same way.The overall complexity of the solution will be "
}{
    "name": "Longest Array Deconstruction",
    "code": [
        "1575",
        "L"
    ],
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "sortings"
    ],
    "difficulty": 2100,
    "statement": "Mr. Chanek gives you a sequence $$$a$$$ indexed from $$$1$$$ to $$$n$$$. Define $$$f(a)$$$ as the number of indices where $$$a_i = i$$$. You can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the $$$3$$$-rd element from the sequence $$$[4, 2, 3, 1]$$$, the resulting sequence will be $$$[4, 2, 1]$$$. You want to remove some elements from $$$a$$$ in order to maximize $$$f(a)$$$, using zero or more operations. Find the largest possible $$$f(a)$$$.",
    "editorial": ""
}{
    "name": "Perpetual Subtraction",
    "code": [
        "923",
        "E"
    ],
    "tags": [
        "fft",
        "math",
        "matrices"
    ],
    "difficulty": 3100,
    "statement": "There is a number x initially written on a blackboard. You repeat the following action a fixed amount of times:   take the number x currently written on a blackboard and erase it  select an integer uniformly at random from the range [0, x] inclusive, and write it on the blackboard Determine the distribution of final number given the distribution of initial number and the number of steps.",
    "editorial": "We can model this process as a Markov chain with N + 1 states with transition matrixThe task is to find R = AM\u00b7P. A naive solution using Matrix exponentiation is obviously too slow, as it uses  time. We need to improve upon it and we look for eigenvalue decomposition.This is a triangular matrix, thus its eigenvalues are the elements on the main diagonal. HenceWe can show that the eigenvector corresponding to  is  (consult proof at the end).Thus, we have To finalise the eigenvalue decomposition, we need to find the inverse of Q. It can be shown Q and Q - 1 are the same up to the sign (consult proof at the end): The advantage of eigendecomposition is that AM = Q\u00b7\u039bM\u00b7Q - 1,  where the diagonal matrix \u039b can be exponentiated in .We can calculate the result as R = AM\u00b7P = Q\u00b7(\u039bM\u00b7(Q - 1\u00b7P)) .Performed naively, this runs in , which is still too slow. We obviously need to multiply with Q (and its inverse) faster.Fortunately, both linear functions Q and Q - 1 are a convolution and we can compute the multiplication in  using FFT, which is a bit hinted by the modulus in which to compute the answer.Proof of the eigenvectorsWe show that  it holdswhere the fifth equality can be proven by induction on i - k. Proof of the inverseDenote P = QQ - 1.First, we show that the diagonal of the product only contains ones. This is easy, since the i-th row of Q has zeroes until i - 1-th column, i-th column of Q - 1 has zeroes starting from i + 1-th row, and Qi, i = Q - 1i, i = 1. Thus, Pi, i = 1. Next we show that the Pi, j = 0 for i \u2260 j. When i > j, all the summands in the inner product are zero. It remains to show the claim for i < j.Proof that Q and Q - 1 are convolutionsPut y = Q - 1x. We want to show that y can be computed by convolution. See thathence y is a convolution of functions f and g up to some multiplicative factors.The proof for Q is similar, we can just remove all the ( - 1)\u03b1 terms."
}{
    "name": "The Humanoid",
    "code": [
        "1759",
        "E"
    ],
    "tags": [
        "brute force",
        "dp",
        "sortings"
    ],
    "difficulty": 1500,
    "statement": "There are $$$n$$$ astronauts working on some space station. An astronaut with the number $$$i$$$ ($$$1 \\le i \\le n$$$) has power $$$a_i$$$.An evil humanoid has made his way to this space station. The power of this humanoid is equal to $$$h$$$. Also, the humanoid took with him two green serums and one blue serum.In one second , a humanoid can do any of three actions:  to absorb an astronaut with power strictly less humanoid power;  to use green serum, if there is still one left;  to use blue serum, if there is still one left. When an astronaut with power $$$a_i$$$ is absorbed, this astronaut disappears, and power of the humanoid increases by $$$\\lfloor \\frac{a_i}{2} \\rfloor$$$, that is, an integer part of $$$\\frac{a_i}{2}$$$. For example, if a humanoid absorbs an astronaut with power $$$4$$$, its power increases by $$$2$$$, and if a humanoid absorbs an astronaut with power $$$7$$$, its power increases by $$$3$$$.After using the green serum, this serum disappears, and the power of the humanoid doubles, so it increases by $$$2$$$ times.After using the blue serum, this serum disappears, and the power of the humanoid triples, so it increases by $$$3$$$ times.The humanoid is wondering what the maximum number of astronauts he will be able to absorb if he acts optimally.",
    "editorial": "Let's make two obvious remarks:  If we can absorb two astronauts with power $$$x \\le y$$$, then we can always first absorb an astronaut with power $$$x$$$, and then an astronaut with power $$$y$$$;  If we can absorb some astronaut, it is effective for us to do it right now. Let's sort the astronauts powers in increasing order.Now let's lock the sequence of serums we use. There are only three of them: blue serum can be the first, second or third.Let's absorb the astronauts in increasing order of their powers, and if we can't, then use the next serum in a locked sequence or stop.This solution works for $$$O(n)$$$."
}{
    "name": "Hungry Sequence",
    "code": [
        "327",
        "B"
    ],
    "tags": [
        "math"
    ],
    "difficulty": 1200,
    "statement": "Iahub and Iahubina went to a date at a luxury restaurant. Everything went fine until paying for the food. Instead of money, the waiter wants Iahub to write a Hungry sequence consisting of n integers. A sequence a1, a2, ..., an, consisting of n integers, is Hungry if and only if:   Its elements are in increasing order. That is an inequality ai < aj holds for any two indices i, j (i < j).  For any two indices i and j (i < j), aj must not be divisible by ai. Iahub is in trouble, so he asks you for help. Find a Hungry sequence with n elements.",
    "editorial": ""
}{
    "name": "Digits of Number Pi",
    "code": [
        "585",
        "F"
    ],
    "tags": [
        "dp",
        "implementation",
        "strings"
    ],
    "difficulty": 3200,
    "statement": "Vasily has recently learned about the amazing properties of number \u03c0. In one of the articles it has been hypothesized that, whatever the sequence of numbers we have, in some position, this sequence is found among the digits of number \u03c0. Thus, if you take, for example, the epic novel \"War and Peace\" of famous Russian author Leo Tolstoy, and encode it with numbers, then we will find the novel among the characters of number \u03c0.Vasily was absolutely delighted with this, because it means that all the books, songs and programs have already been written and encoded in the digits of \u03c0. Vasily is, of course, a bit wary that this is only a hypothesis and it hasn't been proved, so he decided to check it out.To do this, Vasily downloaded from the Internet the archive with the sequence of digits of number \u03c0, starting with a certain position, and began to check the different strings of digits on the presence in the downloaded archive. Vasily quickly found short strings of digits, but each time he took a longer string, it turned out that it is not in the archive. Vasily came up with a definition that a string of length d is a half-occurrence if it contains a substring of length of at least , which occurs in the archive.To complete the investigation, Vasily took 2 large numbers x, y (x \u2264 y) with the same number of digits and now he wants to find the number of numbers in the interval from x to y, which are half-occurrences in the archive. Help Vasily calculate this value modulo 109 + 7.",
    "editorial": ""
}{
    "name": "Bulbs",
    "code": [
        "615",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 800,
    "statement": "Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it's connected to. Can Vasya light up all the bulbs?If Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.",
    "editorial": "Let's make a counter of number of buttons that switch every lamp off. If there is a lamp with zero counter, output NO, otherwise YES."
}{
    "name": "The Contest",
    "code": [
        "813",
        "A"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1100,
    "statement": "Pasha is participating in a contest on one well-known website. This time he wants to win the contest and will do anything to get to the first place!This contest consists of n problems, and Pasha solves ith problem in ai time units (his solutions are always correct). At any moment of time he can be thinking about a solution to only one of the problems (that is, he cannot be solving two problems at the same time). The time Pasha spends to send his solutions is negligible. Pasha can send any number of solutions at the same moment.Unfortunately, there are too many participants, and the website is not always working. Pasha received the information that the website will be working only during m time periods, jth period is represented by its starting moment lj and ending moment rj. Of course, Pasha can send his solution only when the website is working. In other words, Pasha can send his solution at some moment T iff there exists a period x such that lx \u2264 T \u2264 rx.Pasha wants to know his best possible result. We need to tell him the minimal moment of time by which he is able to have solutions to all problems submitted, if he acts optimally, or say that it's impossible no matter how Pasha solves the problems.",
    "editorial": "Notice that we can keep solved tasks and then submit all at once. So the solution goes down to this: you should find the first moment of time t that the site works at that moment and . Also it's convinient that the intervals are already sorted in increasing order.Let's sum up all elements of array a and write it to some variable sum. The answer is obtained this way: if the sum lies in the current interval then the answer is the sum. Otherwise there are two cases. If there exists some interval j that lj \u2265 sum then the answer is lj. In other case the answer is \"-1\"."
}{
    "name": "Alarm Clocks Everywhere",
    "code": [
        "1155",
        "C"
    ],
    "tags": [
        "math",
        "number theory"
    ],
    "difficulty": 1300,
    "statement": "Ivan is going to sleep now and wants to set his alarm clock. There will be many necessary events tomorrow, the $$$i$$$-th of them will start during the $$$x_i$$$-th minute. Ivan doesn't want to skip any of the events, so he has to set his alarm clock in such a way that it rings during minutes $$$x_1, x_2, \\dots, x_n$$$, so he will be awake during each of these minutes (note that it does not matter if his alarm clock will ring during any other minute).Ivan can choose two properties for the alarm clock \u2014 the first minute it will ring (let's denote it as $$$y$$$) and the interval between two consecutive signals (let's denote it by $$$p$$$). After the clock is set, it will ring during minutes $$$y, y + p, y + 2p, y + 3p$$$ and so on.Ivan can choose any minute as the first one, but he cannot choose any arbitrary value of $$$p$$$. He has to pick it among the given values $$$p_1, p_2, \\dots, p_m$$$ (his phone does not support any other options for this setting).So Ivan has to choose the first minute $$$y$$$ when the alarm clock should start ringing and the interval between two consecutive signals $$$p_j$$$ in such a way that it will ring during all given minutes $$$x_1, x_2, \\dots, x_n$$$ (and it does not matter if his alarm clock will ring in any other minutes).Your task is to tell the first minute $$$y$$$ and the index $$$j$$$ such that if Ivan sets his alarm clock with properties $$$y$$$ and $$$p_j$$$ it will ring during all given minutes $$$x_1, x_2, \\dots, x_n$$$ or say that it is impossible to choose such values of the given properties. If there are multiple answers, you can print any.",
    "editorial": "It is obvious that we can always take $$$x_1$$$ as $$$y$$$. But we don't know which value of $$$p$$$ we can take. Let $$$d_i$$$ be $$$x_{i + 1} - x_i$$$ for all $$$i$$$ from $$$1$$$ to $$$n-1$$$. The value of $$$p$$$ should be divisor of each value of $$$d_i$$$. The maximum possible divisor of each $$$d_i$$$ is $$$g = gcd(d_1, d_2, \\dots, d_{n-1})$$$ (greatest common divisor). And then it is obvious that the value of $$$p$$$ should be the divisor of $$$g$$$. So we have to find any divisor of $$$g$$$ among all values $$$p_j$$$. If there is no such value then the answer is \"NO\".Time complexity: $$$O(n \\log n)$$$."
}{
    "name": "Sereja and Mirroring",
    "code": [
        "426",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1300,
    "statement": "Let's assume that we are given a matrix b of size x \u00d7 y, let's determine the operation of mirroring matrix b. The mirroring of matrix b is a 2x \u00d7 y matrix c which has the following properties:  the upper half of matrix c (rows with numbers from 1 to x) exactly matches b;  the lower half of matrix c (rows with numbers from x + 1 to 2x) is symmetric to the upper one; the symmetry line is the line that separates two halves (the line that goes in the middle, between rows x and x + 1). Sereja has an n \u00d7 m matrix a. He wants to find such matrix b, that it can be transformed into matrix a, if we'll perform on it several (possibly zero) mirrorings. What minimum number of rows can such matrix contain?",
    "editorial": ""
}{
    "name": "Assigning to Classes",
    "code": [
        "1300",
        "B"
    ],
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "difficulty": 1000,
    "statement": "Reminder: the median of the array $$$[a_1, a_2, \\dots, a_{2k+1}]$$$ of odd number of elements is defined as follows: let $$$[b_1, b_2, \\dots, b_{2k+1}]$$$ be the elements of the array in the sorted order. Then median of this array is equal to $$$b_{k+1}$$$.There are $$$2n$$$ students, the $$$i$$$-th student has skill level $$$a_i$$$. It's not guaranteed that all skill levels are distinct.Let's define skill level of a class as the median of skill levels of students of the class.As a principal of the school, you would like to assign each student to one of the $$$2$$$ classes such that each class has odd number of students (not divisible by $$$2$$$). The number of students in the classes may be equal or different, by your choice. Every student has to be assigned to exactly one class. Among such partitions, you want to choose one in which the absolute difference between skill levels of the classes is minimized.What is the minimum possible absolute difference you can achieve?",
    "editorial": "Let's sort the array. From now on, $$$a_1 \\le a_2 \\dots \\le a_{2n}$$$.Consider any partition. Suppose that the first class has $$$2k+1$$$ students, and the skill level of this class is $$$a_i$$$, and the second class had $$$2l+1$$$ students, and the skill level of this class is $$$a_j$$$, where $$$(2k + 1) + (2l + 1) = 2n \\implies k + l = n-1$$$. Without losing generality, $$$i<j$$$. At least $$$n+1$$$ students have skill level at least $$$a_i$$$. Indeed, as $$$a_i$$$ is a median of his class, he and $$$k$$$ other students have skill level at least $$$a_i$$$. As $$$a_j\\ge a_i$$$ and at least $$$l$$$ other students of the second class have skill level at least $$$a_j\\ge a_i$$$, we get at least $$$k + l + 2 = n + 1$$$ students (including $$$a_i$$$) with skill level at least $$$a_i$$$. Therefore, $$$a_i\\le a_n$$$.Similarly, we get that at least $$$n + 1$$$ students have skill level at most $$$a_j$$$. Therefore, $$$a_j\\ge a_{n+1}$$$.So, $$$|a_j - a_i| \\ge a_{n+1} - a_n$$$. However, $$$a_{n+1} - a_n$$$ is achievable. Let's put student $$$a_n$$$ into the class alone, and all other students into other class. $$$a_{n+1}$$$ will be the median skill level of that class, so the absolute difference will be exactly $$$a_{n+1} - a_n$$$.Therefore, it's enough to sort the array and to output the difference between two middle elements. "
}{
    "name": "Accounting",
    "code": [
        "30",
        "A"
    ],
    "tags": [
        "brute force",
        "math"
    ],
    "difficulty": 1400,
    "statement": "A long time ago in some far country lived king Copa. After the recent king's reform, he got so large powers that started to keep the books by himself.The total income A of his kingdom during 0-th year is known, as well as the total income B during n-th year (these numbers can be negative \u2014 it means that there was a loss in the correspondent year). King wants to show financial stability. To do this, he needs to find common coefficient X \u2014 the coefficient of income growth during one year. This coefficient should satisfy the equation:A\u00b7Xn = B.Surely, the king is not going to do this job by himself, and demands you to find such number X.It is necessary to point out that the fractional numbers are not used in kingdom's economy. That's why all input numbers as well as coefficient X must be integers. The number X may be zero or negative.",
    "editorial": ""
}{
    "name": "Palindrome Dance",
    "code": [
        "1040",
        "A"
    ],
    "tags": [
        "greedy"
    ],
    "difficulty": 1000,
    "statement": "A group of $$$n$$$ dancers rehearses a performance for the closing ceremony. The dancers are arranged in a row, they've studied their dancing moves and can't change positions. For some of them, a white dancing suit is already bought, for some of them \u2014 a black one, and for the rest the suit will be bought in the future.On the day when the suits were to be bought, the director was told that the participants of the olympiad will be happy if the colors of the suits on the scene will form a palindrome. A palindrome is a sequence that is the same when read from left to right and when read from right to left. The director liked the idea, and she wants to buy suits so that the color of the leftmost dancer's suit is the same as the color of the rightmost dancer's suit, the 2nd left is the same as 2nd right, and so on.The director knows how many burls it costs to buy a white suit, and how many burls to buy a black suit. You need to find out whether it is possible to buy suits to form a palindrome, and if it's possible, what's the minimal cost of doing so. Remember that dancers can not change positions, and due to bureaucratic reasons it is not allowed to buy new suits for the dancers who already have suits, even if it reduces the overall spending.",
    "editorial": "Consider a pair of dancers located symmetrically with respect to the center of the stage. If they already have different suits, the answer is definitely \"impossible\". If they both have same suits, they are fine. If one of them doesn't have a suit, buy him a matching one. Finally, if both don't have suits, buy them two same suits of the cheaper color. Also, if $$$n$$$ is odd and the central dancer doesn't have a suit, buy him a cheaper one."
}{
    "name": "Yet Another Substring Reverse",
    "code": [
        "1234",
        "F"
    ],
    "tags": [
        "bitmasks",
        "dp"
    ],
    "difficulty": 2200,
    "statement": "You are given a string $$$s$$$ consisting only of first $$$20$$$ lowercase Latin letters ('a', 'b', ..., 't').Recall that the substring $$$s[l; r]$$$ of the string $$$s$$$ is the string $$$s_l s_{l + 1} \\dots s_r$$$. For example, the substrings of \"codeforces\" are \"code\", \"force\", \"f\", \"for\", but not \"coder\" and \"top\".You can perform the following operation no more than once: choose some substring $$$s[l; r]$$$ and reverse it (i.e. the string $$$s_l s_{l + 1} \\dots s_r$$$ becomes $$$s_r s_{r - 1} \\dots s_l$$$).Your goal is to maximize the length of the maximum substring of $$$s$$$ consisting of distinct (i.e. unique) characters.The string consists of distinct characters if no character in this string appears more than once. For example, strings \"abcde\", \"arctg\" and \"minecraft\" consist of distinct characters but strings \"codeforces\", \"abacaba\" do not consist of distinct characters.",
    "editorial": "First of all, I wanted to offer you one little challenge: I found a solution that I can't break (and I don't sure if it can be broken) and I will be so happy if anyone will give me countertest which will break it. You can see its code below.Let's notice that we can reduce our problem to the following: find two substrings of the given string that letters in them do not intersect and the total length of these substrings is the maximum possible. Why can we make such a reduction? It is so because our answer consists of at most two non-intersecting parts: one fixed substring and at most one substring that we appended to the first one. We can always append any other substring to the first one by one reverse operation (just look at some examples to understand it).Let's iterate over all possible substrings of length at most $$$AL$$$ (where $$$AL$$$ is the size of the alphabet) which contain distinct letters. We can do it in $$$O(n AL)$$$. Let the current substring containing distinct letters be $$$s[i; j]$$$. Let's create the bitmask corresponding to this substring: the bit $$$pos$$$ is $$$1$$$ if the $$$pos$$$-th letter of the alphabet is presented in the substring and $$$0$$$ otherwise (letters are $$$0$$$-indexed).Store all these masks somewhere. Notice that our current problem can be reduced to the following: we have the set of masks and we need to find a pair of masks that they do not intersect and their total number of ones in them is the maximum possible. This reduction is less obvious than the previous one but you also can understand it considering some examples.So how to solve this problem? We can do it with easy bitmasks dynamic programming! Let $$$dp_{mask}$$$ be the maximum number of ones in some mask that is presented in the given string and it is the submask of $$$mask$$$. How to calculate this dynamic programming? First of all, all values $$$dp_{mask}$$$ for all masks presented in the string are equal to the number of ones in corresponding masks. Let's iterate over all masks from $$$0$$$ to $$$2^{AL} - 1$$$. Let the current mask be $$$mask$$$. Then let's try to update the answer for this mask with the answer for one of its submasks. It is obvious that because of dynamic programming we need to remove at most one bit from our mask to cover all possible submasks that can update our answer. So let's iterate over all bits in $$$mask$$$, let the current bit be $$$pos$$$. If this bit is zero then just skip it. Otherwise update $$$dp_{mask} := max(dp_{mask}, dp_{mask \\hat{} 2^{pos}})$$$, where $$$\\hat{}$$$ is the xor operation.After calculating this dynamic programming we can finally calculate the answer. Let's iterate over all masks presented in the string, let the current mask be $$$mask$$$. We can update the answer with the number of ones in $$$mask$$$ plus $$$dp_{mask \\hat{} (2^{AL} - 1)}$$$ ($$$mask \\hat{} (2^{AL} - 1)$$$ is the completion of $$$mask$$$).Total complexity: $$$O(n AL + AL 2^{AL})$$$."
}{
    "name": "Longest Subsequence",
    "code": [
        "632",
        "D"
    ],
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "difficulty": 2100,
    "statement": "You are given array a with n elements and the number m. Consider some subsequence of a and the value of least common multiple (LCM) of its elements. Denote LCM as l. Find any longest subsequence of a with the value l \u2264 m.A subsequence of a is an array we can get by erasing some elements of a. It is allowed to erase zero or all elements.The LCM of an empty array equals 1.",
    "editorial": ""
}{
    "name": "LCM Challenge",
    "code": [
        "235",
        "A"
    ],
    "tags": [
        "number theory"
    ],
    "difficulty": 1600,
    "statement": "Some days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.But I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?",
    "editorial": ""
}{
    "name": "Graph And Its Complement",
    "code": [
        "990",
        "D"
    ],
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "Given three numbers $$$n, a, b$$$. You need to find an adjacency matrix of such an undirected graph that the number of components in it is equal to $$$a$$$, and the number of components in its complement is $$$b$$$. The matrix must be symmetric, and all digits on the main diagonal must be zeroes.In an undirected graph loops (edges from a vertex to itself) are not allowed. It can be at most one edge between a pair of vertices.The adjacency matrix of an undirected graph is a square matrix of size $$$n$$$ consisting only of \"0\" and \"1\", where $$$n$$$ is the number of vertices of the graph and the $$$i$$$-th row and the $$$i$$$-th column correspond to the $$$i$$$-th vertex of the graph. The cell $$$(i,j)$$$ of the adjacency matrix contains $$$1$$$ if and only if the $$$i$$$-th and $$$j$$$-th vertices in the graph are connected by an edge.A connected component is a set of vertices $$$X$$$ such that for every two vertices from this set there exists at least one path in the graph connecting this pair of vertices, but adding any other vertex to $$$X$$$ violates this rule.The complement or inverse of a graph $$$G$$$ is a graph $$$H$$$ on the same vertices such that two distinct vertices of $$$H$$$ are adjacent if and only if they are not adjacent in $$$G$$$.",
    "editorial": "Let's prove that if $$$a > 1$$$, then $$$b = 1$$$. Let $$$G$$$ be the original graph, and $$$H$$$ \u2014 the complement of the graph $$$G$$$. Let's look at each pair of vertices $$$(u, v)$$$. If $$$u$$$ and $$$v$$$ belong to different components of the graph $$$G$$$, then there is an edge between them in the graph $$$H$$$. Otherwise, $$$u$$$ and $$$v$$$ belong to the same component of the graph $$$G$$$, but since $$$G$$$ has more than one component, there is vertex $$$x$$$ in other component of $$$G$$$, and there are edges $$$\\{u,x\\}$$$ and $$$\\{v, x\\}$$$ in $$$H$$$. That's why, there is a connected path for any pair of vertices $$$(u, v)$$$, and the graph $$$H$$$ is connected. Similarly, the case $$$b > 1$$$ is proved.So, if $$$min(a, b) > 1$$$, then the answer is \"NO\". Otherwise, $$$min(a, b) = 1$$$. Consider the case where $$$b = 1$$$ (if $$$b > a$$$, we can swap $$$a$$$ and $$$b$$$, and output complement of the constructed graph). To have $$$a$$$ components in the graph $$$G$$$, it is enough to connect the vertex $$$1$$$ with the vertex $$$2$$$, the vertex $$$2$$$ with the vertex $$$3$$$, $$$\\cdots$$$, the vertex $$$n - a$$$ with the vertex $$$n - a + 1$$$. A particular cases are the tests $$$n = 2, a = 1, b = 1$$$ and $$$ n = 3, a = 1, b = 1$$$. There is no suitable graph for them."
}{
    "name": "New Passenger Trams",
    "code": [
        "1379",
        "D"
    ],
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "sortings",
        "two pointers"
    ],
    "difficulty": 2300,
    "statement": "There are many freight trains departing from Kirnes planet every day. One day on that planet consists of $$$h$$$ hours, and each hour consists of $$$m$$$ minutes, where $$$m$$$ is an even number. Currently, there are $$$n$$$ freight trains, and they depart every day at the same time: $$$i$$$-th train departs at $$$h_i$$$ hours and $$$m_i$$$ minutes.The government decided to add passenger trams as well: they plan to add a regular tram service with half-hour intervals. It means that the first tram of the day must depart at $$$0$$$ hours and $$$t$$$ minutes, where $$$0 \\le t < {m \\over 2}$$$, the second tram departs $$$m \\over 2$$$ minutes after the first one and so on. This schedule allows exactly two passenger trams per hour, which is a great improvement.To allow passengers to board the tram safely, the tram must arrive $$$k$$$ minutes before. During the time when passengers are boarding the tram, no freight train can depart from the planet. However, freight trains are allowed to depart at the very moment when the boarding starts, as well as at the moment when the passenger tram departs. Note that, if the first passenger tram departs at $$$0$$$ hours and $$$t$$$ minutes, where $$$t < k$$$, then the freight trains can not depart during the last $$$k - t$$$ minutes of the day.  A schematic picture of the correct way to run passenger trams. Here $$$h=2$$$ (therefore, the number of passenger trams is $$$2h=4$$$), the number of freight trains is $$$n=6$$$. The passenger trams are marked in red (note that the spaces between them are the same). The freight trains are marked in blue. Time segments of length $$$k$$$ before each passenger tram are highlighted in red. Note that there are no freight trains inside these segments. Unfortunately, it might not be possible to satisfy the requirements of the government without canceling some of the freight trains. Please help the government find the optimal value of $$$t$$$ to minimize the number of canceled freight trains in case all passenger trams depart according to schedule.",
    "editorial": "Let's look what happens if we fix $$$t$$$ for answer. Start time leads to canceling every train, which has $$$m_i$$$ in one of ranges $$$[t - k + 1, t - 1],\\ [t + \\frac{m}{2} - k + 1, t + \\frac{m}{2} - 1]$$$. Some borders may be either negative or greater than $$$m$$$, but values must be count modulo $$$m$$$. We may imagine them as segments on a circle with length m.Now let's look at every train. If train departs at $$$m_i$$$ then it must be canceled if we choose $$$t$$$ in segments $$$[m_i + 1, m_i + k - 1],\\ [m_i + \\frac{m}{2} + 1, m_i + \\frac{m}{2} + k - 1]$$$. Otherwise it shouldn't be canceled. So, we need to find such point $$$t$$$ in $$$[0, \\frac{m}{2} - 1]$$$, that $$$t$$$ is covered by minimal number of segments.Note that we block two simmetrical segments \u2014 difference between their borders is equal to half of circle's length. Cause we need only segments in first half of the cycle, we can look at these segments modulo $$$\\frac{m}{2}$$$, where they collapse into one segment.Now we need to sort segment's borders. Segments are placed on circle, so some of them should be split in two \u2014 one ends in $$$\\frac{m}{2} - 1$$$, another starts at $$$0$$$. Now we need to find point, which is covered by minimal number of segments. For that we will keep a variable counting current number of open segments, and change it from one coordinate to another. We can skip coordinates with no events on them, so all solution will take $$$O(n \\log n)$$$ time to solve."
}{
    "name": "Wooden Spoon",
    "code": [
        "1784",
        "D"
    ],
    "tags": [
        "combinatorics",
        "dp"
    ],
    "difficulty": 2400,
    "statement": "$$$2^n$$$ people, numbered with distinct integers from $$$1$$$ to $$$2^n$$$, are playing in a single elimination tournament. The bracket of the tournament is a full binary tree of height $$$n$$$ with $$$2^n$$$ leaves.When two players meet each other in a match, a player with the smaller number always wins. The winner of the tournament is the player who wins all $$$n$$$ their matches.A virtual consolation prize \"Wooden Spoon\" is awarded to a player who satisfies the following $$$n$$$ conditions:   they lost their first match;  the player who beat them lost their second match;  the player who beat that player lost their third match;  $$$\\ldots$$$;  the player who beat the player from the previous condition lost the final match of the tournament. It can be shown that there is always exactly one player who satisfies these conditions.Consider all possible $$$(2^n)!$$$ arrangements of players into the tournament bracket. For each player, find the number of these arrangements in which they will be awarded the \"Wooden Spoon\", and print these numbers modulo $$$998\\,244\\,353$$$.",
    "editorial": "Let's focus on the sequence of players beating each other $$$1 = a_0 < a_1 < \\ldots < a_n$$$: $$$a_0$$$ is the tournament champion, $$$a_0$$$ beats $$$a_1$$$ in the last match, $$$a_1$$$ beats $$$a_2$$$ in the second-to-last match, $$$\\ldots$$$, $$$a_{n-1}$$$ beats $$$a_n$$$ in the first match.For a fixed such sequence, how many ways are there to fill the tournament bracket?Let's look at the sequence in reverse.There are $$$2^n$$$ ways to put player $$$a_n$$$ somewhere.Player $$$a_{n-1}$$$ has to be the opponent of player $$$a_n$$$ in the first match.Player $$$a_{n-2}$$$ has to beat some player $$$b > a_{n-2}$$$ in the first match, and then beat $$$a_{n-1}$$$ in the second match. There are $$$2^n - a_{n-2} - 2$$$ ways to choose player $$$b$$$ (since it can not be equal to $$$a_{n-1}$$$ and $$$a_n$$$), and there are also $$$2$$$ ways to order $$$a_{n-2}$$$ and $$$b$$$.Player $$$a_{n-3}$$$ has to be the winner of a subbracket containing $$$3$$$ other players $$$c_1, c_2, c_3 > a_{n-3}$$$, and then beat $$$a_{n-2}$$$ in the third match. There are $$$2^n - a_{n-3} - 4$$$ players to choose $$$c_i$$$ from (since they can not be equal to $$$a_{n-2}$$$, $$$a_{n-1}$$$, $$$a_n$$$, and $$$b$$$), and there are $$$\\binom{2^n - a_{n-3} - 4}{3}$$$ ways to do so, and there are also $$$4!$$$ ways to order $$$a_{n-3}$$$, $$$c_1$$$, $$$c_2$$$, and $$$c_3$$$.In general, player $$$a_{n - i}$$$ has to be the winner of a subbracket containing $$$2^{i-1} - 1$$$ other players, and there are $$$2^n - a_{n-i} - 2^{i-1}$$$ players to choose from, and there are $$$\\binom{2^n - a_{n-i} - 2^{i-1}}{2^{i-1} - 1}$$$ ways to choose, and also $$$(2^{i-1})!$$$ ways to order this subbracket.You can see that the total number of brackets for a fixed sequence $$$1 = a_0 < a_1 < \\ldots < a_n$$$ can be represented as $$$f(a_0, 0) \\cdot f(a_1, 1) \\cdot \\ldots \\cdot f(a_{n-1}, n-1) \\cdot f(a_n, n)$$$, where $$$f(a_i, i)$$$ is some function of a player number and a round number.Now let's use dynamic programming: let $$$d(a_i, i)$$$ be the sum of products of $$$f(a_0, 0) \\cdot f(a_1, 1) \\cdot \\ldots \\cdot f(a_i, i)$$$ over all sequences $$$1 = a_0 < a_1 < \\ldots < a_i$$$. Then:   $$$d(1, 0) = f(1, 0)$$$;  $$$d(a_0, 0) = 0$$$ for $$$a_0 > 1$$$;  $$$d(a_i, i) = f(a_i, i) \\cdot \\sum \\limits_{a_{i-1}=1}^{a_i-1} d(a_{i-1}, i-1)$$$ for $$$i > 0$$$. The answer for player $$$x$$$ is $$$d(x, n)$$$.This DP has $$$O(n \\cdot 2^n)$$$ states, and note that the inner sums in the formulas for $$$d(a_i, i)$$$ and $$$d(a_i + 1, i)$$$ only differ by one summand. Thus, by using cumulative sums for transitions, we can achieve an $$$O(n \\cdot 2^n)$$$ time complexity."
}{
    "name": "Arpa's weak amphitheater and Mehrdad's valuable Hoses",
    "code": [
        "741",
        "B"
    ],
    "tags": [
        "dfs and similar",
        "dp",
        "dsu"
    ],
    "difficulty": 1600,
    "statement": "Just to remind, girls in Arpa's land are really nice.Mehrdad wants to invite some Hoses to the palace for a dancing party. Each Hos has some weight wi and some beauty bi. Also each Hos may have some friends. Hoses are divided in some friendship groups. Two Hoses x and y are in the same friendship group if and only if there is a sequence of Hoses a1, a2, ..., ak such that ai and ai + 1 are friends for each 1 \u2264 i < k, and a1 = x and ak = y.  Arpa allowed to use the amphitheater of palace to Mehrdad for this party. Arpa's amphitheater can hold at most w weight on it. Mehrdad is so greedy that he wants to invite some Hoses such that sum of their weights is not greater than w and sum of their beauties is as large as possible. Along with that, from each friendship group he can either invite all Hoses, or no more than one. Otherwise, some Hoses will be hurt. Find for Mehrdad the maximum possible total beauty of Hoses he can invite so that no one gets hurt and the total weight doesn't exceed w.",
    "editorial": "It\u2019s a simple knapsack problem. Let\u2019s solve this version of knapsack problem first: we have n sets of items, each item has value and weight, find the maximum value we can earn if we can choose at most one item from each set and the sum of the chosen items must be less than or equal to W. Let dpw be the max value we can earn if the sum of weights of chosen items is less than or equal to w. Now iterate on sets one by one and update dp as follows: for each item X, and for each weight w, newDpw = max(newDpw, oldDpw - X.weight + X.value).Run dfs and find groups at first. The problem is same with above problem, each group is some set in above problem, just add the whole group as an item to the set that related to this group.Time complexity: ."
}{
    "name": "Sum Over Zero",
    "code": [
        "1788",
        "E"
    ],
    "tags": [
        "data structures",
        "dfs and similar",
        "dp"
    ],
    "difficulty": 2200,
    "statement": "You are given an array $$$a_1, a_2, \\ldots, a_n$$$ of $$$n$$$ integers. Consider $$$S$$$ as a set of segments satisfying the following conditions.  Each element of $$$S$$$ should be in form $$$[x, y]$$$, where $$$x$$$ and $$$y$$$ are integers between $$$1$$$ and $$$n$$$, inclusive, and $$$x \\leq y$$$.  No two segments in $$$S$$$ intersect with each other. Two segments $$$[a, b]$$$ and $$$[c, d]$$$ intersect if and only if there exists an integer $$$x$$$ such that $$$a \\leq x \\leq b$$$ and $$$c \\leq x \\leq d$$$.  For each $$$[x, y]$$$ in $$$S$$$, $$$a_x+a_{x+1}+ \\ldots +a_y \\geq 0$$$. The length of the segment $$$[x, y]$$$ is defined as $$$y-x+1$$$. $$$f(S)$$$ is defined as the sum of the lengths of every element in $$$S$$$. In a formal way, $$$f(S) = \\sum_{[x, y] \\in S} (y - x + 1)$$$. Note that if $$$S$$$ is empty, $$$f(S)$$$ is $$$0$$$.What is the maximum $$$f(S)$$$ among all possible $$$S$$$?",
    "editorial": "Denote $$$p$$$ as the prefix sum of $$$a$$$. For a segment $$$[x+1, y]$$$ to be an element of $$$S$$$, $$$p_x \\leq p_y$$$ should be satisfied.Let's denote $$$dp_i$$$ as the maximum value of the sum of length of segment smaller than $$$i$$$ in $$$S$$$. Segment $$$[x, y]$$$ is smaller than $$$i$$$ if $$$y \\leq i$$$. If there is no segment ending at $$$i$$$, $$$dp_i=dp_{i-1}$$$. If there is segment $$$[k+1, i]$$$ in $$$S$$$, $$$dp_i=\\max_{ p_{k} \\leq p_i }(dp_k+i-k)$$$. By summing up, $$$dp_i = \\max(dp_{i-1}, \\max_{p_k \\leq p_i}(dp_k+i-k)$$$ With this dp, we get an $$$O(N^2)$$$ solution.Now let's try to speed up the dp transition using segment tree. First, use coordinate compression on $$$p_i$$$ since we only see whether one prefix sum is bigger than the other. We will maintain a segment tree that stores $$$dp_k-k$$$ in position $$$p_k$$$.Let's find $$$dp_i$$$ in order of $$$i$$$. $$$dp_i = \\max(dp_{i-1}, \\max_{p_k \\leq p_i}(dp_k-k)+i)$$$ We can solve $$$\\max_{p_k \\leq p_i}(dp_k-k)$$$ by range query $$$[0, p_i]$$$ on a segment tree. So we can solve $$$dp_i$$$ in $$$O(logN)$$$ for each $$$i$$$.The entire problem is solved in $$$O(NlogN)$$$.There is an alternative solution that maintains pair $$$(dp_k-k, p_k)$$$ monotonically with a set. This solution also runs in $$$O(NlogN)$$$."
}{
    "name": "Submatrices",
    "code": [
        "1533",
        "H"
    ],
    "tags": [
        "*special",
        "bitmasks",
        "data structures",
        "dp"
    ],
    "difficulty": "",
    "statement": "You are given matrix $$$s$$$ that contains $$$n$$$ rows and $$$m$$$ columns. Each element of a matrix is one of the $$$5$$$ first Latin letters (in upper case).For each $$$k$$$ ($$$1 \\le k \\le 5$$$) calculate the number of submatrices that contain exactly $$$k$$$ different letters. Recall that a submatrix of matrix $$$s$$$ is a matrix that can be obtained from $$$s$$$ after removing several (possibly zero) first rows, several (possibly zero) last rows, several (possibly zero) first columns, and several (possibly zero) last columns. If some submatrix can be obtained from $$$s$$$ in two or more ways, you have to count this submatrix the corresponding number of times.",
    "editorial": "Let's iterate through the subset of the first $$$5$$$ letters and count the number of submatrices that contain only letters from this subset. To do this, create a matrix $$$a$$$ of size $$$n \\times m$$$, where $$$a_{i, j} = 1$$$ if $$$s_{i, j}$$$ belongs to the fixed subset, and $$$0$$$ otherwise. Now, you have to calculate the number of submatrices that consist only of $$$1$$$'s in this matrix.This can be calculated as follows. Let's iterate over the row $$$i$$$, it will be the lower boundary of the submatrix. Denote $$$d_j$$$ as the maximum value such that all $$$a_{k, j} = 1$$$ for $$$k \\in (i - d_j, i]$$$ (build an array of these values). Using this array, let's calculate $$$l_j$$$\u00a0\u2014 the closest position to the left where the value in the array $$$d$$$ is strictly less than $$$d_j$$$, and $$$r_j$$$\u00a0\u2014 the closest position to the right where the value in the array $$$d$$$ is not greater than $$$d_j$$$. Then the number of unit submatrices where $$$i$$$ is the lower bound is $$$\\sum\\limits_{j=1}^{m} (j - l_j) * (r_j - j) * d_j$$$.Thus, we have counted all the answers for subsets of letters, but these values are not exactly what we need to print (for example, if the submatrix contained $$$2$$$ different letters, then it will be taken into account in subsets of $$$3$$$, $$$4$$$ and $$$5$$$ letters that include these $$$2$$$ letters), but this is easy to fix with an approach similar to inclusion-exclusion. The final complexity of the solution is $$$O (2^5nm)$$$."
}{
    "name": "Petr and Permutations",
    "code": [
        "986",
        "B"
    ],
    "tags": [
        "combinatorics",
        "math"
    ],
    "difficulty": 1800,
    "statement": "Petr likes to come up with problems about randomly generated data. This time problem is about random permutation. He decided to generate a random permutation this way: he takes identity permutation of numbers from $$$1$$$ to $$$n$$$ and then $$$3n$$$ times takes a random pair of different elements and swaps them. Alex envies Petr and tries to imitate him in all kind of things. Alex has also come up with a problem about random permutation. He generates a random permutation just like Petr but swaps elements $$$7n+1$$$ times instead of $$$3n$$$ times. Because it is more random, OK?!You somehow get a test from one of these problems and now you want to know from which one.",
    "editorial": "Each swap change the parity of permutation. $$$3n$$$ and $$$7n+1$$$ always have different parities, so the solution is just to calculate the parity of the given permutation and check if it is equal to parity of $$$3n$$$ or to parity of $$$7n+1$$$.To calculate the parity you can just calculate the number of inversions with your favorite method (Fenwick tree, Segment tree, mergesort or whatever) in $$$O(n \\log n)$$$ time. But it is easier to calculate the number of cycles in permutation in $$$O(n)$$$ time. "
}{
    "name": "Repetitions Decoding",
    "code": [
        "1641",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "implementation",
        "sortings"
    ],
    "difficulty": 2000,
    "statement": "Olya has an array of integers $$$a_1, a_2, \\ldots, a_n$$$. She wants to split it into tandem repeats. Since it's rarely possible, before that she wants to perform the following operation several (possibly, zero) number of times: insert a pair of equal numbers into an arbitrary position. Help her!More formally:  A tandem repeat is a sequence $$$x$$$ of even length $$$2k$$$ such that for each $$$1 \\le i \\le k$$$ the condition $$$x_i = x_{i + k}$$$ is satisfied.  An array $$$a$$$ could be split into tandem repeats if you can split it into several parts, each being a subsegment of the array, such that each part is a tandem repeat.  In one operation you can choose an arbitrary letter $$$c$$$ and insert $$$[c, c]$$$ to any position in the array (at the beginning, between any two integers, or at the end).  You are to perform several operations and split the array into tandem repeats or determine that it is impossible. Please note that you do not have to minimize the number of operations. ",
    "editorial": "Let's prove that we can turn the array into a concatenation of tandem repeats using the operations given if and only if every letter occurs an even number of timesIf there is such letter $$$x$$$ that it occurs an odd number of times there is no such sequence of operations, since the parity of the number of occurrences if letter $$$x$$$ stays the same. If we insert a different letter, the number of occurrences of letter $$$x$$$ does not change, if we insert letter $$$x$$$, we add 2 occurrences of it. Thus, it will be impossible to split the array into tandem repeats.If we have an array $$$s_{1}s_{2}...s_{n}$$$, and we want to reverse its prefix of length $$$k \\leq n$$$, we can insert a pair of letters equal to $$$s_{1}$$$ after the $$$k$$$-th symbol, a pair of letters equal to $$$s_{2}$$$ after $$$(k+1)$$$-th symbol and etc.$$$s_1s_2...s_ks_{k+1}...s_n$$$$$$s_1s_2...s_ks_1s_1s_{k+1}...s_n$$$$$$s_1s_2...s_ks_1s_2s_2s_1s_{k+1}...s_n$$$$$$...$$$$$$s_1s_2...s_ks_1s_2...s_ks_k...s_2s_1s_{k+1}...s_n$$$It is obvious that the first $$$2k$$$ symbols of the array form a tandem repeat. We can add it to our division and cut it out from the array. The array will now have its prefix of length $$$k$$$ reversed. Thus, we can move any element to the beginning of the array, so we can simply sort it. Since every element occurs an even number of times, the resulting string will be a concatenation of tandem repeats consisting of the same letters."
}{
    "name": "Game of chess unfinished",
    "code": [
        "42",
        "B"
    ],
    "tags": [
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "Once Volodya was at the museum and saw a regular chessboard as a museum piece. And there were only four chess pieces on it: two white rooks, a white king and a black king. \"Aha, blacks certainly didn't win!\", \u2014 Volodya said and was right for sure. And your task is to say whether whites had won or not.Pieces on the chessboard are guaranteed to represent a correct position (every piece occupies one cell, no two pieces occupy the same cell and kings cannot take each other). Thus, your task is only to decide whether whites mate blacks. We would remind you that it means that the black king can be taken by one of the opponent's pieces at the moment and also it cannot move to an unbeaten position. A rook moves vertically or horizontally by any number of free cells (assuming there are no other pieces on its path), a king \u2014 to the adjacent cells (either by corner or by side). Certainly, pieces cannot leave the board. The black king might be able to take opponent's rooks at his turn (see sample 3).",
    "editorial": ""
}{
    "name": "Vasya and Binary String",
    "code": [
        "1107",
        "E"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2400,
    "statement": "Vasya has a string $$$s$$$ of length $$$n$$$ consisting only of digits 0 and 1. Also he has an array $$$a$$$ of length $$$n$$$. Vasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets $$$a_x$$$ points for erasing substring of length $$$x$$$.Vasya wants to maximize his total points, so help him with this! ",
    "editorial": "We will solve the problem with dynamic programming. Let $$$ans_{l, r}$$$ be the answer for substring $$$s_{l, l + 1, \\dots r}$$$.If sequence is empty ($$$l > r$$$) then $$$ans_{l, r} = 0$$$.Let $$$dp_{dig, l, r, cnt}$$$ be the maximum score that we can get if we reduce the substring $$$s_{l, l + r, \\dots r}$$$ into $$$cnt$$$ digits equal to $$$dig$$$ with some operations. If substring $$$s_{l, l + r, \\dots r}$$$ does not contain $$$cnt$$$ digit $$$dig$$$, then $$$dp_{dig, l, r, cnt} = -10^{18}$$$.If $$$cnt = 0$$$, then $$$dp_{dig, l, r, cnt} = ans_{l, r}$$$.To calculate $$$ans_{l, r}$$$ just fix the sequence of digits that will be deleted last:$$$ans_{l, r} = \\max\\limits_{1 \\le cnt \\le r - l + 1, 0 \\le dig \\le 1} a_{cnt} + dp_{dig, l, r, cnt}$$$.To calculate $$$dp_{dig, l, r, cnt}$$$ just fix the first element $$$mid$$$ that is left after working with the substring. Note that $$$s_{mid}$$$ must be equal to $$$dig$$$.$$$dp_{dig, l, r, cnt} = \\max\\limits_{1 \\le mid \\le r, s_{mid} = dig} ans_{l, mid - 1} + dp_{dig, mid + 1, r, cnt - 1}$$$.All that's left is to transform these formulas into code. Complexity of this solution is $$$O(n^4)$$$."
}{
    "name": "Set subtraction",
    "code": [
        "530",
        "D"
    ],
    "tags": [
        "*special"
    ],
    "difficulty": 1600,
    "statement": "You are given a starting set consisting of all integers from 1 to 1000, inclusive. You are also given several sets which need to be subtracted from the starting set (i.e., each number which is in at least one of these sets needs to be removed from the starting set). Each subtracted set is represented as an interval of integers from A to B, inclusive. Output the result after all subtractions.",
    "editorial": ""
}{
    "name": "Going to the Cinema",
    "code": [
        "1781",
        "B"
    ],
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "difficulty": 1000,
    "statement": "A company of $$$n$$$ people is planning a visit to the cinema. Every person can either go to the cinema or not. That depends on how many other people will go. Specifically, every person $$$i$$$ said: \"I want to go to the cinema if and only if at least $$$a_i$$$ other people will go, not counting myself\". That means that person $$$i$$$ will become sad if:   they go to the cinema, and strictly less than $$$a_i$$$ other people go; or  they don't go to the cinema, and at least $$$a_i$$$ other people go. In how many ways can a set of people going to the cinema be chosen so that nobody becomes sad?",
    "editorial": "Let's fix the number of people going to the cinema $$$k$$$ and try to choose a set of this exact size. What happens to people with different $$$a_i$$$?  If $$$a_i < k$$$, person $$$i$$$ definitely wants to go.  If $$$a_i > k$$$, person $$$i$$$ definitely does not want to go.  If $$$a_i = k$$$, there is actually no good outcome for person $$$i$$$. If person $$$i$$$ goes to the cinema, there are only $$$k - 1$$$ other people going, so person $$$i$$$ will be sad (since $$$k - 1 < a_i$$$). If person $$$i$$$ does not go, there are $$$k$$$ other people going, so person $$$i$$$ will be sad too (since $$$k \\ge a_i$$$). Thus, for a set of size $$$k$$$ to exist, there must be no people with $$$a_i = k$$$, and the number of people with $$$a_i < k$$$ must be exactly $$$k$$$. We can easily check these conditions if we use an auxiliary array cnt such that cnt[x] is equal to the number of people with $$$a_i = x$$$.Alternative solution:Notice that if a set of $$$k$$$ people can go to the cinema, it must always be a set of people with the smallest $$$a_i$$$. Thus, we can start with sorting the array $$$a$$$ in non-decreasing order.Then, for each length $$$k$$$ of a prefix of this array, we can check whether the first $$$k$$$ elements are all smaller than $$$k$$$, and the remaining $$$n-k$$$ elements are all greater than $$$k$$$.However, since the array is sorted, it is enough to check that the $$$k$$$-th element is smaller than $$$k$$$, and the $$$k+1$$$-th element is greater than $$$k$$$."
}{
    "name": "World Cup",
    "code": [
        "996",
        "B"
    ],
    "tags": [
        "binary search",
        "math"
    ],
    "difficulty": 1300,
    "statement": "Allen wants to enter a fan zone that occupies a round square and has $$$n$$$ entrances.There already is a queue of $$$a_i$$$ people in front of the $$$i$$$-th entrance. Each entrance allows one person from its queue to enter the fan zone in one minute.Allen uses the following strategy to enter the fan zone:   Initially he stands in the end of the queue in front of the first entrance.  Each minute, if he is not allowed into the fan zone during the minute (meaning he is not the first in the queue), he leaves the current queue and stands in the end of the queue of the next entrance (or the first entrance if he leaves the last entrance). Determine the entrance through which Allen will finally enter the fan zone.",
    "editorial": "For gate $$$k$$$ (where $$$1 \\le k \\le n$$$) we visit the gate at times $$$k, k+n, k+2n, \\cdots$$$ Therefore, the earliest Allen could enter from gate $$$k$$$ is the time $$$k + tn$$$ such that $$$k + tn \\ge a_k.$$$ Now, for each $$$k$$$, compute the minimal integer $$$b_k = k+tn$$$ such that $$$k+tn \\ge a_k$$$. Now, find the integer $$$k$$$ with minimum $$$b_k$$$ and output $$$k$$$."
}{
    "name": "Creating the Contest",
    "code": [
        "1029",
        "B"
    ],
    "tags": [
        "dp",
        "greedy",
        "math"
    ],
    "difficulty": 1200,
    "statement": "You are given a problemset consisting of $$$n$$$ problems. The difficulty of the $$$i$$$-th problem is $$$a_i$$$. It is guaranteed that all difficulties are distinct and are given in the increasing order.You have to assemble the contest which consists of some problems of the given problemset. In other words, the contest you have to assemble should be a subset of problems (not necessary consecutive) of the given problemset. There is only one condition that should be satisfied: for each problem but the hardest one (the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let $$$a_{i_1}, a_{i_2}, \\dots, a_{i_p}$$$ be the difficulties of the selected problems in increasing order. Then for each $$$j$$$ from $$$1$$$ to $$$p-1$$$ $$$a_{i_{j + 1}} \\le a_{i_j} \\cdot 2$$$ should hold. It means that the contest consisting of only one problem is always valid.Among all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.",
    "editorial": "The answer is always a segment of the initial array. The authors solution uses two pointers technique: let's iterate over all left bounds of the correct contests and try to search maximum by inclusion correct contest. Let's iterate over all $$$i$$$ from $$$0$$$ to $$$n-1$$$ and let the current left bound be $$$i$$$. Let $$$j$$$ be the maximum right bound of the correct contest starting from the position $$$i$$$. Initially $$$j=i$$$. Now while $$$j + 1 < n$$$ and $$$a_{j + 1} \\le a_j \\cdot 2$$$ let's increase $$$j$$$. Try to update the answer with the value $$$j - i + 1$$$. It is obvious that all positions from $$$i + 1$$$ to $$$j$$$ cannot be left bounds of the maximum by inclusion correct contests, so let's set $$$i=j$$$ and go on. Because each element will be processed once, time complexity is $$$O(n)$$$."
}{
    "name": "Nirvana",
    "code": [
        "1143",
        "B"
    ],
    "tags": [
        "brute force",
        "math",
        "number theory"
    ],
    "difficulty": 1200,
    "statement": "Kurt reaches nirvana when he finds the product of all the digits of some positive integer. Greater value of the product makes the nirvana deeper.Help Kurt find the maximum possible product of digits among all integers from $$$1$$$ to $$$n$$$.",
    "editorial": "Let number $$$x$$$ be an answer, and $$$\\overline{y_0 y_1 \\ldots y_l}$$$ - number from input, so $$$x$$$ = $$$\\overline{y_0 y_1 \\ldots y_k (y_{k + 1} - 1) 9 9 \\ldots 9}$$$ for some $$$k$$$ (otherwise, you can increase one of the digits by $$$1$$$, so that $$$x$$$ will still be no more than $$$y$$$). So, let's go through $$$k$$$ from $$$0$$$ to the length of $$$y$$$ and return the maximum of them by the product of digits."
}{
    "name": "Game on Ranges",
    "code": [
        "1623",
        "B"
    ],
    "tags": [
        "brute force",
        "dfs and similar",
        "implementation",
        "sortings"
    ],
    "difficulty": 1100,
    "statement": "Alice and Bob play the following game. Alice has a set $$$S$$$ of disjoint ranges of integers, initially containing only one range $$$[1, n]$$$. In one turn, Alice picks a range $$$[l, r]$$$ from the set $$$S$$$ and asks Bob to pick a number in the range. Bob chooses a number $$$d$$$ ($$$l \\le d \\le r$$$). Then Alice removes $$$[l, r]$$$ from $$$S$$$ and puts into the set $$$S$$$ the range $$$[l, d - 1]$$$ (if $$$l \\le d - 1$$$) and the range $$$[d + 1, r]$$$ (if $$$d + 1 \\le r$$$). The game ends when the set $$$S$$$ is empty. We can show that the number of turns in each game is exactly $$$n$$$.After playing the game, Alice remembers all the ranges $$$[l, r]$$$ she picked from the set $$$S$$$, but Bob does not remember any of the numbers that he picked. But Bob is smart, and he knows he can find out his numbers $$$d$$$ from Alice's ranges, and so he asks you for help with your programming skill.Given the list of ranges that Alice has picked ($$$[l, r]$$$), for each range, help Bob find the number $$$d$$$ that Bob has picked.We can show that there is always a unique way for Bob to choose his number for a list of valid ranges picked by Alice.",
    "editorial": "If the length of a range $$$[l, r]$$$ is 1 (that is, $$$l = r$$$), then $$$d = l = r$$$. Otherwise, if Bob picks a number $$$d$$$, then Alice has to put the sets $$$[l, d - 1]$$$ and $$$[d + 1, r]$$$ (if existed) back to the set. Thus, there will be a moment that Alice picks the range $$$[l, d - 1]$$$ (if existed), and another moment to pick the range $$$[d + 1, r]$$$ (if existed) as well.Using the above observation, for each range $$$[l, r]$$$, we can iterate the number $$$d$$$ from $$$l$$$ to $$$r$$$, check if both range $$$[l, d - 1]$$$ (if $$$d > l$$$) and $$$[d + 1, r]$$$ (if $$$d < r$$$) existed in the Alice's picked ranges. Or in other words, check if these ranges are given in the input.For checking, we can either use set data structures supported in most programming languages or simply use a 2-dimensional array for marking the picked ranges. The time complexity is, therefore, $$$O(n^2)$$$."
}{
    "name": "Chilly Willy",
    "code": [
        "248",
        "B"
    ],
    "tags": [
        "math",
        "number theory"
    ],
    "difficulty": 1400,
    "statement": "Chilly Willy loves playing with numbers. He only knows prime numbers that are digits yet. These numbers are 2, 3, 5 and 7. But Willy grew rather bored of such numbers, so he came up with a few games that were connected with them.Chilly Willy wants to find the minimum number of length n, such that it is simultaneously divisible by all numbers Willy already knows (2, 3, 5 and 7). Help him with that.A number's length is the number of digits in its decimal representation without leading zeros.",
    "editorial": ""
}{
    "name": "Coin Troubles",
    "code": [
        "283",
        "C"
    ],
    "tags": [
        "dp"
    ],
    "difficulty": 2100,
    "statement": "In the Isle of Guernsey there are n different types of coins. For each i (1 \u2264 i \u2264 n), coin of type i is worth ai cents. It is possible that ai = aj for some i and j (i \u2260 j). Bessie has some set of these coins totaling t cents. She tells Jessie q pairs of integers. For each i (1 \u2264 i \u2264 q), the pair bi, ci tells Jessie that Bessie has a strictly greater number of coins of type bi than coins of type ci. It is known that all bi are distinct and all ci are distinct. Help Jessie find the number of possible combinations of coins Bessie could have. Two combinations are considered different if there is some i (1 \u2264 i \u2264 n), such that the number of coins Bessie has of type i is different in the two combinations. Since the answer can be very large, output it modulo 1000000007 (109 + 7). If there are no possible combinations of coins totaling t cents that satisfy Bessie's conditions, output 0.",
    "editorial": ""
}{
    "name": "Dominant Character",
    "code": [
        "1605",
        "C"
    ],
    "tags": [
        "brute force",
        "greedy",
        "implementation",
        "strings"
    ],
    "difficulty": 1400,
    "statement": "Ashish has a string $$$s$$$ of length $$$n$$$ containing only characters 'a', 'b' and 'c'.He wants to find the length of the smallest substring, which satisfies the following conditions:   Length of the substring is at least $$$2$$$  'a' occurs strictly more times in this substring than 'b'  'a' occurs strictly more times in this substring than 'c'  Ashish is busy planning his next Codeforces round. Help him solve the problem.A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.",
    "editorial": "Tl;dr: The following are all the possible minimal substrings (there aren't that many) which satisfy the given conditions: \"aa\", \"aba\", \"aca\", \"abca\", \"acba\", \"abbacca\", \"accabba\". Any other string that satisfies the condition contains at least one of these as a substring, and hence is not the optimal substring for the answer.Claim: If a substring exists which satisfies the given conditions, then the length of the shortest such substring is at most $$$7$$$. Otherwise the solution does not exist.Proof: Let us consider that the solution exists. We will try to prove this by breaking this into the following cases:Case 1: There exist two such \"a\" whose distance is less than or equal to $$$2$$$, where distance is the absolute difference of their indices. In this case where there are two such \"a\" whose distance is less than $$$2$$$, then either these two \"a\" are present consecutive or there is only one single letter between these two \"a\". All these minimal substrings are \"aa\", \"aba\" and \"aca\"which satisfies all the given conditions.Hence we can say that the shortest length of such substring that satisfies the given conditions is at most $$$3$$$ in this case.Case 2: There exists no two such \"a\" whose distance is less than or equal to $$$2$$$. In this case all the consecutive occurrences of \"a\" are present at a distance at least $$$3$$$. Then in order for the number of \"a\" to be bigger than that of \"b\" and \"c\" the string must look like \"a??a??a??a??a\". Let us define \"??\" as a block. Now if there is any block consisting of different characters $$$i.e$$$ \"bc\" or \"cb\" then the substring \"a??a\" will satisfy all the given conditions and hence the minimal length will be $$$4$$$. Notice that there must be at least one block of \"bb\" and atleast one block of \"cc\", otherwise \"a\" will not be in a majority. Hence, there must exist 2 consecutive blocks equal to \"bb\" and \"cc\" or \"cc\" and \"bb\" in the string (otherwise all blocks would be of the same character). Hence we can pick the substring \"abbacca\" or \"accabba\" which satisfies the given conditions. The minimal length is, therefore, $$$7$$$ in this case.Therefore we can say that the shortest length of such substring that satisfies the given conditions is at most $$$7$$$ in this case.Thus, it suffices to only check all substrings of length up to $$$7$$$ and find the smallest among them that satisfies the given conditions (or report that it does not exist).Time Complexity: $$$\\mathcal{O}(7 \\cdot n)$$$"
}{
    "name": "Xors on Segments",
    "code": [
        "620",
        "F"
    ],
    "tags": [
        "data structures",
        "strings",
        "trees"
    ],
    "difficulty": 2800,
    "statement": "You are given an array with n integers ai and m queries. Each query is described by two integers (lj, rj).Let's define the function . The function is defined for only u \u2264 v.For each query print the maximal value of the function f(ax, ay) over all lj \u2264 x, y \u2264 rj,  ax \u2264 ay.",
    "editorial": ""
}{
    "name": "Two Groups",
    "code": [
        "1747",
        "A"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 800,
    "statement": "You are given an array $$$a$$$ consisting of $$$n$$$ integers. You want to distribute these $$$n$$$ integers into two groups $$$s_1$$$ and $$$s_2$$$ (groups can be empty) so that the following conditions are satisfied:  For each $$$i$$$ $$$(1 \\leq i \\leq n)$$$, $$$a_i$$$ goes into exactly one group. The value $$$|sum(s_1)| - |sum(s_2)|$$$ is the maximum possible among all such ways to distribute the integers.Here $$$sum(s_1)$$$ denotes the sum of the numbers in the group $$$s_1$$$, and $$$sum(s_2)$$$ denotes the sum of the numbers in the group $$$s_2$$$.Determine the maximum possible value of $$$|sum(s_1)| - |sum(s_2)|$$$.",
    "editorial": ""
}{
    "name": "Mahmoud and a Dictionary",
    "code": [
        "766",
        "D"
    ],
    "tags": [
        "data structures",
        "dfs and similar",
        "dp",
        "dsu",
        "graphs"
    ],
    "difficulty": 2000,
    "statement": "Mahmoud wants to write a new dictionary that contains n words and relations between them. There are two types of relations: synonymy (i.\u00a0e. the two words mean the same) and antonymy (i.\u00a0e. the two words mean the opposite). From time to time he discovers a new relation between two words.He know that if two words have a relation between them, then each of them has relations with the words that has relations with the other. For example, if like means love and love is the opposite of hate, then like is also the opposite of hate. One more example: if love is the opposite of hate and hate is the opposite of like, then love means like, and so on.Sometimes Mahmoud discovers a wrong relation. A wrong relation is a relation that makes two words equal and opposite at the same time. For example if he knows that love means like and like is the opposite of hate, and then he figures out that hate means like, the last relation is absolutely wrong because it makes hate and like opposite and have the same meaning at the same time.After Mahmoud figured out many relations, he was worried that some of them were wrong so that they will make other relations also wrong, so he decided to tell every relation he figured out to his coder friend Ehab and for every relation he wanted to know is it correct or wrong, basing on the previously discovered relations. If it is wrong he ignores it, and doesn't check with following relations.After adding all relations, Mahmoud asked Ehab about relations between some words based on the information he had given to him. Ehab is busy making a Codeforces round so he asked you for help.",
    "editorial": "Let's build a graph containing the words, For every relation in the input add a new edge with the weight of 0 if they are equal and 1 if they are opposites, If adding the edge doesn't make the graph cyclic, Our relation is valid, Otherwise it may be valid or invalid so we'll answer them offline. Check if adding that edge will make the graph cyclic or not using union-find like Kruskal's algorithm. Suspend answering relations that will make the graph cyclic, Now we have a forest of trees, Let cum[i] be the xor of the weights on the edges in the path from the root of the component of node i to node i. Calculate it using dfs. To find the relation between 2 words u and v, Check if they are in the same component using union-find, If they aren't, The answer is 3 otherwise the answer is , Now to answer suspended relations, Find the relation between the 2 words and check if it's the same as the input relation, Then answer the queries.Code : http://pastebin.com/WqwduaYsTime complexity : O((n + m + q)log(n) * maxL) where maxL is the length of the longest string considering that union-find works in constant time.Problem author : [user:mahmoudbadawy,2017-02-07].Solution author : me.Testers : me and [user:mahmoudbadawy,2017-02-07].Wait for a hard version of this problem."
}{
    "name": "New Year and Rainbow Roads",
    "code": [
        "908",
        "F"
    ],
    "tags": [
        "graphs",
        "greedy",
        "implementation"
    ],
    "difficulty": 2400,
    "statement": "Roy and Biv have a set of n points on the infinite number line.Each point has one of 3 colors: red, green, or blue.Roy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects.They want to do this in such a way that they will both see that all the points are connected (either directly or indirectly).However, there is a catch: Roy cannot see the color red and Biv cannot see the color blue.Therefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected (and similarly, if all the blue points are removed, the remaining red and green points are connected).Help them compute the minimum cost way to choose edges to satisfy the above constraints.",
    "editorial": "Let's make a few simplifying observations  It is not optimal to connect a red and blue point directly: Neither Roy or Biv will see this edge.  If we have a sequence like red green red (or similarly blue green blue), it is not optimal to connect the outer two red nodes. We can replace the outer edge with two edges that have the same weight. This replacement will form some cycle in the red-green points, so we can remove one of these edges for a cheaper cost. With these two observations, we can construct a solution as follows. First, split the points by the green points. Each section is now independent. There are then two cases, the outer green points are not directly connected, in which case, we must connect all the red/blue points in the line (for 2 * length of segment weight), or the outer green points are directly connected, in which case, we can omit the heaviest red and blue segment (for 3 * length of segment - heaviest red - heaviest blue). Thus, this problem can be solved in linear time.Be careful about the case with no green points."
}{
    "name": "Bath Queue",
    "code": [
        "28",
        "C"
    ],
    "tags": [
        "combinatorics",
        "dp",
        "probabilities"
    ],
    "difficulty": 2200,
    "statement": "There are n students living in the campus. Every morning all students wake up at the same time and go to wash. There are m rooms with wash basins. The i-th of these rooms contains ai wash basins. Every student independently select one the rooms with equal probability and goes to it. After all students selected their rooms, students in each room divide into queues by the number of wash basins so that the size of the largest queue is the least possible. Calculate the expected value of the size of the largest queue among all rooms.",
    "editorial": ""
}{
    "name": "Strange Array",
    "code": [
        "1539",
        "F"
    ],
    "tags": [
        "data structures",
        "greedy",
        "sortings"
    ],
    "difficulty": 2600,
    "statement": "Vasya has an array of $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$. Vasya thinks that all numbers in his array are strange for some reason. To calculate how strange the $$$i$$$-th number is, Vasya created the following algorithm.He chooses a subsegment $$$a_l, a_{l+1}, \\ldots, a_r$$$, such that $$$1 \\le l \\le i \\le r \\le n$$$, sort its elements in increasing order in his head (he can arrange equal elements arbitrary). After that he finds the center of the segment. The center of a segment is the element at position $$$(l + r) / 2$$$, if the length of the segment is odd, and at position $$$(l + r + 1) / 2$$$ otherwise. Now Vasya finds the element that was at position $$$i$$$ before the sorting, and calculates the distance between its current position and the center of the subsegment (the distance between the elements with indices $$$j$$$ and $$$k$$$ is $$$|j - k|$$$).The strangeness of the number at position $$$i$$$ is the maximum distance among all suitable choices of $$$l$$$ and $$$r$$$. Vasya wants to calculate the strangeness of each number in his array. Help him to do it. ",
    "editorial": "Note that the distance from the given element to the median element (the center of a sorted segment) can be defined in terms of numbers of elements that are less, equal or bigger than the given element. Let $$$cnt_L$$$ be the number of elements that are less, $$$cnt_M$$$\u00a0\u2014 equal (excluding the given) and $$$cnt_R$$$\u00a0\u2014 bigger than the given element.Then the distance may be calculated in the following way:   If $$$a_i$$$ is bigger than the median element: $$$ans = \\lfloor \\frac{cnt_L + cnt_M - cnt_R}{2}\\rfloor$$$  otherwise $$$ans = \\lfloor \\frac{cnt_R + cnt_M - cnt_L + 1}{2}\\rfloor$$$ To solve the problem you firstly need to assume that the given element is greater than the median element, then consider the other case and take the maximum of two answers. Hereinafter only the second case is considered (in which the element is not greater than the median one), the first case can be done analogically.Since we need to maximize $$$cnt_R + cnt_M - cnt_L$$$, let's do it separately for the elements to the left and to the right of ours.Let's sort the indices so that the corresponding elements go in increasing order.Let array $$$D = [1, 1 \\ldots, 1]$$$ (its size is $$$n$$$) and $$$P = [1, 2, \\ldots n]$$$. We will need operations \"+= on the segment\" and \"min/max on the segment\", so let's build a segment tree for $$$P$$$. We will iterate through the indices in the received order and when considering the index $$$i$$$ we'll change $$$D$$$ and $$$P$$$ so that they correspond to the following conditions:   For each $$$1 \\le j \\le n$$$ if $$$a_j < a_i$$$ then $$$D_j = -1$$$, else $$$D_j = 1$$$  Array $$$P$$$ is a prefix sum array for $$$D$$$ (changes to $$$P$$$ are made via a segment tree) In order to find $$$\\max(cnt_R + cnt_M - cnt_L)$$$ among elements to the left of $$$i$$$ we need to find $$$\\min\\limits_{j=1}^{i} P_j$$$.In order to find $$$\\max(cnt_R + cnt_M - cnt_L)$$$ among elements to the right of i will find $$$\\max \\limits_{j=i}^{n} P_j$$$.We will find these values using the segment tree for $$$P$$$ and consider the next index.Note that for all the changes we will need only $$$n$$$ actions, because in array $$$D$$$ each element is firstly equal to 1, and then once becomes -1 and never changes again.The described solution's time complexity is $$$O(n \\cdot \\log(n))$$$"
}{
    "name": "Ehab and a 2-operation task",
    "code": [
        "1088",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "greedy",
        "math"
    ],
    "difficulty": 1400,
    "statement": "You're given an array $$$a$$$ of length $$$n$$$. You can perform the following operations on it:  choose an index $$$i$$$ $$$(1 \\le i \\le n)$$$, an integer $$$x$$$ $$$(0 \\le x \\le 10^6)$$$, and replace $$$a_j$$$ with $$$a_j+x$$$ for all $$$(1 \\le j \\le i)$$$, which means add $$$x$$$ to all the elements in the prefix ending at $$$i$$$.  choose an index $$$i$$$ $$$(1 \\le i \\le n)$$$, an integer $$$x$$$ $$$(1 \\le x \\le 10^6)$$$, and replace $$$a_j$$$ with $$$a_j \\% x$$$ for all $$$(1 \\le j \\le i)$$$, which means replace every element in the prefix ending at $$$i$$$ with the remainder after dividing it by $$$x$$$. Can you make the array strictly increasing in no more than $$$n+1$$$ operations?",
    "editorial": ""
}{
    "name": "Next Test",
    "code": [
        "27",
        "A"
    ],
    "tags": [
        "implementation",
        "sortings"
    ],
    "difficulty": 1200,
    "statement": "\u00abPolygon\u00bb is a system which allows to create programming tasks in a simple and professional way. When you add a test to the problem, the corresponding form asks you for the test index. As in most cases it is clear which index the next test will have, the system suggests the default value of the index. It is calculated as the smallest positive integer which is not used as an index for some previously added test.You are to implement this feature. Create a program which determines the default index of the next test, given the indexes of the previously added tests.",
    "editorial": ""
}{
    "name": "Two Sets",
    "code": [
        "468",
        "B"
    ],
    "tags": [
        "2-sat",
        "dfs and similar",
        "dsu",
        "graph matchings",
        "greedy"
    ],
    "difficulty": 2000,
    "statement": "Little X has n distinct integers: p1, p2, ..., pn. He wants to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. Help Little X divide the numbers into two sets or determine that it's impossible.",
    "editorial": ""
}{
    "name": "Mission Possible",
    "code": [
        "1252",
        "I"
    ],
    "tags": [],
    "difficulty": 3000,
    "statement": "Allen, a government secret service, has been assigned to infiltrate a mafia secret base to uncover crucial information regarding the mafia's operations.The secret base is a rectangular bounded by $$$(x_L,y_L)$$$, $$$(x_L,y_R)$$$, $$$(x_R,y_L)$$$, and $$$(x_R,y_R)$$$ in a Cartesian coordinate system where $$$x_L < x_R$$$ and $$$y_L < y_R$$$. There are $$$N$$$ sensors placed inside the secret base. The $$$i^{th}$$$ sensor is located at $$$(x_i, y_i)$$$ and has an effective sensing radius of $$$r_i$$$ which can detect any person who is strictly within the radius of $$$r_i$$$ from $$$(x_i, y_i)$$$. In other words, the $$$i^{th}$$$ sensor can detect a person at location $$$(x_a, y_a)$$$ if and only if the Euclidean distance of $$$(x_i, y_i)$$$ and $$$(x_a, y_a)$$$ is strictly less than $$$r_i$$$. It is also known that the Euclidean distance of any two sensors $$$i$$$ and $$$j$$$ is strictly larger than $$$r_i + r_j$$$. Note that the Euclidean distance of two points, $$$(x_a, y_a)$$$ and $$$(x_b, y_b)$$$, is $$$\\sqrt{|x_a - x_b|^2 + |y_a - y_b|^2}$$$.Allen begins his infiltration mission at location $$$(x_s, y_s)$$$, and his target is located at $$$(x_t, y_t)$$$. Allen has the power to run extremely fast in a straight line while he needs to spend extra time to change his running trajectory (to adjust his footing). Although he is a fast runner, he still needs to make sure that none of the sensors detect him while he is running, i.e. there is no point in his running trajectory which is strictly within a sensor effective sensing radius.Let $$$P = \\{(x_{p_1}, y_{p_1}), \\dots, (x_{p_{|P|}}, y_{p_{|P|}})\\}$$$ be the set of locations where Allen changes his running trajectory, thus, Allen's running trajectory with $$$P$$$ is $$$(x_s, y_s) \\rightarrow (x_{p_1}, y_{p_1}) \\rightarrow \\dots \\rightarrow (x_{p_{|P|}}, y_{p_{|P|}}) \\rightarrow (x_t, y_t)$$$ where $$$(x_a,y_a) \\rightarrow (x_b,y_b)$$$ implies that Allen is running from $$$(x_a,y_a)$$$ to $$$(x_b,y_b)$$$ in a straight line. The set $$$P$$$ is feasible if and only if with $$$P$$$, Allen is not detected by any sensor and is not running out of the secret base (although, Allen is allowed to run along the secret base perimeter). Note that $$$x_p$$$ and $$$y_p$$$, $$$(x_p,y_p) \\in P$$$, are not necessarily integers; they can be real numbers.Your task in this problem is to find any one feasible $$$P$$$ which contains no more than $$$1000$$$ points.",
    "editorial": ""
}{
    "name": "EKG",
    "code": [
        "316",
        "B2"
    ],
    "tags": [
        "dfs and similar",
        "dp"
    ],
    "difficulty": 1600,
    "statement": "In the rush of modern life, people often forget how beautiful the world is. The time to enjoy those around them is so little that some even stand in queues to several rooms at the same time in the clinic, running from one queue to another.(Cultural note: standing in huge and disorganized queues for hours is a native tradition in Russia, dating back to the Soviet period. Queues can resemble crowds rather than lines. Not to get lost in such a queue, a person should follow a strict survival technique: you approach the queue and ask who the last person is, somebody answers and you join the crowd. Now you're the last person in the queue till somebody else shows up. You keep an eye on the one who was last before you as he is your only chance to get to your destination) I'm sure many people have had the problem when a stranger asks who the last person in the queue is and even dares to hint that he will be the last in the queue and then bolts away to some unknown destination. These are the representatives of the modern world, in which the ratio of lack of time is so great that they do not even watch foreign top-rated TV series. Such people often create problems in queues, because the newcomer does not see the last person in the queue and takes a place after the \"virtual\" link in this chain, wondering where this legendary figure has left.The Smart Beaver has been ill and he's made an appointment with a therapist. The doctor told the Beaver the sad news in a nutshell: it is necessary to do an electrocardiogram. The next day the Smart Beaver got up early, put on the famous TV series on download (three hours till the download's complete), clenched his teeth and bravely went to join a queue to the electrocardiogram room, which is notorious for the biggest queues at the clinic.Having stood for about three hours in the queue, the Smart Beaver realized that many beavers had not seen who was supposed to stand in the queue before them and there was a huge mess. He came up to each beaver in the ECG room queue and asked who should be in front of him in the queue. If the beaver did not know his correct position in the queue, then it might be his turn to go get an ECG, or maybe he should wait for a long, long time...As you've guessed, the Smart Beaver was in a hurry home, so he gave you all the necessary information for you to help him to determine what his number in the queue can be.",
    "editorial": ""
}{
    "name": "Graph Transpositions",
    "code": [
        "1442",
        "C"
    ],
    "tags": [
        "dfs and similar",
        "graphs",
        "greedy",
        "shortest paths"
    ],
    "difficulty": 2400,
    "statement": "You are given a directed graph of $$$n$$$ vertices and $$$m$$$ edges. Vertices are numbered from $$$1$$$ to $$$n$$$. There is a token in vertex $$$1$$$.The following actions are allowed:   Token movement. To move the token from vertex $$$u$$$ to vertex $$$v$$$ if there is an edge $$$u \\to v$$$ in the graph. This action takes $$$1$$$ second.  Graph transposition. To transpose all the edges in the graph: replace each edge $$$u \\to v$$$ by an edge $$$v \\to u$$$. This action takes increasingly more time: $$$k$$$-th transposition takes $$$2^{k-1}$$$ seconds, i.e. the first transposition takes $$$1$$$ second, the second one takes $$$2$$$ seconds, the third one takes $$$4$$$ seconds, and so on. The goal is to move the token from vertex $$$1$$$ to vertex $$$n$$$ in the shortest possible time. Print this time modulo $$$998\\,244\\,353$$$.",
    "editorial": "Consider a sequence of actions that moves the token from vertex $$$1$$$ to vertex $$$n$$$. Let us say it has $$$A$$$ token movements and $$$B$$$ graph transpositions. This sequence takes $$$A + 2^{B} - 1$$$ seconds.Note that the optimal path does not visit any edge twice. That means we need to consider only paths with $$$A \\le m$$$. Consider another sequence consisting of $$$A'$$$ token movements and $$$B'$$$ graph transpositions. Let $$$lm = \\lceil\\log_2 m\\rceil$$$. Note the following. If $$$B < lm < B'$$$ then $$$A + 2^{B} - 1$$$ < $$$A' + 2^{B'} - 1$$$. This is true because the difference between $$$A$$$ and $$$A'$$$ does not exceed $$$m$$$ and $$$2^{B'} - 2^{B} > m$$$. This gives us the following: if there is any sequence of actions with $$$B < lm$$$ that moves the token from vertex $$$1$$$ to vertex $$$n$$$ then optimal path's $$$B$$$ is less than $$$lm$$$ too. Let us check this with the following algorithm, and if it is so, find the optimal sequence of actions.We can now build a new graph that consists of $$$lm$$$ copies of the original graph:   Reverse all the edges in every even graph copy.  For every vertex $$$u$$$ add new edge between $$$k$$$-th and $$$k+1$$$-th copies of vertex $$$u$$$ with weight $$$2^{k-1}$$$ for $$$k = 1 \\ldots lm - 1$$$. We can find optimal paths from the first copy of vertex $$$1$$$ to all the copies of vertex $$$n$$$ using Dijkstra algorithm. Shortest of these paths would correspond to the answer: movement along a copy of original edge denotes token movement; movement along a new edge denotes graph transposition.If the algorithm found no paths, then the sequence of actions that moves the token to from vertex 1 to vertex $$$n$$$ consists of at least $$$lm + 1$$$ transpositions. Note that if $$$lm < B < B'$$$ then $$$A + 2^{B} - 1$$$ < $$$A' + 2^{B'} - 1$$$. It means that all sequences of actions can be compared using ordered vector $$$(B, A)$$$ lexicographically.Let us build another graph consisting of $$$2$$$ copies of the original graph:   Reverse all the edges in the second copy of the graph.  Assign $$$(0, 1)$$$ to weights of all of these edges.  For every vertex $$$u$$$ add two new edges between copies of $$$u$$$: from the first to the second copy and back. Weights of both edges is $$$(1, 0)$$$. Let us find optimal paths from the first copy of vertex $$$1$$$ to both copies of vertex $$$n$$$ using Dijkstra algorithm. Let $$$(B, A)$$$ be the length of the shortest one. New graph allows us to restore the optimal sequence of actions that moves the token from vertex $$$1$$$ to vertex $$$n$$$ that will take $$$A + 2^{B} - 1$$$ seconds."
}{
    "name": "Beautiful Divisors",
    "code": [
        "893",
        "B"
    ],
    "tags": [
        "brute force",
        "implementation"
    ],
    "difficulty": 1000,
    "statement": "Recently Luba learned about a special kind of numbers that she calls beautiful numbers. The number is called beautiful iff its binary representation consists of k + 1 consecutive ones, and then k consecutive zeroes.Some examples of beautiful numbers:   12 (110);  1102 (610);  11110002 (12010);  1111100002 (49610). More formally, the number is beautiful iff there exists some positive integer k such that the number is equal to (2k - 1) * (2k - 1).Luba has got an integer number n, and she wants to find its greatest beautiful divisor. Help her to find it!",
    "editorial": "Let's notice that there are only 8 beautiful numbers less than 105. Generate them all and select the greatest one which is also divisor of n.Overall complexity: O(1)."
}{
    "name": "Convex Shape",
    "code": [
        "275",
        "B"
    ],
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "difficulty": 1700,
    "statement": "Consider an n \u00d7 m grid. Initially all the cells of the grid are colored white. Lenny has painted some of the cells (at least one) black. We call a painted grid convex if one can walk from any black cell to any another black cell using a path of side-adjacent black cells changing his direction at most once during the path. In the figure below, the left grid is convex while the right one is not convex, because there exist two cells which need more than one time to change direction in their path.  You're given a painted grid in the input. Tell Lenny if the grid is convex or not.",
    "editorial": ""
}{
    "name": "Meaningless Operations",
    "code": [
        "1110",
        "C"
    ],
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "difficulty": 1500,
    "statement": "Can the greatest common divisor and bitwise operations have anything in common? It is time to answer this question.Suppose you are given a positive integer $$$a$$$. You want to choose some integer $$$b$$$ from $$$1$$$ to $$$a - 1$$$ inclusive in such a way that the greatest common divisor (GCD) of integers $$$a \\oplus b$$$ and $$$a \\> \\& \\> b$$$ is as large as possible. In other words, you'd like to compute the following function:$$$$$$f(a) = \\max_{0 < b < a}{gcd(a \\oplus b, a \\> \\& \\> b)}.$$$$$$Here $$$\\oplus$$$ denotes the bitwise XOR operation, and $$$\\&$$$ denotes the bitwise AND operation.The greatest common divisor of two integers $$$x$$$ and $$$y$$$ is the largest integer $$$g$$$ such that both $$$x$$$ and $$$y$$$ are divided by $$$g$$$ without remainder.You are given $$$q$$$ integers $$$a_1, a_2, \\ldots, a_q$$$. For each of these integers compute the largest possible value of the greatest common divisor (when $$$b$$$ is chosen optimally). ",
    "editorial": "Denote the highest bit of $$$a$$$ as $$$x$$$ (that is largest number $$$x$$$, such that $$$2^x \\le a$$$) and consider $$$b = (2^x - 1) \\> \\oplus a$$$. It's easy to see that if $$$a \\neq 2^x - 1$$$ then $$$0 < b < a$$$ holds. In this, $$$gcd$$$ is maximum possible, because $$$a \\> \\& b = 0$$$ \u0438 $$$gcd(2 ^ x - 1, 0) = 2^x - 1$$$.Now consider the case when $$$a = 2^x - 1$$$. This implies $$$gcd(a \\oplus b, a \\& b) = gcd(2^x - 1 - b, b) = gcd(2^x - 1, b)$$$, since $$$gcd(x, x + y) = gcd(x, y)$$$ (for all $$$x$$$ and $$$y$$$), hence it's sufficient to find the largest non trivial divisor of $$$a$$$\u00a0\u2014 it will be the desired answer.Finding the largest divisor can be done in sqrt time which leads to the time $$$O(q \\sqrt{m})$$$ or it's possible to calculate answers for all $$$a = 2^x - 1$$$ beforehand."
}{
    "name": "Candies Game",
    "code": [
        "341",
        "E"
    ],
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "difficulty": 3000,
    "statement": "Iahub is playing an uncommon game. Initially, he has n boxes, numbered 1, 2, 3, ..., n. Each box has some number of candies in it, described by a sequence a1, a2, ..., an. The number ak represents the number of candies in box k. The goal of the game is to move all candies into exactly two boxes. The rest of n - 2 boxes must contain zero candies. Iahub is allowed to do several (possible zero) moves. At each move he chooses two different boxes i and j, such that ai \u2264 aj. Then, Iahub moves from box j to box i exactly ai candies. Obviously, when two boxes have equal number of candies, box number j becomes empty.Your task is to give him a set of moves such as Iahub to archive the goal of the game. If Iahub can't win the game for the given configuration of boxes, output -1. Please note that in case there exist a solution, you don't need to print the solution using minimal number of moves.",
    "editorial": ""
}{
    "name": "Knapsack",
    "code": [
        "1132",
        "E"
    ],
    "tags": [
        "dfs and similar",
        "dp",
        "greedy"
    ],
    "difficulty": 2300,
    "statement": "You have a set of items, each having some integer weight not greater than $$$8$$$. You denote that a subset of items is good if total weight of items in the subset does not exceed $$$W$$$.You want to calculate the maximum possible weight of a good subset of items. Note that you have to consider the empty set and the original set when calculating the answer.",
    "editorial": "Let's consider the optimal answer. Suppose we take $$$c_i$$$ items of weight $$$i$$$.Let $$$L$$$ be the least common multiple of all weights (that is $$$840$$$). Then we may represent $$$c_i$$$ as $$$c_i = \\frac{L}{i} p_i + q_i$$$, where $$$0 \\le q < \\frac{L}{i}$$$. Let's do the following trick: we will take $$$q_i$$$ items of weight $$$i$$$, and all the remaining items of this weight can be merged into some items of weight $$$L$$$.Then we can write a brute force solution that picks less than $$$\\frac{L}{i}$$$ items of each weight, transforms the remaining ones into items of weight $$$L$$$ as much as possible, and when we fix the whole subset, adds maximum possible number of items of weight $$$L$$$ to the answer. This works in something like $$$\\prod \\limits_{i = 1}^8 \\frac{L}{i} = \\frac{L^8}{8!}$$$ operations, which is too much.How can we speed it up? Rewrite it using dynamic programming! When we have fixed the number of items we take from $$$x$$$ first sets, the only two things that matter now are the current total weight of taken items and the number of items of weight $$$L$$$ we can use; and it's obvious that the more items of weight $$$L$$$ we can use, the better. So let's write the following dynamic programming solution: $$$dp[x][y]$$$ \u2014 maximum number of items of weight $$$L$$$ we can have, if we processed first $$$x$$$ types of items, and current total weight is $$$y$$$. Note that the second dimension should have size $$$8L$$$."
}{
    "name": "Animal Observation (hard version)",
    "code": [
        "1304",
        "F2"
    ],
    "tags": [
        "data structures",
        "dp",
        "greedy"
    ],
    "difficulty": 2400,
    "statement": "The only difference between easy and hard versions is the constraint on $$$k$$$.Gildong loves observing animals, so he bought two cameras to take videos of wild animals in a forest. The color of one camera is red, and the other one's color is blue.Gildong is going to take videos for $$$n$$$ days, starting from day $$$1$$$ to day $$$n$$$. The forest can be divided into $$$m$$$ areas, numbered from $$$1$$$ to $$$m$$$. He'll use the cameras in the following way:   On every odd day ($$$1$$$-st, $$$3$$$-rd, $$$5$$$-th, ...), bring the red camera to the forest and record a video for $$$2$$$ days.  On every even day ($$$2$$$-nd, $$$4$$$-th, $$$6$$$-th, ...), bring the blue camera to the forest and record a video for $$$2$$$ days.  If he starts recording on the $$$n$$$-th day with one of the cameras, the camera records for only one day. Each camera can observe $$$k$$$ consecutive areas of the forest. For example, if $$$m=5$$$ and $$$k=3$$$, he can put a camera to observe one of these three ranges of areas for two days: $$$[1,3]$$$, $$$[2,4]$$$, and $$$[3,5]$$$.Gildong got information about how many animals will be seen in each area on each day. Since he would like to observe as many animals as possible, he wants you to find the best way to place the two cameras for $$$n$$$ days. Note that if the two cameras are observing the same area on the same day, the animals observed in that area are counted only once.",
    "editorial": "We can further advance the idea we used in F1 to reduce the time complexity.Solution: $$$O(nm\\log{m})$$$Let's generalize all three cases we discussed in F1. Let's make a lazy segment tree supporting range addition update and range maximum query. Each node represents the maximum value of ($$$DP[i-1]$$$ minus the sum of the animals appearing on the $$$i$$$-th day in the intersected area) in the corresponding interval. Then we can add $$$sum(animal[i \\ldots i+1][j \\ldots j+k-1])$$$ to the maximum value of the segment tree to determine $$$DP[i][j]$$$.For the $$$i$$$-th day, we insert $$$DP[i-1][j]$$$ in the respective index of the segment tree for all $$$j$$$ ($$$1 \\le j \\le m-k+1$$$) initially. Now, to determine $$$DP[i][j]$$$ for each $$$j$$$, we want to subtract $$$sum(animal[i][max(j, x) \\ldots min(j, x)+k-1])$$$ from the segment tree for all $$$x$$$ ($$$1 \\le x \\le m-k+1$$$). But it is infeasible to do this and add them back for every single $$$x$$$-s that has intersected areas. Here, we can use sliding window technique to improve it.To determine $$$DP[i][1]$$$, we can manually subtract the first $$$k$$$ elements of $$$animal[i]$$$ from the segment tree like above. Let's assume that we're done with determining $$$DP[i][j-1]$$$. When we move on to determining $$$DP[i][j]$$$, we can see that $$$animal[i][j-1]$$$ is no longer in the range and thus should be added back to the segment tree. Precisely, all $$$DP[i-1][x]$$$-s where $$$x$$$ is within range $$$[max(1, j-k), j-1]$$$ are affected by this and must be added with $$$animal[i][j-1]$$$. Similarly, $$$animal[i][j+k-1]$$$ is now in the range and thus should be subtracted from all $$$DP[i-1][y]$$$-s where $$$y$$$ is within range $$$[j, j+k-1]$$$.Each range update takes $$$O(\\log{m})$$$ time, and this happens only two times for determining each $$$DP[i][j]$$$. The 'initial' work takes $$$O(k)$$$ time but it happens only once for each day. Therefore, it takes $$$O(m\\log{m})$$$ time for each day and $$$O(nm\\log{m})$$$ time in total.Solution: $$$O(nm)$$$It turns out that it's even possible without the segment tree. Of course, $$$O(nm\\log{m})$$$ is intended to pass so you don't really need to implement this to solve the problem. Instead of segment tree, we'll use monotonic queue structure (the core idea for convex hull trick) to have the values in decreasing order from front to back. If you don't know what monotonic queue is, make sure you understand it first. You can read about it here.We'll do basically the same thing we did for $$$O(nm\\log{m})$$$ solution, but there are two major differences. First, we'll slide the window two times, one from left to right and the other one from right to left. Second, we'll only consider the values where the range of their indices intersects with the window, but only a part of them. We'll see how it works when sliding the window from left to right, then we can also do it in reverse direction.We'll only consider all $$$DP[i-1][x]$$$ where $$$x$$$ is within range $$$[max(1, j-k+1), j]$$$. In other words, we only consider it when the intersected area is a prefix of the window. This means when we're about to determine $$$DP[i][j]$$$, $$$DP[i-1][j]$$$ (in fact, the actual value will be $$$DP[i-1][j] - sum(animal[i][j \\ldots j+k-1])$$$) is inserted into the queue and $$$DP[i-1][j-k]$$$ is removed from the queue.Now let's see how the 'real' values in the queue are changed while sliding the window. Since we'll only add the same value to all elements in the queue every time we slide the window, the order of the elements won't be changed, thus maintaining the monotone queue structure. However, we don't actually need to perform the 'add' action, simply because we can always calculate it in $$$O(1)$$$ time by calculating the sum of the animals between the index of that element (inclusive) and the window (exclusive). So to the 'real' value at the front of the queue, we can add $$$sum(animal[i \\ldots i+1][j \\ldots j+k-1])$$$ to determine $$$DP[i][j]$$$.The exact same thing can be done in the reversed way, too. Now let's take back the prefix and suffix max we discussed in F1, so that we can check the cases when they do not intersect. We can see that each of these operations can be done in $$$O(m)$$$ for each day. Therefore, the whole process is performed in $$$O(nm)$$$ time."
}{
    "name": "Year of University Entrance",
    "code": [
        "769",
        "A"
    ],
    "tags": [
        "*special",
        "implementation",
        "sortings"
    ],
    "difficulty": 800,
    "statement": "There is the faculty of Computer Science in Berland. In the social net \"TheContact!\" for each course of this faculty there is the special group whose name equals the year of university entrance of corresponding course of students at the university. Each of students joins the group of his course and joins all groups for which the year of student's university entrance differs by no more than x from the year of university entrance of this student, where x \u2014 some non-negative integer. A value x is not given, but it can be uniquely determined from the available data. Note that students don't join other groups. You are given the list of groups which the student Igor joined. According to this information you need to determine the year of Igor's university entrance.",
    "editorial": "This task can be solved in several ways. The simplest of them is \u2014 to put all given integers to an array, sort out it and print the median of the resulting array (it means that the element which is in the middle of it)."
}{
    "name": "Repainting Street",
    "code": [
        "1415",
        "B"
    ],
    "tags": [
        "brute force",
        "brute force",
        "greedy"
    ],
    "difficulty": 1100,
    "statement": "There is a street with $$$n$$$ houses in a line, numbered from $$$1$$$ to $$$n$$$. The house $$$i$$$ is initially painted in color $$$c_i$$$. The street is considered beautiful if all houses are painted in the same color. Tom, the painter, is in charge of making the street beautiful. Tom's painting capacity is defined by an integer, let's call it $$$k$$$.On one day, Tom can do the following repainting process that consists of two steps:   He chooses two integers $$$l$$$ and $$$r$$$ such that $$$ 1 \\le l \\le r \\le n $$$ and $$$ r - l + 1 = k $$$.  For each house $$$i$$$ such that $$$l \\le i \\le r$$$, he can either repaint it with any color he wants, or ignore it and let it keep its current color. Note that in the same day Tom can use different colors to repaint different houses.Tom wants to know the minimum number of days needed to repaint the street so that it becomes beautiful.",
    "editorial": "If we want to paint every house on the street with color $$$x$$$, it is easy to see that we need to change every house with color different from $$$x$$$, and not necessarily repaint houses already painted in color $$$x$$$. We can do the following greedy algorithm to minimize the number of days: Find leftmost house not painted in color $$$x$$$. Assume this is in position $$$i$$$. Then we will paint $$$[i,i+k-1]$$$ with color $$$x$$$. Repeat this until all houses are painted in color $$$x$$$. Why is this optimal? When we find the leftmost house not painted in $$$x$$$, we know we need to change it, and as it is the leftmost one, everything before it is painted in $$$x$$$. To maximize our chances of changing other houses that need repainting, we choose this as the leftmost position in our painting range. This can be implemented easily with a linear pass. However, we don't know the color $$$x$$$ that we will have at the end. Limit of colors are small enough, so we can try all of them and just keep the smallest answer.Time complexity: $$$O(n \\cdot max(c))$$$Space complexity: $$$O(n)$$$"
}{
    "name": "Help Shrek and Donkey 2",
    "code": [
        "142",
        "D"
    ],
    "tags": [
        "games"
    ],
    "difficulty": 2600,
    "statement": "Having learned (not without some help from the Codeforces participants) to play the card game from the previous round optimally, Shrek and Donkey (as you may remember, they too live now in the Kingdom of Far Far Away) have decided to quit the boring card games and play with toy soldiers.The rules of the game are as follows: there is a battlefield, its size equals n \u00d7 m squares, some squares contain the toy soldiers (the green ones belong to Shrek and the red ones belong to Donkey). Besides, each of the n lines of the area contains not more than two soldiers. During a move a players should select not less than 1 and not more than k soldiers belonging to him and make them either attack or retreat.An attack is moving all of the selected soldiers along the lines on which they stand in the direction of an enemy soldier, if he is in this line. If this line doesn't have an enemy soldier, then the selected soldier on this line can move in any direction during the player's move. Each selected soldier has to move at least by one cell. Different soldiers can move by a different number of cells. During the attack the soldiers are not allowed to cross the cells where other soldiers stand (or stood immediately before the attack). It is also not allowed to go beyond the battlefield or finish the attack in the cells, where other soldiers stand (or stood immediately before attack).A retreat is moving all of the selected soldiers along the lines on which they stand in the direction from an enemy soldier, if he is in this line. The other rules repeat the rules of the attack.For example, let's suppose that the original battlefield had the form (here symbols \"G\" mark Shrek's green soldiers and symbols \"R\" mark Donkey's red ones):  -G-R--R-G-  Let's suppose that k = 2 and Shrek moves first. If he decides to attack, then after his move the battlefield can look like that:  --GR-     --GR-     -G-R--RG--     -R-G-     -RG--  If in the previous example Shrek decides to retreat, then after his move the battlefield can look like that:  G--R-     G--R-     -G-R--R--G     -R-G-     -R--G  On the other hand, the followings fields cannot result from Shrek's correct move:  G--R-     ---RG     --GR--RG--     -R-G-     GR---  Shrek starts the game. To make a move means to attack or to retreat by the rules. A player who cannot make a move loses and his opponent is the winner. Determine the winner of the given toy soldier game if Shrek and Donkey continue to be under the yellow pills from the last rounds' problem. Thus, they always play optimally (that is, they try to win if it is possible, or finish the game in a draw, by ensuring that it lasts forever, if they cannot win).",
    "editorial": ""
}